
GSM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001240  08006904  08006904  00016904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b44  08007b44  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007b44  08007b44  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b44  08007b44  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b44  08007b44  00017b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b48  08007b48  00017b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a48  20000074  08007bc0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000abc  08007bc0  00020abc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001269c  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c39  00000000  00000000  00032739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  00035378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e70  00000000  00000000  00036290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019722  00000000  00000000  00037100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012425  00000000  00000000  00050822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d2d4  00000000  00000000  00062c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eff1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c94  00000000  00000000  000eff70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080068ec 	.word	0x080068ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080068ec 	.word	0x080068ec

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000180:	2b40      	cmp	r3, #64	; 0x40
 8000182:	bf0c      	ite	eq
 8000184:	2301      	moveq	r3, #1
 8000186:	2300      	movne	r3, #0
 8000188:	b2db      	uxtb	r3, r3
}
 800018a:	4618      	mov	r0, r3
 800018c:	370c      	adds	r7, #12
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr

08000194 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80001a4:	2b80      	cmp	r3, #128	; 0x80
 80001a6:	bf0c      	ite	eq
 80001a8:	2301      	moveq	r3, #1
 80001aa:	2300      	movne	r3, #0
 80001ac:	b2db      	uxtb	r3, r3
}
 80001ae:	4618      	mov	r0, r3
 80001b0:	370c      	adds	r7, #12
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bc80      	pop	{r7}
 80001b6:	4770      	bx	lr

080001b8 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80001b8:	b480      	push	{r7}
 80001ba:	b083      	sub	sp, #12
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
 80001c0:	460b      	mov	r3, r1
 80001c2:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80001c4:	78fa      	ldrb	r2, [r7, #3]
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	605a      	str	r2, [r3, #4]
}
 80001ca:	bf00      	nop
 80001cc:	370c      	adds	r7, #12
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bc80      	pop	{r7}
 80001d2:	4770      	bx	lr

080001d4 <atc_alloc>:
#else
#define	atc_printf(...)     {};
#endif
//####################################################################################################
void* atc_alloc(size_t size)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
#if (_ATC_RTOS == 0)
  return malloc(size);
 80001dc:	6878      	ldr	r0, [r7, #4]
 80001de:	f004 fc79 	bl	8004ad4 <malloc>
 80001e2:	4603      	mov	r3, r0
#else
  return pvPortMalloc(size);
#endif
}
 80001e4:	4618      	mov	r0, r3
 80001e6:	3708      	adds	r7, #8
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bd80      	pop	{r7, pc}

080001ec <atc_free>:
//####################################################################################################
void atc_free(void *ptr)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
  if (ptr != NULL)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d002      	beq.n	8000200 <atc_free+0x14>
#if (_ATC_RTOS == 0)
    free(ptr);
 80001fa:	6878      	ldr	r0, [r7, #4]
 80001fc:	f004 fc72 	bl	8004ae4 <free>
#else
    vPortFree(ptr);
#endif
}
 8000200:	bf00      	nop
 8000202:	3708      	adds	r7, #8
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}

08000208 <atc_lock>:
  atc->inited = true;
  atc_printf("\r\n[%s] initialized.\r\n", atc->name);
}
//####################################################################################################
bool atc_lock(atc_t *atc, uint32_t wait_ms)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b084      	sub	sp, #16
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
 8000210:	6039      	str	r1, [r7, #0]
  if (atc->lock == false)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	f893 3451 	ldrb.w	r3, [r3, #1105]	; 0x451
 8000218:	f083 0301 	eor.w	r3, r3, #1
 800021c:	b2db      	uxtb	r3, r3
 800021e:	2b00      	cmp	r3, #0
 8000220:	d005      	beq.n	800022e <atc_lock+0x26>
  {
    atc->lock = true;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2201      	movs	r2, #1
 8000226:	f883 2451 	strb.w	r2, [r3, #1105]	; 0x451
    return true;
 800022a:	2301      	movs	r3, #1
 800022c:	e01d      	b.n	800026a <atc_lock+0x62>
  }
  uint32_t start = HAL_GetTick();
 800022e:	f001 ffa9 	bl	8002184 <HAL_GetTick>
 8000232:	60f8      	str	r0, [r7, #12]
  while (HAL_GetTick() - start < wait_ms)
 8000234:	e010      	b.n	8000258 <atc_lock+0x50>
  {
    atc_delay(1);
 8000236:	2001      	movs	r0, #1
 8000238:	f001 ffae 	bl	8002198 <HAL_Delay>
    if (atc->lock == 0)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f893 3451 	ldrb.w	r3, [r3, #1105]	; 0x451
 8000242:	f083 0301 	eor.w	r3, r3, #1
 8000246:	b2db      	uxtb	r3, r3
 8000248:	2b00      	cmp	r3, #0
 800024a:	d005      	beq.n	8000258 <atc_lock+0x50>
    {
      atc->lock = true;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	2201      	movs	r2, #1
 8000250:	f883 2451 	strb.w	r2, [r3, #1105]	; 0x451
      return true;
 8000254:	2301      	movs	r3, #1
 8000256:	e008      	b.n	800026a <atc_lock+0x62>
  while (HAL_GetTick() - start < wait_ms)
 8000258:	f001 ff94 	bl	8002184 <HAL_GetTick>
 800025c:	4602      	mov	r2, r0
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	1ad3      	subs	r3, r2, r3
 8000262:	683a      	ldr	r2, [r7, #0]
 8000264:	429a      	cmp	r2, r3
 8000266:	d8e6      	bhi.n	8000236 <atc_lock+0x2e>
    }
  }
  return false;
 8000268:	2300      	movs	r3, #0
}
 800026a:	4618      	mov	r0, r3
 800026c:	3710      	adds	r7, #16
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}

08000272 <atc_unlock>:
//####################################################################################################
void atc_unlock(atc_t *atc)
{
 8000272:	b480      	push	{r7}
 8000274:	b083      	sub	sp, #12
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
  atc->lock = false;
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2200      	movs	r2, #0
 800027e:	f883 2451 	strb.w	r2, [r3, #1105]	; 0x451
}
 8000282:	bf00      	nop
 8000284:	370c      	adds	r7, #12
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr

0800028c <atc_transmit>:
//####################################################################################################
void atc_transmit(atc_t *atc, uint8_t *data, uint16_t len)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b086      	sub	sp, #24
 8000290:	af00      	add	r7, sp, #0
 8000292:	60f8      	str	r0, [r7, #12]
 8000294:	60b9      	str	r1, [r7, #8]
 8000296:	4613      	mov	r3, r2
 8000298:	80fb      	strh	r3, [r7, #6]
  for (uint16_t i = 0; i < len; i++)
 800029a:	2300      	movs	r3, #0
 800029c:	82fb      	strh	r3, [r7, #22]
 800029e:	e018      	b.n	80002d2 <atc_transmit+0x46>
  {
    while (!LL_USART_IsActiveFlag_TXE(atc->usart))
      atc_delay(1);
 80002a0:	2001      	movs	r0, #1
 80002a2:	f001 ff79 	bl	8002198 <HAL_Delay>
    while (!LL_USART_IsActiveFlag_TXE(atc->usart))
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
 80002ac:	4618      	mov	r0, r3
 80002ae:	f7ff ff71 	bl	8000194 <LL_USART_IsActiveFlag_TXE>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d0f3      	beq.n	80002a0 <atc_transmit+0x14>
    LL_USART_TransmitData8(atc->usart, data[i]);
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	f8d3 0454 	ldr.w	r0, [r3, #1108]	; 0x454
 80002be:	8afb      	ldrh	r3, [r7, #22]
 80002c0:	68ba      	ldr	r2, [r7, #8]
 80002c2:	4413      	add	r3, r2
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	4619      	mov	r1, r3
 80002c8:	f7ff ff76 	bl	80001b8 <LL_USART_TransmitData8>
  for (uint16_t i = 0; i < len; i++)
 80002cc:	8afb      	ldrh	r3, [r7, #22]
 80002ce:	3301      	adds	r3, #1
 80002d0:	82fb      	strh	r3, [r7, #22]
 80002d2:	8afa      	ldrh	r2, [r7, #22]
 80002d4:	88fb      	ldrh	r3, [r7, #6]
 80002d6:	429a      	cmp	r2, r3
 80002d8:	d3e5      	bcc.n	80002a6 <atc_transmit+0x1a>
  }
  while (!LL_USART_IsActiveFlag_TC(atc->usart))
 80002da:	e002      	b.n	80002e2 <atc_transmit+0x56>
    atc_delay(1);
 80002dc:	2001      	movs	r0, #1
 80002de:	f001 ff5b 	bl	8002198 <HAL_Delay>
  while (!LL_USART_IsActiveFlag_TC(atc->usart))
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
 80002e8:	4618      	mov	r0, r3
 80002ea:	f7ff ff41 	bl	8000170 <LL_USART_IsActiveFlag_TC>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d0f3      	beq.n	80002dc <atc_transmit+0x50>
}
 80002f4:	bf00      	nop
 80002f6:	bf00      	nop
 80002f8:	3718      	adds	r7, #24
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}

080002fe <atc_search>:
//  if (LL_USART_IsActiveFlag_NE(atc->usart))
//    LL_USART_ClearFlag_NE(atc->usart);
}
//####################################################################################################
void atc_search(atc_t *atc)
{
 80002fe:	b580      	push	{r7, lr}
 8000300:	b084      	sub	sp, #16
 8000302:	af00      	add	r7, sp, #0
 8000304:	6078      	str	r0, [r7, #4]
  for (uint8_t search = 0; search < _ATC_SEARCH_MAX; search++)
 8000306:	2300      	movs	r3, #0
 8000308:	73fb      	strb	r3, [r7, #15]
 800030a:	e025      	b.n	8000358 <atc_search+0x5a>
  {
    if (atc->search[search] == NULL)
 800030c:	7bfb      	ldrb	r3, [r7, #15]
 800030e:	687a      	ldr	r2, [r7, #4]
 8000310:	f503 7381 	add.w	r3, r3, #258	; 0x102
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	4413      	add	r3, r2
 8000318:	685b      	ldr	r3, [r3, #4]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d020      	beq.n	8000360 <atc_search+0x62>
      break;
    char *str = strstr((char*) atc->rxBuffer, atc->search[search]);
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	1c58      	adds	r0, r3, #1
 8000322:	7bfb      	ldrb	r3, [r7, #15]
 8000324:	687a      	ldr	r2, [r7, #4]
 8000326:	f503 7381 	add.w	r3, r3, #258	; 0x102
 800032a:	009b      	lsls	r3, r3, #2
 800032c:	4413      	add	r3, r2
 800032e:	685b      	ldr	r3, [r3, #4]
 8000330:	4619      	mov	r1, r3
 8000332:	f004 fd63 	bl	8004dfc <strstr>
 8000336:	60b8      	str	r0, [r7, #8]
    if (str != NULL)
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d009      	beq.n	8000352 <atc_search+0x54>
    {
      if (atc->found != NULL)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	f8d3 3458 	ldr.w	r3, [r3, #1112]	; 0x458
 8000344:	2b00      	cmp	r3, #0
 8000346:	d004      	beq.n	8000352 <atc_search+0x54>
        atc->found(str);
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	f8d3 3458 	ldr.w	r3, [r3, #1112]	; 0x458
 800034e:	68b8      	ldr	r0, [r7, #8]
 8000350:	4798      	blx	r3
  for (uint8_t search = 0; search < _ATC_SEARCH_MAX; search++)
 8000352:	7bfb      	ldrb	r3, [r7, #15]
 8000354:	3301      	adds	r3, #1
 8000356:	73fb      	strb	r3, [r7, #15]
 8000358:	7bfb      	ldrb	r3, [r7, #15]
 800035a:	2b09      	cmp	r3, #9
 800035c:	d9d6      	bls.n	800030c <atc_search+0xe>
    }
  }
}
 800035e:	e000      	b.n	8000362 <atc_search+0x64>
      break;
 8000360:	bf00      	nop
}
 8000362:	bf00      	nop
 8000364:	3710      	adds	r7, #16
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}

0800036a <atc_searchAnswer>:
//####################################################################################################
char* atc_searchAnswer(atc_t *atc, uint8_t items, uint8_t *foundIndex)
{
 800036a:	b580      	push	{r7, lr}
 800036c:	b086      	sub	sp, #24
 800036e:	af00      	add	r7, sp, #0
 8000370:	60f8      	str	r0, [r7, #12]
 8000372:	460b      	mov	r3, r1
 8000374:	607a      	str	r2, [r7, #4]
 8000376:	72fb      	strb	r3, [r7, #11]
  *foundIndex = 0;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	2200      	movs	r2, #0
 800037c:	701a      	strb	r2, [r3, #0]
  if (items >= _ATC_SEARCH_CMD_MAX)
 800037e:	7afb      	ldrb	r3, [r7, #11]
 8000380:	2b04      	cmp	r3, #4
 8000382:	d901      	bls.n	8000388 <atc_searchAnswer+0x1e>
    items = _ATC_SEARCH_CMD_MAX;
 8000384:	2305      	movs	r3, #5
 8000386:	72fb      	strb	r3, [r7, #11]
  for (uint8_t search = 0; search < items; search++)
 8000388:	2300      	movs	r3, #0
 800038a:	75fb      	strb	r3, [r7, #23]
 800038c:	e022      	b.n	80003d4 <atc_searchAnswer+0x6a>
  {
    if (atc->searchCmd[search] == NULL)
 800038e:	7dfb      	ldrb	r3, [r7, #23]
 8000390:	68fa      	ldr	r2, [r7, #12]
 8000392:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8000396:	009b      	lsls	r3, r3, #2
 8000398:	4413      	add	r3, r2
 800039a:	685b      	ldr	r3, [r3, #4]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d01e      	beq.n	80003de <atc_searchAnswer+0x74>
      break;
    char *str = strstr((char*) atc->rxBuffer, atc->searchCmd[search]);
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	1c58      	adds	r0, r3, #1
 80003a4:	7dfb      	ldrb	r3, [r7, #23]
 80003a6:	68fa      	ldr	r2, [r7, #12]
 80003a8:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80003ac:	009b      	lsls	r3, r3, #2
 80003ae:	4413      	add	r3, r2
 80003b0:	685b      	ldr	r3, [r3, #4]
 80003b2:	4619      	mov	r1, r3
 80003b4:	f004 fd22 	bl	8004dfc <strstr>
 80003b8:	6138      	str	r0, [r7, #16]
    if (str != NULL)
 80003ba:	693b      	ldr	r3, [r7, #16]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d006      	beq.n	80003ce <atc_searchAnswer+0x64>
    {
      *foundIndex = search + 1;
 80003c0:	7dfb      	ldrb	r3, [r7, #23]
 80003c2:	3301      	adds	r3, #1
 80003c4:	b2da      	uxtb	r2, r3
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	701a      	strb	r2, [r3, #0]
      return str;
 80003ca:	693b      	ldr	r3, [r7, #16]
 80003cc:	e009      	b.n	80003e2 <atc_searchAnswer+0x78>
  for (uint8_t search = 0; search < items; search++)
 80003ce:	7dfb      	ldrb	r3, [r7, #23]
 80003d0:	3301      	adds	r3, #1
 80003d2:	75fb      	strb	r3, [r7, #23]
 80003d4:	7dfa      	ldrb	r2, [r7, #23]
 80003d6:	7afb      	ldrb	r3, [r7, #11]
 80003d8:	429a      	cmp	r2, r3
 80003da:	d3d8      	bcc.n	800038e <atc_searchAnswer+0x24>
 80003dc:	e000      	b.n	80003e0 <atc_searchAnswer+0x76>
      break;
 80003de:	bf00      	nop
    }
  }
  return NULL;
 80003e0:	2300      	movs	r3, #0
}
 80003e2:	4618      	mov	r0, r3
 80003e4:	3718      	adds	r7, #24
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}

080003ea <atc_empty>:
//####################################################################################################
void atc_empty(atc_t *atc)
{
 80003ea:	b580      	push	{r7, lr}
 80003ec:	b082      	sub	sp, #8
 80003ee:	af00      	add	r7, sp, #0
 80003f0:	6078      	str	r0, [r7, #4]
  memset(atc->rxBuffer, 0, _ATC_RXSIZE);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	3301      	adds	r3, #1
 80003f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003fa:	2100      	movs	r1, #0
 80003fc:	4618      	mov	r0, r3
 80003fe:	f004 fb87 	bl	8004b10 <memset>
  atc->rxIndex = 0;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	2200      	movs	r2, #0
 8000406:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
}
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <atc_available>:
//####################################################################################################
bool atc_available(atc_t *atc)
{
 8000412:	b580      	push	{r7, lr}
 8000414:	b082      	sub	sp, #8
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
  if ((atc->rxIndex > 0) && (HAL_GetTick() - atc->rxTime) > _ATC_RXTIMEOUT_MS)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8000420:	2b00      	cmp	r3, #0
 8000422:	d00a      	beq.n	800043a <atc_available+0x28>
 8000424:	f001 feae 	bl	8002184 <HAL_GetTick>
 8000428:	4602      	mov	r2, r0
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8000430:	1ad3      	subs	r3, r2, r3
 8000432:	2b32      	cmp	r3, #50	; 0x32
 8000434:	d901      	bls.n	800043a <atc_available+0x28>
    return true;
 8000436:	2301      	movs	r3, #1
 8000438:	e000      	b.n	800043c <atc_available+0x2a>
  return false;
 800043a:	2300      	movs	r3, #0
}
 800043c:	4618      	mov	r0, r3
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}

08000444 <atc_command>:
    return false;
}
//####################################################################################################
int8_t atc_command(atc_t *atc, const char *command, uint32_t timeout_ms, char *answer, uint16_t answer_size,
    int items, ...)
{
 8000444:	b590      	push	{r4, r7, lr}
 8000446:	b08b      	sub	sp, #44	; 0x2c
 8000448:	af00      	add	r7, sp, #0
 800044a:	60f8      	str	r0, [r7, #12]
 800044c:	60b9      	str	r1, [r7, #8]
 800044e:	607a      	str	r2, [r7, #4]
 8000450:	603b      	str	r3, [r7, #0]
  if (atc->inited == false)
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	f083 0301 	eor.w	r3, r3, #1
 800045a:	b2db      	uxtb	r3, r3
 800045c:	2b00      	cmp	r3, #0
 800045e:	d002      	beq.n	8000466 <atc_command+0x22>
    return -1;
 8000460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000464:	e0c5      	b.n	80005f2 <atc_command+0x1ae>
  if (atc_lock(atc, timeout_ms) == false)
 8000466:	6879      	ldr	r1, [r7, #4]
 8000468:	68f8      	ldr	r0, [r7, #12]
 800046a:	f7ff fecd 	bl	8000208 <atc_lock>
 800046e:	4603      	mov	r3, r0
 8000470:	f083 0301 	eor.w	r3, r3, #1
 8000474:	b2db      	uxtb	r3, r3
 8000476:	2b00      	cmp	r3, #0
 8000478:	d002      	beq.n	8000480 <atc_command+0x3c>
    return -1;
 800047a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800047e:	e0b8      	b.n	80005f2 <atc_command+0x1ae>
  if (answer != NULL)
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d005      	beq.n	8000492 <atc_command+0x4e>
    memset(answer, 0, answer_size);
 8000486:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000488:	461a      	mov	r2, r3
 800048a:	2100      	movs	r1, #0
 800048c:	6838      	ldr	r0, [r7, #0]
 800048e:	f004 fb3f 	bl	8004b10 <memset>
  uint8_t foundIndex = 0;
 8000492:	2300      	movs	r3, #0
 8000494:	75fb      	strb	r3, [r7, #23]
  va_list tag;
  va_start(tag, items);
 8000496:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800049a:	613b      	str	r3, [r7, #16]
  for (uint8_t i = 0; i < items; i++)
 800049c:	2300      	movs	r3, #0
 800049e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80004a2:	e042      	b.n	800052a <atc_command+0xe6>
  {
    char *str = va_arg(tag, char*);
 80004a4:	693b      	ldr	r3, [r7, #16]
 80004a6:	1d1a      	adds	r2, r3, #4
 80004a8:	613a      	str	r2, [r7, #16]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	623b      	str	r3, [r7, #32]
    atc->searchCmd[i] = (char*) atc_alloc(strlen(str) + 1);
 80004ae:	6a38      	ldr	r0, [r7, #32]
 80004b0:	f7ff fe56 	bl	8000160 <strlen>
 80004b4:	4603      	mov	r3, r0
 80004b6:	3301      	adds	r3, #1
 80004b8:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 80004bc:	4618      	mov	r0, r3
 80004be:	f7ff fe89 	bl	80001d4 <atc_alloc>
 80004c2:	4601      	mov	r1, r0
 80004c4:	68fa      	ldr	r2, [r7, #12]
 80004c6:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 80004ca:	009b      	lsls	r3, r3, #2
 80004cc:	4413      	add	r3, r2
 80004ce:	6059      	str	r1, [r3, #4]
    if (atc->searchCmd[i] != NULL)
 80004d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80004d4:	68fa      	ldr	r2, [r7, #12]
 80004d6:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	4413      	add	r3, r2
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d01a      	beq.n	800051a <atc_command+0xd6>
    {
      strcpy(atc->searchCmd[i], str);
 80004e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80004e8:	68fa      	ldr	r2, [r7, #12]
 80004ea:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	4413      	add	r3, r2
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	6a39      	ldr	r1, [r7, #32]
 80004f6:	4618      	mov	r0, r3
 80004f8:	f004 fc65 	bl	8004dc6 <strcpy>
      atc->searchCmd[i][strlen(str)] = 0;
 80004fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000500:	68fa      	ldr	r2, [r7, #12]
 8000502:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8000506:	009b      	lsls	r3, r3, #2
 8000508:	4413      	add	r3, r2
 800050a:	685c      	ldr	r4, [r3, #4]
 800050c:	6a38      	ldr	r0, [r7, #32]
 800050e:	f7ff fe27 	bl	8000160 <strlen>
 8000512:	4603      	mov	r3, r0
 8000514:	4423      	add	r3, r4
 8000516:	2200      	movs	r2, #0
 8000518:	701a      	strb	r2, [r3, #0]
    }
    if (items >= _ATC_SEARCH_CMD_MAX)
 800051a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800051c:	2b04      	cmp	r3, #4
 800051e:	dc0a      	bgt.n	8000536 <atc_command+0xf2>
  for (uint8_t i = 0; i < items; i++)
 8000520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000524:	3301      	adds	r3, #1
 8000526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800052a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800052e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000530:	429a      	cmp	r2, r3
 8000532:	dcb7      	bgt.n	80004a4 <atc_command+0x60>
 8000534:	e000      	b.n	8000538 <atc_command+0xf4>
      break;
 8000536:	bf00      	nop
  }
  va_end(tag);
  atc_transmit(atc, (uint8_t*) command, strlen(command));
 8000538:	68b8      	ldr	r0, [r7, #8]
 800053a:	f7ff fe11 	bl	8000160 <strlen>
 800053e:	4603      	mov	r3, r0
 8000540:	b29b      	uxth	r3, r3
 8000542:	461a      	mov	r2, r3
 8000544:	68b9      	ldr	r1, [r7, #8]
 8000546:	68f8      	ldr	r0, [r7, #12]
 8000548:	f7ff fea0 	bl	800028c <atc_transmit>
  uint32_t start = HAL_GetTick();
 800054c:	f001 fe1a 	bl	8002184 <HAL_GetTick>
 8000550:	61f8      	str	r0, [r7, #28]
  while (HAL_GetTick() - start < timeout_ms)
 8000552:	e026      	b.n	80005a2 <atc_command+0x15e>
  {
    atc_delay(1);
 8000554:	2001      	movs	r0, #1
 8000556:	f001 fe1f 	bl	8002198 <HAL_Delay>
    if (atc_available(atc))
 800055a:	68f8      	ldr	r0, [r7, #12]
 800055c:	f7ff ff59 	bl	8000412 <atc_available>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d01d      	beq.n	80005a2 <atc_command+0x15e>
    {
      atc_printf("[%s] %s", atc->name, (char* )atc->rxBuffer);
      atc_search(atc);
 8000566:	68f8      	ldr	r0, [r7, #12]
 8000568:	f7ff fec9 	bl	80002fe <atc_search>
      char *found = atc_searchAnswer(atc, items, &foundIndex);
 800056c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800056e:	b2db      	uxtb	r3, r3
 8000570:	f107 0217 	add.w	r2, r7, #23
 8000574:	4619      	mov	r1, r3
 8000576:	68f8      	ldr	r0, [r7, #12]
 8000578:	f7ff fef7 	bl	800036a <atc_searchAnswer>
 800057c:	61b8      	str	r0, [r7, #24]
      if (found != NULL && answer != NULL)
 800057e:	69bb      	ldr	r3, [r7, #24]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d008      	beq.n	8000596 <atc_command+0x152>
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d005      	beq.n	8000596 <atc_command+0x152>
        strncpy(answer, found, answer_size);
 800058a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800058c:	461a      	mov	r2, r3
 800058e:	69b9      	ldr	r1, [r7, #24]
 8000590:	6838      	ldr	r0, [r7, #0]
 8000592:	f004 fc20 	bl	8004dd6 <strncpy>
      atc_empty(atc);
 8000596:	68f8      	ldr	r0, [r7, #12]
 8000598:	f7ff ff27 	bl	80003ea <atc_empty>
      if (found != NULL)
 800059c:	69bb      	ldr	r3, [r7, #24]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d108      	bne.n	80005b4 <atc_command+0x170>
  while (HAL_GetTick() - start < timeout_ms)
 80005a2:	f001 fdef 	bl	8002184 <HAL_GetTick>
 80005a6:	4602      	mov	r2, r0
 80005a8:	69fb      	ldr	r3, [r7, #28]
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d8d0      	bhi.n	8000554 <atc_command+0x110>
 80005b2:	e000      	b.n	80005b6 <atc_command+0x172>
        break;
 80005b4:	bf00      	nop
    }
  }
  for (uint8_t i = 0; i < items; i++)
 80005b6:	2300      	movs	r3, #0
 80005b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80005bc:	e00f      	b.n	80005de <atc_command+0x19a>
    atc_free(atc->searchCmd[i]);
 80005be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80005c2:	68fa      	ldr	r2, [r7, #12]
 80005c4:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	4413      	add	r3, r2
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff fe0c 	bl	80001ec <atc_free>
  for (uint8_t i = 0; i < items; i++)
 80005d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80005d8:	3301      	adds	r3, #1
 80005da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80005de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80005e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80005e4:	429a      	cmp	r2, r3
 80005e6:	dcea      	bgt.n	80005be <atc_command+0x17a>
  atc_unlock(atc);
 80005e8:	68f8      	ldr	r0, [r7, #12]
 80005ea:	f7ff fe42 	bl	8000272 <atc_unlock>
  return foundIndex;
 80005ee:	7dfb      	ldrb	r3, [r7, #23]
 80005f0:	b25b      	sxtb	r3, r3
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	372c      	adds	r7, #44	; 0x2c
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd90      	pop	{r4, r7, pc}

080005fa <atc_loop>:
//####################################################################################################
void atc_loop(atc_t *atc)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b082      	sub	sp, #8
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
  if (atc->inited == false)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	f083 0301 	eor.w	r3, r3, #1
 800060a:	b2db      	uxtb	r3, r3
 800060c:	2b00      	cmp	r3, #0
 800060e:	d128      	bne.n	8000662 <atc_loop+0x68>
#if (_ATC_RTOS > 0)
    atc_delay(1);
#endif
    return;
  }
  if (HAL_GetTick() - atc->loopTime < _ATC_RXTIMEOUT_MS)
 8000610:	f001 fdb8 	bl	8002184 <HAL_GetTick>
 8000614:	4602      	mov	r2, r0
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800061c:	1ad3      	subs	r3, r2, r3
 800061e:	2b31      	cmp	r3, #49	; 0x31
 8000620:	d921      	bls.n	8000666 <atc_loop+0x6c>
#if (_ATC_RTOS > 0)
    atc_delay(1);
#endif
    return;
  }
  atc->loopTime = HAL_GetTick();
 8000622:	f001 fdaf 	bl	8002184 <HAL_GetTick>
 8000626:	4602      	mov	r2, r0
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  if (atc_lock(atc, 10) == false)
 800062e:	210a      	movs	r1, #10
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f7ff fde9 	bl	8000208 <atc_lock>
 8000636:	4603      	mov	r3, r0
 8000638:	f083 0301 	eor.w	r3, r3, #1
 800063c:	b2db      	uxtb	r3, r3
 800063e:	2b00      	cmp	r3, #0
 8000640:	d113      	bne.n	800066a <atc_loop+0x70>
    return;
  if (atc_available(atc))
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f7ff fee5 	bl	8000412 <atc_available>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d005      	beq.n	800065a <atc_loop+0x60>
  {
    atc_printf("[%s] %s", atc->name, (char* )atc->rxBuffer);
    atc_search(atc);
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f7ff fe55 	bl	80002fe <atc_search>
    atc_empty(atc);
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f7ff fec8 	bl	80003ea <atc_empty>
  }
  atc_unlock(atc);
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f7ff fe09 	bl	8000272 <atc_unlock>
 8000660:	e004      	b.n	800066c <atc_loop+0x72>
    return;
 8000662:	bf00      	nop
 8000664:	e002      	b.n	800066c <atc_loop+0x72>
    return;
 8000666:	bf00      	nop
 8000668:	e000      	b.n	800066c <atc_loop+0x72>
    return;
 800066a:	bf00      	nop
}
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <gsm_printf>:
extern UART_HandleTypeDef huart3;	// uart3


//####################UART PRINTF############
void gsm_printf(const char *data, ...)
{
 8000674:	b40f      	push	{r0, r1, r2, r3}
 8000676:	b580      	push	{r7, lr}
 8000678:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&huart3, data, strlen(data));
 800067a:	68b8      	ldr	r0, [r7, #8]
 800067c:	f7ff fd70 	bl	8000160 <strlen>
 8000680:	4603      	mov	r3, r0
 8000682:	b29b      	uxth	r3, r3
 8000684:	461a      	mov	r2, r3
 8000686:	68b9      	ldr	r1, [r7, #8]
 8000688:	4804      	ldr	r0, [pc, #16]	; (800069c <gsm_printf+0x28>)
 800068a:	f003 feab 	bl	80043e4 <HAL_UART_Transmit_IT>
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000696:	b004      	add	sp, #16
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	20000a28 	.word	0x20000a28

080006a0 <gsm_init_commands>:
  str = strstr(found_str, "");
#endif
}
//###############################################################################################################
void gsm_init_commands(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af04      	add	r7, sp, #16
  gsm_command("AT&F0\r\n", 5000, NULL, 0, 1, "\r\nOK\r\n");
 80006a6:	4b35      	ldr	r3, [pc, #212]	; (800077c <gsm_init_commands+0xdc>)
 80006a8:	9302      	str	r3, [sp, #8]
 80006aa:	2301      	movs	r3, #1
 80006ac:	9301      	str	r3, [sp, #4]
 80006ae:	2300      	movs	r3, #0
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	2300      	movs	r3, #0
 80006b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80006b8:	4931      	ldr	r1, [pc, #196]	; (8000780 <gsm_init_commands+0xe0>)
 80006ba:	4832      	ldr	r0, [pc, #200]	; (8000784 <gsm_init_commands+0xe4>)
 80006bc:	f7ff fec2 	bl	8000444 <atc_command>
  gsm_command("ATE1\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n");
 80006c0:	4b2e      	ldr	r3, [pc, #184]	; (800077c <gsm_init_commands+0xdc>)
 80006c2:	9302      	str	r3, [sp, #8]
 80006c4:	2301      	movs	r3, #1
 80006c6:	9301      	str	r3, [sp, #4]
 80006c8:	2300      	movs	r3, #0
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	2300      	movs	r3, #0
 80006ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006d2:	492d      	ldr	r1, [pc, #180]	; (8000788 <gsm_init_commands+0xe8>)
 80006d4:	482b      	ldr	r0, [pc, #172]	; (8000784 <gsm_init_commands+0xe4>)
 80006d6:	f7ff feb5 	bl	8000444 <atc_command>
  gsm_command("AT+CREG=1\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n");
 80006da:	4b28      	ldr	r3, [pc, #160]	; (800077c <gsm_init_commands+0xdc>)
 80006dc:	9302      	str	r3, [sp, #8]
 80006de:	2301      	movs	r3, #1
 80006e0:	9301      	str	r3, [sp, #4]
 80006e2:	2300      	movs	r3, #0
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	2300      	movs	r3, #0
 80006e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006ec:	4927      	ldr	r1, [pc, #156]	; (800078c <gsm_init_commands+0xec>)
 80006ee:	4825      	ldr	r0, [pc, #148]	; (8000784 <gsm_init_commands+0xe4>)
 80006f0:	f7ff fea8 	bl	8000444 <atc_command>
  gsm_command("AT+FSHEX=0\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n");
 80006f4:	4b21      	ldr	r3, [pc, #132]	; (800077c <gsm_init_commands+0xdc>)
 80006f6:	9302      	str	r3, [sp, #8]
 80006f8:	2301      	movs	r3, #1
 80006fa:	9301      	str	r3, [sp, #4]
 80006fc:	2300      	movs	r3, #0
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2300      	movs	r3, #0
 8000702:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000706:	4922      	ldr	r1, [pc, #136]	; (8000790 <gsm_init_commands+0xf0>)
 8000708:	481e      	ldr	r0, [pc, #120]	; (8000784 <gsm_init_commands+0xe4>)
 800070a:	f7ff fe9b 	bl	8000444 <atc_command>
  gsm_command("AT+COLP=1\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n");
  gsm_command("AT+CLIP=1\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n");
  gsm_command("AT+DDET=1\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n");
#endif
#if (_GSM_MSG == 1)
  gsm_msg_textMode(true, false);
 800070e:	2100      	movs	r1, #0
 8000710:	2001      	movs	r0, #1
 8000712:	f000 fdeb 	bl	80012ec <gsm_msg_textMode>
  gsm_msg_selectStorage(gsm_msg_store_module);
 8000716:	2002      	movs	r0, #2
 8000718:	f000 fed8 	bl	80014cc <gsm_msg_selectStorage>
  gsm_msg_selectCharacterSet(gsm_msg_chSet_ira);
 800071c:	2003      	movs	r0, #3
 800071e:	f000 ff65 	bl	80015ec <gsm_msg_selectCharacterSet>
#endif
#if (_GSM_GPRS == 1)
  gsm_command("AT+CIPSHUT\r\n", 5000, NULL, 0, 2, "\r\nSHUT OK\r\n", "\r\nERROR\r\n");
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <gsm_init_commands+0xf4>)
 8000724:	9303      	str	r3, [sp, #12]
 8000726:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <gsm_init_commands+0xf8>)
 8000728:	9302      	str	r3, [sp, #8]
 800072a:	2302      	movs	r3, #2
 800072c:	9301      	str	r3, [sp, #4]
 800072e:	2300      	movs	r3, #0
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	2300      	movs	r3, #0
 8000734:	f241 3288 	movw	r2, #5000	; 0x1388
 8000738:	4918      	ldr	r1, [pc, #96]	; (800079c <gsm_init_commands+0xfc>)
 800073a:	4812      	ldr	r0, [pc, #72]	; (8000784 <gsm_init_commands+0xe4>)
 800073c:	f7ff fe82 	bl	8000444 <atc_command>
  gsm_command("AT+CIPHEAD=0\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n");
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <gsm_init_commands+0xdc>)
 8000742:	9302      	str	r3, [sp, #8]
 8000744:	2301      	movs	r3, #1
 8000746:	9301      	str	r3, [sp, #4]
 8000748:	2300      	movs	r3, #0
 800074a:	9300      	str	r3, [sp, #0]
 800074c:	2300      	movs	r3, #0
 800074e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000752:	4913      	ldr	r1, [pc, #76]	; (80007a0 <gsm_init_commands+0x100>)
 8000754:	480b      	ldr	r0, [pc, #44]	; (8000784 <gsm_init_commands+0xe4>)
 8000756:	f7ff fe75 	bl	8000444 <atc_command>
  gsm_command("AT+CIPRXGET=1\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n");
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <gsm_init_commands+0xdc>)
 800075c:	9302      	str	r3, [sp, #8]
 800075e:	2301      	movs	r3, #1
 8000760:	9301      	str	r3, [sp, #4]
 8000762:	2300      	movs	r3, #0
 8000764:	9300      	str	r3, [sp, #0]
 8000766:	2300      	movs	r3, #0
 8000768:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800076c:	490d      	ldr	r1, [pc, #52]	; (80007a4 <gsm_init_commands+0x104>)
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <gsm_init_commands+0xe4>)
 8000770:	f7ff fe68 	bl	8000444 <atc_command>
#endif
#if (_GSM_BLUETOOTH == 1)

#endif
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	0800698c 	.word	0x0800698c
 8000780:	08006984 	.word	0x08006984
 8000784:	200000bc 	.word	0x200000bc
 8000788:	08006994 	.word	0x08006994
 800078c:	0800699c 	.word	0x0800699c
 8000790:	080069a8 	.word	0x080069a8
 8000794:	080069c8 	.word	0x080069c8
 8000798:	080069d4 	.word	0x080069d4
 800079c:	080069b8 	.word	0x080069b8
 80007a0:	080069e0 	.word	0x080069e0
 80007a4:	080069f0 	.word	0x080069f0

080007a8 <gsm_lock>:
//###############################################################################################################
bool gsm_lock(uint32_t timeout_ms)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint32_t start = HAL_GetTick();
 80007b0:	f001 fce8 	bl	8002184 <HAL_GetTick>
 80007b4:	60f8      	str	r0, [r7, #12]
  while (HAL_GetTick() - start < timeout_ms)
 80007b6:	e00b      	b.n	80007d0 <gsm_lock+0x28>
  {
    if (gsm.lock == 0)
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <gsm_lock+0x44>)
 80007ba:	785b      	ldrb	r3, [r3, #1]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d104      	bne.n	80007ca <gsm_lock+0x22>
    {
      gsm.lock = 1;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <gsm_lock+0x44>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	705a      	strb	r2, [r3, #1]
      return true;
 80007c6:	2301      	movs	r3, #1
 80007c8:	e00b      	b.n	80007e2 <gsm_lock+0x3a>
    }
    gsm_delay(1);
 80007ca:	2001      	movs	r0, #1
 80007cc:	f001 fce4 	bl	8002198 <HAL_Delay>
  while (HAL_GetTick() - start < timeout_ms)
 80007d0:	f001 fcd8 	bl	8002184 <HAL_GetTick>
 80007d4:	4602      	mov	r2, r0
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d8eb      	bhi.n	80007b8 <gsm_lock+0x10>
  }
  return false;
 80007e0:	2300      	movs	r3, #0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200000b4 	.word	0x200000b4

080007f0 <gsm_unlock>:
//###############################################################################################################
void gsm_unlock()
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  gsm.lock = 0;
 80007f4:	4b03      	ldr	r3, [pc, #12]	; (8000804 <gsm_unlock+0x14>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	705a      	strb	r2, [r3, #1]
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	200000b4 	.word	0x200000b4

08000808 <gsm_loop>:
  gsm.inited = 1;
  return true;
}
//###############################################################################################################
void gsm_loop(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b09a      	sub	sp, #104	; 0x68
 800080c:	af04      	add	r7, sp, #16
  static uint32_t gsm_time_1s = 0;
  static uint32_t gsm_time_10s = 0;
  static uint32_t gsm_time_60s = 0;
  static uint8_t gsm_time_10s_check_power = 0;  
  atc_loop(&gsm.atc);
 800080e:	48a7      	ldr	r0, [pc, #668]	; (8000aac <gsm_loop+0x2a4>)
 8000810:	f7ff fef3 	bl	80005fa <atc_loop>
  char str1[64];
  char str2[16];
  //  +++ 1s timer  ######################
  if (HAL_GetTick() - gsm_time_1s > 1000)
 8000814:	f001 fcb6 	bl	8002184 <HAL_GetTick>
 8000818:	4602      	mov	r2, r0
 800081a:	4ba5      	ldr	r3, [pc, #660]	; (8000ab0 <gsm_loop+0x2a8>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	1ad3      	subs	r3, r2, r3
 8000820:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000824:	f240 8174 	bls.w	8000b10 <gsm_loop+0x308>
  {
    gsm_time_1s = HAL_GetTick();
 8000828:	f001 fcac 	bl	8002184 <HAL_GetTick>
 800082c:	4603      	mov	r3, r0
 800082e:	4aa0      	ldr	r2, [pc, #640]	; (8000ab0 <gsm_loop+0x2a8>)
 8000830:	6013      	str	r3, [r2, #0]
    
    gsm_time_10s_check_power++;
 8000832:	4ba0      	ldr	r3, [pc, #640]	; (8000ab4 <gsm_loop+0x2ac>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	3301      	adds	r3, #1
 8000838:	b2da      	uxtb	r2, r3
 800083a:	4b9e      	ldr	r3, [pc, #632]	; (8000ab4 <gsm_loop+0x2ac>)
 800083c:	701a      	strb	r2, [r3, #0]
    if ((gsm.status.turnOn == 1) && (gsm.lock == 0) && (gsm_time_10s_check_power == 10))
 800083e:	4b9e      	ldr	r3, [pc, #632]	; (8000ab8 <gsm_loop+0x2b0>)
 8000840:	791b      	ldrb	r3, [r3, #4]
 8000842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b00      	cmp	r3, #0
 800084a:	d038      	beq.n	80008be <gsm_loop+0xb6>
 800084c:	4b9a      	ldr	r3, [pc, #616]	; (8000ab8 <gsm_loop+0x2b0>)
 800084e:	785b      	ldrb	r3, [r3, #1]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d134      	bne.n	80008be <gsm_loop+0xb6>
 8000854:	4b97      	ldr	r3, [pc, #604]	; (8000ab4 <gsm_loop+0x2ac>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b0a      	cmp	r3, #10
 800085a:	d130      	bne.n	80008be <gsm_loop+0xb6>
    {
      gsm_time_10s_check_power = 0;
 800085c:	4b95      	ldr	r3, [pc, #596]	; (8000ab4 <gsm_loop+0x2ac>)
 800085e:	2200      	movs	r2, #0
 8000860:	701a      	strb	r2, [r3, #0]
      if (gsm_command("AT\r\n", 1000, NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n") != 1)
 8000862:	4b96      	ldr	r3, [pc, #600]	; (8000abc <gsm_loop+0x2b4>)
 8000864:	9303      	str	r3, [sp, #12]
 8000866:	4b96      	ldr	r3, [pc, #600]	; (8000ac0 <gsm_loop+0x2b8>)
 8000868:	9302      	str	r3, [sp, #8]
 800086a:	2302      	movs	r3, #2
 800086c:	9301      	str	r3, [sp, #4]
 800086e:	2300      	movs	r3, #0
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	2300      	movs	r3, #0
 8000874:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000878:	4992      	ldr	r1, [pc, #584]	; (8000ac4 <gsm_loop+0x2bc>)
 800087a:	488c      	ldr	r0, [pc, #560]	; (8000aac <gsm_loop+0x2a4>)
 800087c:	f7ff fde2 	bl	8000444 <atc_command>
 8000880:	4603      	mov	r3, r0
 8000882:	2b01      	cmp	r3, #1
 8000884:	d006      	beq.n	8000894 <gsm_loop+0x8c>
        gsm.error++;
 8000886:	4b8c      	ldr	r3, [pc, #560]	; (8000ab8 <gsm_loop+0x2b0>)
 8000888:	789b      	ldrb	r3, [r3, #2]
 800088a:	3301      	adds	r3, #1
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b8a      	ldr	r3, [pc, #552]	; (8000ab8 <gsm_loop+0x2b0>)
 8000890:	709a      	strb	r2, [r3, #2]
 8000892:	e002      	b.n	800089a <gsm_loop+0x92>
      else
        gsm.error = 0;
 8000894:	4b88      	ldr	r3, [pc, #544]	; (8000ab8 <gsm_loop+0x2b0>)
 8000896:	2200      	movs	r2, #0
 8000898:	709a      	strb	r2, [r3, #2]
      if (gsm.error >= 10)
 800089a:	4b87      	ldr	r3, [pc, #540]	; (8000ab8 <gsm_loop+0x2b0>)
 800089c:	789b      	ldrb	r3, [r3, #2]
 800089e:	2b09      	cmp	r3, #9
 80008a0:	d90d      	bls.n	80008be <gsm_loop+0xb6>
      {
        gsm.status.power = 0;
 80008a2:	4a85      	ldr	r2, [pc, #532]	; (8000ab8 <gsm_loop+0x2b0>)
 80008a4:	7913      	ldrb	r3, [r2, #4]
 80008a6:	f36f 0300 	bfc	r3, #0, #1
 80008aa:	7113      	strb	r3, [r2, #4]
        if (gsm_power(true))
 80008ac:	2001      	movs	r0, #1
 80008ae:	f000 fa2b 	bl	8000d08 <gsm_power>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d002      	beq.n	80008be <gsm_loop+0xb6>
          gsm.error = 0;          
 80008b8:	4b7f      	ldr	r3, [pc, #508]	; (8000ab8 <gsm_loop+0x2b0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	709a      	strb	r2, [r3, #2]
      }      
    }
    if ((gsm.status.turnOff == 1) && (gsm_time_10s_check_power == 10))
 80008be:	4b7e      	ldr	r3, [pc, #504]	; (8000ab8 <gsm_loop+0x2b0>)
 80008c0:	791b      	ldrb	r3, [r3, #4]
 80008c2:	f003 0320 	and.w	r3, r3, #32
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d01e      	beq.n	800090a <gsm_loop+0x102>
 80008cc:	4b79      	ldr	r3, [pc, #484]	; (8000ab4 <gsm_loop+0x2ac>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b0a      	cmp	r3, #10
 80008d2:	d11a      	bne.n	800090a <gsm_loop+0x102>
    {
      gsm_time_10s_check_power = 0;
 80008d4:	4b77      	ldr	r3, [pc, #476]	; (8000ab4 <gsm_loop+0x2ac>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	701a      	strb	r2, [r3, #0]
      gsm.error = 0;
 80008da:	4b77      	ldr	r3, [pc, #476]	; (8000ab8 <gsm_loop+0x2b0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	709a      	strb	r2, [r3, #2]
      if (gsm_command("AT\r\n", 1000, NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n") == 1)
 80008e0:	4b76      	ldr	r3, [pc, #472]	; (8000abc <gsm_loop+0x2b4>)
 80008e2:	9303      	str	r3, [sp, #12]
 80008e4:	4b76      	ldr	r3, [pc, #472]	; (8000ac0 <gsm_loop+0x2b8>)
 80008e6:	9302      	str	r3, [sp, #8]
 80008e8:	2302      	movs	r3, #2
 80008ea:	9301      	str	r3, [sp, #4]
 80008ec:	2300      	movs	r3, #0
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	2300      	movs	r3, #0
 80008f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008f6:	4973      	ldr	r1, [pc, #460]	; (8000ac4 <gsm_loop+0x2bc>)
 80008f8:	486c      	ldr	r0, [pc, #432]	; (8000aac <gsm_loop+0x2a4>)
 80008fa:	f7ff fda3 	bl	8000444 <atc_command>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b01      	cmp	r3, #1
 8000902:	d102      	bne.n	800090a <gsm_loop+0x102>
      {
        gsm_power(false);
 8000904:	2000      	movs	r0, #0
 8000906:	f000 f9ff 	bl	8000d08 <gsm_power>
      }
    }    
    
#if (_GSM_CALL == 1 || _GSM_MSG == 1 || _GSM_GPRS == 1)
    //  +++ simcard check
    if ((gsm.status.power == 1) && (gsm.status.simcardChecked == 0))
 800090a:	4b6b      	ldr	r3, [pc, #428]	; (8000ab8 <gsm_loop+0x2b0>)
 800090c:	791b      	ldrb	r3, [r3, #4]
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	b2db      	uxtb	r3, r3
 8000914:	2b00      	cmp	r3, #0
 8000916:	d053      	beq.n	80009c0 <gsm_loop+0x1b8>
 8000918:	4b67      	ldr	r3, [pc, #412]	; (8000ab8 <gsm_loop+0x2b0>)
 800091a:	791b      	ldrb	r3, [r3, #4]
 800091c:	f003 0310 	and.w	r3, r3, #16
 8000920:	b2db      	uxtb	r3, r3
 8000922:	2b00      	cmp	r3, #0
 8000924:	d14c      	bne.n	80009c0 <gsm_loop+0x1b8>
    {
      if (gsm_command("AT+CPIN?\r\n", 1000, str1, sizeof(str1), 2, "\r\n+CPIN:", "\r\nERROR\r\n") == 1)
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	4a64      	ldr	r2, [pc, #400]	; (8000abc <gsm_loop+0x2b4>)
 800092c:	9203      	str	r2, [sp, #12]
 800092e:	4a66      	ldr	r2, [pc, #408]	; (8000ac8 <gsm_loop+0x2c0>)
 8000930:	9202      	str	r2, [sp, #8]
 8000932:	2202      	movs	r2, #2
 8000934:	9201      	str	r2, [sp, #4]
 8000936:	2240      	movs	r2, #64	; 0x40
 8000938:	9200      	str	r2, [sp, #0]
 800093a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800093e:	4963      	ldr	r1, [pc, #396]	; (8000acc <gsm_loop+0x2c4>)
 8000940:	485a      	ldr	r0, [pc, #360]	; (8000aac <gsm_loop+0x2a4>)
 8000942:	f7ff fd7f 	bl	8000444 <atc_command>
 8000946:	4603      	mov	r3, r0
 8000948:	2b01      	cmp	r3, #1
 800094a:	d137      	bne.n	80009bc <gsm_loop+0x1b4>
      {
        if (sscanf(str1, "\r\n+CPIN: %[^\r\n]", str2) == 1)
 800094c:	1d3a      	adds	r2, r7, #4
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	495f      	ldr	r1, [pc, #380]	; (8000ad0 <gsm_loop+0x2c8>)
 8000954:	4618      	mov	r0, r3
 8000956:	f004 f9c7 	bl	8004ce8 <siscanf>
 800095a:	4603      	mov	r3, r0
 800095c:	2b01      	cmp	r3, #1
 800095e:	d12f      	bne.n	80009c0 <gsm_loop+0x1b8>
        {
          if (strcmp(str2, "READY") == 0)
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	495c      	ldr	r1, [pc, #368]	; (8000ad4 <gsm_loop+0x2cc>)
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff fbf1 	bl	800014c <strcmp>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d106      	bne.n	800097e <gsm_loop+0x176>
          {
            gsm_callback_simcardReady();
 8000970:	f000 fb86 	bl	8001080 <gsm_callback_simcardReady>
            gsm.status.simcardChecked = 1;
 8000974:	4a50      	ldr	r2, [pc, #320]	; (8000ab8 <gsm_loop+0x2b0>)
 8000976:	7913      	ldrb	r3, [r2, #4]
 8000978:	f043 0310 	orr.w	r3, r3, #16
 800097c:	7113      	strb	r3, [r2, #4]
          }
          if (strcmp(str2, "SIM PIN") == 0)
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	4955      	ldr	r1, [pc, #340]	; (8000ad8 <gsm_loop+0x2d0>)
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff fbe2 	bl	800014c <strcmp>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d106      	bne.n	800099c <gsm_loop+0x194>
          {
            gsm_callback_simcardPinRequest();
 800098e:	f000 fb81 	bl	8001094 <gsm_callback_simcardPinRequest>
            gsm.status.simcardChecked = 1;
 8000992:	4a49      	ldr	r2, [pc, #292]	; (8000ab8 <gsm_loop+0x2b0>)
 8000994:	7913      	ldrb	r3, [r2, #4]
 8000996:	f043 0310 	orr.w	r3, r3, #16
 800099a:	7113      	strb	r3, [r2, #4]
          }
          if (strcmp(str2, "SIM PUK") == 0)
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	494f      	ldr	r1, [pc, #316]	; (8000adc <gsm_loop+0x2d4>)
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fbd3 	bl	800014c <strcmp>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d109      	bne.n	80009c0 <gsm_loop+0x1b8>
          {
            gsm_callback_simcardPukRequest();
 80009ac:	f000 fb7c 	bl	80010a8 <gsm_callback_simcardPukRequest>
            gsm.status.simcardChecked = 1;
 80009b0:	4a41      	ldr	r2, [pc, #260]	; (8000ab8 <gsm_loop+0x2b0>)
 80009b2:	7913      	ldrb	r3, [r2, #4]
 80009b4:	f043 0310 	orr.w	r3, r3, #16
 80009b8:	7113      	strb	r3, [r2, #4]
 80009ba:	e001      	b.n	80009c0 <gsm_loop+0x1b8>
          }
        }
      }
      else
      {
        gsm_callback_simcardNotInserted();
 80009bc:	f000 fb7e 	bl	80010bc <gsm_callback_simcardNotInserted>
      }
    }
    //  --- simcard check

    //  +++ network check
    if ((gsm.status.power == 1) && (gsm.status.netChange == 1))
 80009c0:	4b3d      	ldr	r3, [pc, #244]	; (8000ab8 <gsm_loop+0x2b0>)
 80009c2:	791b      	ldrb	r3, [r3, #4]
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d021      	beq.n	8000a12 <gsm_loop+0x20a>
 80009ce:	4b3a      	ldr	r3, [pc, #232]	; (8000ab8 <gsm_loop+0x2b0>)
 80009d0:	791b      	ldrb	r3, [r3, #4]
 80009d2:	f003 0308 	and.w	r3, r3, #8
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d01a      	beq.n	8000a12 <gsm_loop+0x20a>
    {
      gsm.status.netChange = 0;
 80009dc:	4a36      	ldr	r2, [pc, #216]	; (8000ab8 <gsm_loop+0x2b0>)
 80009de:	7913      	ldrb	r3, [r2, #4]
 80009e0:	f36f 03c3 	bfc	r3, #3, #1
 80009e4:	7113      	strb	r3, [r2, #4]
      if (gsm.status.netReg == 1)
 80009e6:	4b34      	ldr	r3, [pc, #208]	; (8000ab8 <gsm_loop+0x2b0>)
 80009e8:	791b      	ldrb	r3, [r3, #4]
 80009ea:	f003 0304 	and.w	r3, r3, #4
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d007      	beq.n	8000a04 <gsm_loop+0x1fc>
      {
        gsm.status.registerd = 1;
 80009f4:	4a30      	ldr	r2, [pc, #192]	; (8000ab8 <gsm_loop+0x2b0>)
 80009f6:	7913      	ldrb	r3, [r2, #4]
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	7113      	strb	r3, [r2, #4]
        gsm_callback_networkRegister();
 80009fe:	f000 fb67 	bl	80010d0 <gsm_callback_networkRegister>
 8000a02:	e006      	b.n	8000a12 <gsm_loop+0x20a>
      }
      else
      {
        gsm.status.registerd = 0;
 8000a04:	4a2c      	ldr	r2, [pc, #176]	; (8000ab8 <gsm_loop+0x2b0>)
 8000a06:	7913      	ldrb	r3, [r2, #4]
 8000a08:	f36f 0341 	bfc	r3, #1, #1
 8000a0c:	7113      	strb	r3, [r2, #4]
        gsm_callback_networkUnregister();
 8000a0e:	f000 fb69 	bl	80010e4 <gsm_callback_networkUnregister>
#endif
    //  --- call check

    //  +++ msg check
#if (_GSM_MSG == 1)
    if (gsm.status.power == 1)
 8000a12:	4b29      	ldr	r3, [pc, #164]	; (8000ab8 <gsm_loop+0x2b0>)
 8000a14:	791b      	ldrb	r3, [r3, #4]
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d022      	beq.n	8000a66 <gsm_loop+0x25e>
    {
      if (gsm.msg.newMsg >= 0)
 8000a20:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <gsm_loop+0x2b0>)
 8000a22:	f9b3 3862 	ldrsh.w	r3, [r3, #2146]	; 0x862
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	db1d      	blt.n	8000a66 <gsm_loop+0x25e>
      {
        if (gsm_msg_read(gsm.msg.newMsg))
 8000a2a:	4b23      	ldr	r3, [pc, #140]	; (8000ab8 <gsm_loop+0x2b0>)
 8000a2c:	f9b3 3862 	ldrsh.w	r3, [r3, #2146]	; 0x862
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 fe7e 	bl	8001734 <gsm_msg_read>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d00e      	beq.n	8000a5c <gsm_loop+0x254>
        {
          gsm_msg_delete(gsm.msg.newMsg);
 8000a3e:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <gsm_loop+0x2b0>)
 8000a40:	f9b3 3862 	ldrsh.w	r3, [r3, #2146]	; 0x862
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 fcee 	bl	8001428 <gsm_msg_delete>
          gsm_callback_newMsg(gsm.msg.number, gsm.msg.time, (char*) gsm.buffer);
 8000a4c:	4a1a      	ldr	r2, [pc, #104]	; (8000ab8 <gsm_loop+0x2b0>)
 8000a4e:	4b24      	ldr	r3, [pc, #144]	; (8000ae0 <gsm_loop+0x2d8>)
 8000a50:	f602 025c 	addw	r2, r2, #2140	; 0x85c
 8000a54:	ca06      	ldmia	r2, {r1, r2}
 8000a56:	4823      	ldr	r0, [pc, #140]	; (8000ae4 <gsm_loop+0x2dc>)
 8000a58:	f000 fb4e 	bl	80010f8 <gsm_callback_newMsg>
        }
        gsm.msg.newMsg = -1;
 8000a5c:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <gsm_loop+0x2b0>)
 8000a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a62:	f8a3 2862 	strh.w	r2, [r3, #2146]	; 0x862
#endif
    //  --- msg check
    
    //  +++ network check
#if (_GSM_GPRS == 1)
    if (gsm.status.power == 1)
 8000a66:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <gsm_loop+0x2b0>)
 8000a68:	791b      	ldrb	r3, [r3, #4]
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d04d      	beq.n	8000b10 <gsm_loop+0x308>
    {
      if (gsm.gprs.mqttData == 1)
 8000a74:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <gsm_loop+0x2b0>)
 8000a76:	f893 3928 	ldrb.w	r3, [r3, #2344]	; 0x928
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d107      	bne.n	8000a8e <gsm_loop+0x286>
      {
        gsm.gprs.mqttData = 0;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <gsm_loop+0x2b0>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	f883 2928 	strb.w	r2, [r3, #2344]	; 0x928
        gsm_callback_mqttMessage(gsm.gprs.mqttTopic, gsm.gprs.mqttMessage);
 8000a86:	4918      	ldr	r1, [pc, #96]	; (8000ae8 <gsm_loop+0x2e0>)
 8000a88:	4818      	ldr	r0, [pc, #96]	; (8000aec <gsm_loop+0x2e4>)
 8000a8a:	f000 fb69 	bl	8001160 <gsm_callback_mqttMessage>
      }
      if ((gsm.gprs.mqttConnected == 1) && (gsm.gprs.mqttConnectedLast == 0))
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <gsm_loop+0x2b0>)
 8000a90:	f893 3929 	ldrb.w	r3, [r3, #2345]	; 0x929
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d12b      	bne.n	8000af0 <gsm_loop+0x2e8>
 8000a98:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <gsm_loop+0x2b0>)
 8000a9a:	f893 392a 	ldrb.w	r3, [r3, #2346]	; 0x92a
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d126      	bne.n	8000af0 <gsm_loop+0x2e8>
      {
        gsm.gprs.mqttConnectedLast = 1;      
 8000aa2:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <gsm_loop+0x2b0>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	f883 292a 	strb.w	r2, [r3, #2346]	; 0x92a
 8000aaa:	e031      	b.n	8000b10 <gsm_loop+0x308>
 8000aac:	200000bc 	.word	0x200000bc
 8000ab0:	20000090 	.word	0x20000090
 8000ab4:	20000094 	.word	0x20000094
 8000ab8:	200000b4 	.word	0x200000b4
 8000abc:	080069c8 	.word	0x080069c8
 8000ac0:	0800698c 	.word	0x0800698c
 8000ac4:	08006a4c 	.word	0x08006a4c
 8000ac8:	08006a60 	.word	0x08006a60
 8000acc:	08006a54 	.word	0x08006a54
 8000ad0:	08006a6c 	.word	0x08006a6c
 8000ad4:	08006a7c 	.word	0x08006a7c
 8000ad8:	08006a84 	.word	0x08006a84
 8000adc:	08006a8c 	.word	0x08006a8c
 8000ae0:	20000518 	.word	0x20000518
 8000ae4:	20000928 	.word	0x20000928
 8000ae8:	2000099c 	.word	0x2000099c
 8000aec:	2000095c 	.word	0x2000095c
      }
      else if ((gsm.gprs.mqttConnected == 0) && (gsm.gprs.mqttConnectedLast == 1))
 8000af0:	4b79      	ldr	r3, [pc, #484]	; (8000cd8 <gsm_loop+0x4d0>)
 8000af2:	f893 3929 	ldrb.w	r3, [r3, #2345]	; 0x929
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d10a      	bne.n	8000b10 <gsm_loop+0x308>
 8000afa:	4b77      	ldr	r3, [pc, #476]	; (8000cd8 <gsm_loop+0x4d0>)
 8000afc:	f893 392a 	ldrb.w	r3, [r3, #2346]	; 0x92a
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d105      	bne.n	8000b10 <gsm_loop+0x308>
      {
        gsm.gprs.mqttConnectedLast = 0;
 8000b04:	4b74      	ldr	r3, [pc, #464]	; (8000cd8 <gsm_loop+0x4d0>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	f883 292a 	strb.w	r2, [r3, #2346]	; 0x92a
        gsm_callback_mqttDisconnect();
 8000b0c:	f000 fb38 	bl	8001180 <gsm_callback_mqttDisconnect>
    //  --- network check
  }
  //  --- 1s timer  ######################

  //  +++ 10s timer ######################
  if ((HAL_GetTick() - gsm_time_10s > 10000) && (gsm.status.power == 1))
 8000b10:	f001 fb38 	bl	8002184 <HAL_GetTick>
 8000b14:	4602      	mov	r2, r0
 8000b16:	4b71      	ldr	r3, [pc, #452]	; (8000cdc <gsm_loop+0x4d4>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	1ad3      	subs	r3, r2, r3
 8000b1c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b20:	4293      	cmp	r3, r2
 8000b22:	f240 80b8 	bls.w	8000c96 <gsm_loop+0x48e>
 8000b26:	4b6c      	ldr	r3, [pc, #432]	; (8000cd8 <gsm_loop+0x4d0>)
 8000b28:	791b      	ldrb	r3, [r3, #4]
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	f000 80b0 	beq.w	8000c96 <gsm_loop+0x48e>
  {
    gsm_time_10s = HAL_GetTick();
 8000b36:	f001 fb25 	bl	8002184 <HAL_GetTick>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	4a67      	ldr	r2, [pc, #412]	; (8000cdc <gsm_loop+0x4d4>)
 8000b3e:	6013      	str	r3, [r2, #0]

#if (_GSM_CALL == 1 || _GSM_MSG == 1 || _GSM_GPRS == 1)
    //  +++ check network
    if ((gsm.status.power == 1) && (gsm.lock == 0))
 8000b40:	4b65      	ldr	r3, [pc, #404]	; (8000cd8 <gsm_loop+0x4d0>)
 8000b42:	791b      	ldrb	r3, [r3, #4]
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d017      	beq.n	8000b7e <gsm_loop+0x376>
 8000b4e:	4b62      	ldr	r3, [pc, #392]	; (8000cd8 <gsm_loop+0x4d0>)
 8000b50:	785b      	ldrb	r3, [r3, #1]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d113      	bne.n	8000b7e <gsm_loop+0x376>
    {
      gsm_getSignalQuality_0_to_100();
 8000b56:	f000 f9d1 	bl	8000efc <gsm_getSignalQuality_0_to_100>
      if (gsm.status.netReg == 0)
 8000b5a:	4b5f      	ldr	r3, [pc, #380]	; (8000cd8 <gsm_loop+0x4d0>)
 8000b5c:	791b      	ldrb	r3, [r3, #4]
 8000b5e:	f003 0304 	and.w	r3, r3, #4
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d10a      	bne.n	8000b7e <gsm_loop+0x376>
      {
        gsm_command("AT+CREG?\r\n", 1000, NULL, 0, 0);
 8000b68:	2300      	movs	r3, #0
 8000b6a:	9301      	str	r3, [sp, #4]
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	9300      	str	r3, [sp, #0]
 8000b70:	2300      	movs	r3, #0
 8000b72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b76:	495a      	ldr	r1, [pc, #360]	; (8000ce0 <gsm_loop+0x4d8>)
 8000b78:	485a      	ldr	r0, [pc, #360]	; (8000ce4 <gsm_loop+0x4dc>)
 8000b7a:	f7ff fc63 	bl	8000444 <atc_command>
    }
    //  --- check network

    //  +++ msg check
#if (_GSM_MSG == 1)
    if (gsm.lock == 0)
 8000b7e:	4b56      	ldr	r3, [pc, #344]	; (8000cd8 <gsm_loop+0x4d0>)
 8000b80:	785b      	ldrb	r3, [r3, #1]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d128      	bne.n	8000bd8 <gsm_loop+0x3d0>
    {
      if (gsm.msg.storageUsed > 0)
 8000b86:	4b54      	ldr	r3, [pc, #336]	; (8000cd8 <gsm_loop+0x4d0>)
 8000b88:	f8b3 385a 	ldrh.w	r3, [r3, #2138]	; 0x85a
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d023      	beq.n	8000bd8 <gsm_loop+0x3d0>
      {
        for (uint16_t i = 0; i < 150; i++)
 8000b90:	2300      	movs	r3, #0
 8000b92:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8000b96:	e019      	b.n	8000bcc <gsm_loop+0x3c4>
        {
          if (gsm_msg_read(i))
 8000b98:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f000 fdc9 	bl	8001734 <gsm_msg_read>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d00c      	beq.n	8000bc2 <gsm_loop+0x3ba>
          {
            gsm_msg_delete(i);
 8000ba8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 fc3b 	bl	8001428 <gsm_msg_delete>
            gsm_callback_newMsg(gsm.msg.number, gsm.msg.time, (char*) gsm.buffer);
 8000bb2:	4a49      	ldr	r2, [pc, #292]	; (8000cd8 <gsm_loop+0x4d0>)
 8000bb4:	4b4c      	ldr	r3, [pc, #304]	; (8000ce8 <gsm_loop+0x4e0>)
 8000bb6:	f602 025c 	addw	r2, r2, #2140	; 0x85c
 8000bba:	ca06      	ldmia	r2, {r1, r2}
 8000bbc:	484b      	ldr	r0, [pc, #300]	; (8000cec <gsm_loop+0x4e4>)
 8000bbe:	f000 fa9b 	bl	80010f8 <gsm_callback_newMsg>
        for (uint16_t i = 0; i < 150; i++)
 8000bc2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8000bcc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000bd0:	2b95      	cmp	r3, #149	; 0x95
 8000bd2:	d9e1      	bls.n	8000b98 <gsm_loop+0x390>
          }
        }
        gsm_msg_updateStorage();
 8000bd4:	f000 fade 	bl	8001194 <gsm_msg_updateStorage>
#endif
    //  --- msg check

    //  +++ gprs check
#if (_GSM_GPRS == 1)
    if ((gsm.status.power == 1) && (gsm.lock == 0))
 8000bd8:	4b3f      	ldr	r3, [pc, #252]	; (8000cd8 <gsm_loop+0x4d0>)
 8000bda:	791b      	ldrb	r3, [r3, #4]
 8000bdc:	f003 0301 	and.w	r3, r3, #1
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d057      	beq.n	8000c96 <gsm_loop+0x48e>
 8000be6:	4b3c      	ldr	r3, [pc, #240]	; (8000cd8 <gsm_loop+0x4d0>)
 8000be8:	785b      	ldrb	r3, [r3, #1]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d153      	bne.n	8000c96 <gsm_loop+0x48e>
    {
      if (gsm.gprs.connected)
 8000bee:	4b3a      	ldr	r3, [pc, #232]	; (8000cd8 <gsm_loop+0x4d0>)
 8000bf0:	f893 3884 	ldrb.w	r3, [r3, #2180]	; 0x884
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d04e      	beq.n	8000c96 <gsm_loop+0x48e>
      {
        if (gsm_command("AT+SAPBR=2,1\r\n", 1000, str1, sizeof(str1), 2, "\r\n+SAPBR: 1,", "\r\nERROR\r\n") == 1)
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4a3c      	ldr	r2, [pc, #240]	; (8000cf0 <gsm_loop+0x4e8>)
 8000bfe:	9203      	str	r2, [sp, #12]
 8000c00:	4a3c      	ldr	r2, [pc, #240]	; (8000cf4 <gsm_loop+0x4ec>)
 8000c02:	9202      	str	r2, [sp, #8]
 8000c04:	2202      	movs	r2, #2
 8000c06:	9201      	str	r2, [sp, #4]
 8000c08:	2240      	movs	r2, #64	; 0x40
 8000c0a:	9200      	str	r2, [sp, #0]
 8000c0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c10:	4939      	ldr	r1, [pc, #228]	; (8000cf8 <gsm_loop+0x4f0>)
 8000c12:	4834      	ldr	r0, [pc, #208]	; (8000ce4 <gsm_loop+0x4dc>)
 8000c14:	f7ff fc16 	bl	8000444 <atc_command>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d12c      	bne.n	8000c78 <gsm_loop+0x470>
        {
          if (sscanf(str1, "\r\n+SAPBR: 1,1,\"%[^\"\r\n]", gsm.gprs.ip) == 1)
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4a36      	ldr	r2, [pc, #216]	; (8000cfc <gsm_loop+0x4f4>)
 8000c24:	4936      	ldr	r1, [pc, #216]	; (8000d00 <gsm_loop+0x4f8>)
 8000c26:	4618      	mov	r0, r3
 8000c28:	f004 f85e 	bl	8004ce8 <siscanf>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d112      	bne.n	8000c58 <gsm_loop+0x450>
          {
            if (gsm.gprs.connectedLast == false)
 8000c32:	4b29      	ldr	r3, [pc, #164]	; (8000cd8 <gsm_loop+0x4d0>)
 8000c34:	f893 3885 	ldrb.w	r3, [r3, #2181]	; 0x885
 8000c38:	f083 0301 	eor.w	r3, r3, #1
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d029      	beq.n	8000c96 <gsm_loop+0x48e>
            {
              gsm.gprs.connected = true;
 8000c42:	4b25      	ldr	r3, [pc, #148]	; (8000cd8 <gsm_loop+0x4d0>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	f883 2884 	strb.w	r2, [r3, #2180]	; 0x884
              gsm.gprs.connectedLast = true;
 8000c4a:	4b23      	ldr	r3, [pc, #140]	; (8000cd8 <gsm_loop+0x4d0>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	f883 2885 	strb.w	r2, [r3, #2181]	; 0x885
              gsm_callback_gprsConnected();
 8000c52:	f000 fa6f 	bl	8001134 <gsm_callback_gprsConnected>
 8000c56:	e01e      	b.n	8000c96 <gsm_loop+0x48e>
            }
          }
          else
          {
            if (gsm.gprs.connectedLast == true)
 8000c58:	4b1f      	ldr	r3, [pc, #124]	; (8000cd8 <gsm_loop+0x4d0>)
 8000c5a:	f893 3885 	ldrb.w	r3, [r3, #2181]	; 0x885
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d019      	beq.n	8000c96 <gsm_loop+0x48e>
            {
              gsm.gprs.connected = false;
 8000c62:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <gsm_loop+0x4d0>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	f883 2884 	strb.w	r2, [r3, #2180]	; 0x884
              gsm.gprs.connectedLast = false;
 8000c6a:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <gsm_loop+0x4d0>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f883 2885 	strb.w	r2, [r3, #2181]	; 0x885
              gsm_callback_gprsDisconnected();
 8000c72:	f000 fa6b 	bl	800114c <gsm_callback_gprsDisconnected>
 8000c76:	e00e      	b.n	8000c96 <gsm_loop+0x48e>
            }
          }
        }
        else
        {
          if (gsm.gprs.connectedLast == true)
 8000c78:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <gsm_loop+0x4d0>)
 8000c7a:	f893 3885 	ldrb.w	r3, [r3, #2181]	; 0x885
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d009      	beq.n	8000c96 <gsm_loop+0x48e>
          {
            gsm.gprs.connected = false;
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <gsm_loop+0x4d0>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	f883 2884 	strb.w	r2, [r3, #2180]	; 0x884
            gsm.gprs.connectedLast = false;
 8000c8a:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <gsm_loop+0x4d0>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f883 2885 	strb.w	r2, [r3, #2181]	; 0x885
            gsm_callback_gprsDisconnected();
 8000c92:	f000 fa5b 	bl	800114c <gsm_callback_gprsDisconnected>
#endif
  }
  //  --- 10s timer ######################

  //  +++ 60s timer  ######################
  if ((HAL_GetTick() - gsm_time_60s > 60000) && (gsm.status.power == 1))
 8000c96:	f001 fa75 	bl	8002184 <HAL_GetTick>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <gsm_loop+0x4fc>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d911      	bls.n	8000cce <gsm_loop+0x4c6>
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <gsm_loop+0x4d0>)
 8000cac:	791b      	ldrb	r3, [r3, #4]
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d00a      	beq.n	8000cce <gsm_loop+0x4c6>
  {
    gsm_time_60s = HAL_GetTick();
 8000cb8:	f001 fa64 	bl	8002184 <HAL_GetTick>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	4a11      	ldr	r2, [pc, #68]	; (8000d04 <gsm_loop+0x4fc>)
 8000cc0:	6013      	str	r3, [r2, #0]

    //  +++ msg check
#if (_GSM_MSG == 1)
    if (gsm.lock == 0)
 8000cc2:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <gsm_loop+0x4d0>)
 8000cc4:	785b      	ldrb	r3, [r3, #1]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d101      	bne.n	8000cce <gsm_loop+0x4c6>
      gsm_msg_updateStorage();
 8000cca:	f000 fa63 	bl	8001194 <gsm_msg_updateStorage>
    //  --- msg check

  }
  //  --- 60s timer  ######################

}
 8000cce:	bf00      	nop
 8000cd0:	3758      	adds	r7, #88	; 0x58
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200000b4 	.word	0x200000b4
 8000cdc:	20000098 	.word	0x20000098
 8000ce0:	08006a94 	.word	0x08006a94
 8000ce4:	200000bc 	.word	0x200000bc
 8000ce8:	20000518 	.word	0x20000518
 8000cec:	20000928 	.word	0x20000928
 8000cf0:	080069c8 	.word	0x080069c8
 8000cf4:	08006ab0 	.word	0x08006ab0
 8000cf8:	08006aa0 	.word	0x08006aa0
 8000cfc:	2000093a 	.word	0x2000093a
 8000d00:	08006ac0 	.word	0x08006ac0
 8000d04:	2000009c 	.word	0x2000009c

08000d08 <gsm_power>:
//###############################################################################################################
bool gsm_power(bool on_off)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b088      	sub	sp, #32
 8000d0c:	af04      	add	r7, sp, #16
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
  gsm_printf("[GSM] power(%d) begin\r\n", on_off);
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	4619      	mov	r1, r3
 8000d16:	4871      	ldr	r0, [pc, #452]	; (8000edc <gsm_power+0x1d4>)
 8000d18:	f7ff fcac 	bl	8000674 <gsm_printf>
  uint8_t state = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	73fb      	strb	r3, [r7, #15]
  if (on_off)
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d00a      	beq.n	8000d3c <gsm_power+0x34>
  {
    gsm.status.turnOn = 1;
 8000d26:	4a6e      	ldr	r2, [pc, #440]	; (8000ee0 <gsm_power+0x1d8>)
 8000d28:	7913      	ldrb	r3, [r2, #4]
 8000d2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d2e:	7113      	strb	r3, [r2, #4]
    gsm.status.turnOff = 0;  
 8000d30:	4a6b      	ldr	r2, [pc, #428]	; (8000ee0 <gsm_power+0x1d8>)
 8000d32:	7913      	ldrb	r3, [r2, #4]
 8000d34:	f36f 1345 	bfc	r3, #5, #1
 8000d38:	7113      	strb	r3, [r2, #4]
 8000d3a:	e009      	b.n	8000d50 <gsm_power+0x48>
  }
  else
  {
    gsm.status.turnOn = 0;
 8000d3c:	4a68      	ldr	r2, [pc, #416]	; (8000ee0 <gsm_power+0x1d8>)
 8000d3e:	7913      	ldrb	r3, [r2, #4]
 8000d40:	f36f 1386 	bfc	r3, #6, #1
 8000d44:	7113      	strb	r3, [r2, #4]
    gsm.status.turnOff = 1;    
 8000d46:	4a66      	ldr	r2, [pc, #408]	; (8000ee0 <gsm_power+0x1d8>)
 8000d48:	7913      	ldrb	r3, [r2, #4]
 8000d4a:	f043 0320 	orr.w	r3, r3, #32
 8000d4e:	7113      	strb	r3, [r2, #4]
  }
  if (gsm_command("AT\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n") == 1)
 8000d50:	4b64      	ldr	r3, [pc, #400]	; (8000ee4 <gsm_power+0x1dc>)
 8000d52:	9302      	str	r3, [sp, #8]
 8000d54:	2301      	movs	r3, #1
 8000d56:	9301      	str	r3, [sp, #4]
 8000d58:	2300      	movs	r3, #0
 8000d5a:	9300      	str	r3, [sp, #0]
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d62:	4961      	ldr	r1, [pc, #388]	; (8000ee8 <gsm_power+0x1e0>)
 8000d64:	4861      	ldr	r0, [pc, #388]	; (8000eec <gsm_power+0x1e4>)
 8000d66:	f7ff fb6d 	bl	8000444 <atc_command>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d101      	bne.n	8000d74 <gsm_power+0x6c>
    state = 1;
 8000d70:	2301      	movs	r3, #1
 8000d72:	73fb      	strb	r3, [r7, #15]
  if ((on_off == true) && (state == 1))
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d023      	beq.n	8000dc2 <gsm_power+0xba>
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d120      	bne.n	8000dc2 <gsm_power+0xba>
  {
    memset(&gsm.status, 0, sizeof(gsm.status));
 8000d80:	2201      	movs	r2, #1
 8000d82:	2100      	movs	r1, #0
 8000d84:	485a      	ldr	r0, [pc, #360]	; (8000ef0 <gsm_power+0x1e8>)
 8000d86:	f003 fec3 	bl	8004b10 <memset>
    if (on_off)
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d005      	beq.n	8000d9c <gsm_power+0x94>
      gsm.status.turnOn = 1;
 8000d90:	4a53      	ldr	r2, [pc, #332]	; (8000ee0 <gsm_power+0x1d8>)
 8000d92:	7913      	ldrb	r3, [r2, #4]
 8000d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d98:	7113      	strb	r3, [r2, #4]
 8000d9a:	e004      	b.n	8000da6 <gsm_power+0x9e>
    else
      gsm.status.turnOff = 1;    
 8000d9c:	4a50      	ldr	r2, [pc, #320]	; (8000ee0 <gsm_power+0x1d8>)
 8000d9e:	7913      	ldrb	r3, [r2, #4]
 8000da0:	f043 0320 	orr.w	r3, r3, #32
 8000da4:	7113      	strb	r3, [r2, #4]
    gsm.status.power = 1;
 8000da6:	4a4e      	ldr	r2, [pc, #312]	; (8000ee0 <gsm_power+0x1d8>)
 8000da8:	7913      	ldrb	r3, [r2, #4]
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	7113      	strb	r3, [r2, #4]
    gsm_init_commands();
 8000db0:	f7ff fc76 	bl	80006a0 <gsm_init_commands>
    gsm_printf("[GSM] power(%d) done\r\n", on_off);
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	4619      	mov	r1, r3
 8000db8:	484e      	ldr	r0, [pc, #312]	; (8000ef4 <gsm_power+0x1ec>)
 8000dba:	f7ff fc5b 	bl	8000674 <gsm_printf>
    return true;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e088      	b.n	8000ed4 <gsm_power+0x1cc>
  }
  if ((on_off == true) && (state == 0))
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d051      	beq.n	8000e6c <gsm_power+0x164>
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d14e      	bne.n	8000e6c <gsm_power+0x164>
  {
    memset(&gsm.status, 0, sizeof(gsm.status));
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4847      	ldr	r0, [pc, #284]	; (8000ef0 <gsm_power+0x1e8>)
 8000dd4:	f003 fe9c 	bl	8004b10 <memset>
    if (on_off)
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d005      	beq.n	8000dea <gsm_power+0xe2>
      gsm.status.turnOn = 1;
 8000dde:	4a40      	ldr	r2, [pc, #256]	; (8000ee0 <gsm_power+0x1d8>)
 8000de0:	7913      	ldrb	r3, [r2, #4]
 8000de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000de6:	7113      	strb	r3, [r2, #4]
 8000de8:	e004      	b.n	8000df4 <gsm_power+0xec>
    else
      gsm.status.turnOff = 1; 
 8000dea:	4a3d      	ldr	r2, [pc, #244]	; (8000ee0 <gsm_power+0x1d8>)
 8000dec:	7913      	ldrb	r3, [r2, #4]
 8000dee:	f043 0320 	orr.w	r3, r3, #32
 8000df2:	7113      	strb	r3, [r2, #4]
//    HAL_GPIO_WritePin(_GSM_KEY_GPIO, _GSM_KEY_PIN, GPIO_PIN_RESET);
//    gsm_delay(1500);
//    HAL_GPIO_WritePin(_GSM_KEY_GPIO, _GSM_KEY_PIN, GPIO_PIN_SET);
    gsm_delay(3000);
 8000df4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000df8:	f001 f9ce 	bl	8002198 <HAL_Delay>
    for (uint8_t i = 0; i < 5; i++)
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	73bb      	strb	r3, [r7, #14]
 8000e00:	e015      	b.n	8000e2e <gsm_power+0x126>
    {
      if (gsm_command("AT\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n") == 1)
 8000e02:	4b38      	ldr	r3, [pc, #224]	; (8000ee4 <gsm_power+0x1dc>)
 8000e04:	9302      	str	r3, [sp, #8]
 8000e06:	2301      	movs	r3, #1
 8000e08:	9301      	str	r3, [sp, #4]
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e14:	4934      	ldr	r1, [pc, #208]	; (8000ee8 <gsm_power+0x1e0>)
 8000e16:	4835      	ldr	r0, [pc, #212]	; (8000eec <gsm_power+0x1e4>)
 8000e18:	f7ff fb14 	bl	8000444 <atc_command>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d102      	bne.n	8000e28 <gsm_power+0x120>
      {
        state = 1;
 8000e22:	2301      	movs	r3, #1
 8000e24:	73fb      	strb	r3, [r7, #15]
        break;
 8000e26:	e005      	b.n	8000e34 <gsm_power+0x12c>
    for (uint8_t i = 0; i < 5; i++)
 8000e28:	7bbb      	ldrb	r3, [r7, #14]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	73bb      	strb	r3, [r7, #14]
 8000e2e:	7bbb      	ldrb	r3, [r7, #14]
 8000e30:	2b04      	cmp	r3, #4
 8000e32:	d9e6      	bls.n	8000e02 <gsm_power+0xfa>
      }
    }
    if (state == 1)
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d111      	bne.n	8000e5e <gsm_power+0x156>
    {
      gsm_delay(5000);
 8000e3a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e3e:	f001 f9ab 	bl	8002198 <HAL_Delay>
      gsm_init_commands();
 8000e42:	f7ff fc2d 	bl	80006a0 <gsm_init_commands>
      gsm.status.power = 1;
 8000e46:	4a26      	ldr	r2, [pc, #152]	; (8000ee0 <gsm_power+0x1d8>)
 8000e48:	7913      	ldrb	r3, [r2, #4]
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	7113      	strb	r3, [r2, #4]
      gsm_printf("[GSM] power(%d) done\r\n", on_off);
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	4619      	mov	r1, r3
 8000e54:	4827      	ldr	r0, [pc, #156]	; (8000ef4 <gsm_power+0x1ec>)
 8000e56:	f7ff fc0d 	bl	8000674 <gsm_printf>
      return true;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e03a      	b.n	8000ed4 <gsm_power+0x1cc>
    }
    else
    {
      gsm_printf("[GSM] power(%d) failed!\r\n", on_off);
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	4619      	mov	r1, r3
 8000e62:	4825      	ldr	r0, [pc, #148]	; (8000ef8 <gsm_power+0x1f0>)
 8000e64:	f7ff fc06 	bl	8000674 <gsm_printf>
      return false;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	e033      	b.n	8000ed4 <gsm_power+0x1cc>
    }
  }
  if ((on_off == false) && (state == 0))
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	f083 0301 	eor.w	r3, r3, #1
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d00e      	beq.n	8000e96 <gsm_power+0x18e>
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d10b      	bne.n	8000e96 <gsm_power+0x18e>
  {
    gsm_printf("[GSM] power(%d) done\r\n", on_off);
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	4619      	mov	r1, r3
 8000e82:	481c      	ldr	r0, [pc, #112]	; (8000ef4 <gsm_power+0x1ec>)
 8000e84:	f7ff fbf6 	bl	8000674 <gsm_printf>
    gsm.status.power = 0;
 8000e88:	4a15      	ldr	r2, [pc, #84]	; (8000ee0 <gsm_power+0x1d8>)
 8000e8a:	7913      	ldrb	r3, [r2, #4]
 8000e8c:	f36f 0300 	bfc	r3, #0, #1
 8000e90:	7113      	strb	r3, [r2, #4]
    return true;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e01e      	b.n	8000ed4 <gsm_power+0x1cc>
  }
  if ((on_off == false) && (state == 1))
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	f083 0301 	eor.w	r3, r3, #1
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d012      	beq.n	8000ec8 <gsm_power+0x1c0>
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d10f      	bne.n	8000ec8 <gsm_power+0x1c0>
  {
//    HAL_GPIO_WritePin(_GSM_KEY_GPIO, _GSM_KEY_PIN, GPIO_PIN_RESET);
//    gsm_delay(1500);
//    HAL_GPIO_WritePin(_GSM_KEY_GPIO, _GSM_KEY_PIN, GPIO_PIN_SET);
    gsm_delay(3000);
 8000ea8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000eac:	f001 f974 	bl	8002198 <HAL_Delay>
    gsm.status.power = 0;
 8000eb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ee0 <gsm_power+0x1d8>)
 8000eb2:	7913      	ldrb	r3, [r2, #4]
 8000eb4:	f36f 0300 	bfc	r3, #0, #1
 8000eb8:	7113      	strb	r3, [r2, #4]
    gsm_printf("[GSM] power(%d) done\r\n", on_off);
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <gsm_power+0x1ec>)
 8000ec0:	f7ff fbd8 	bl	8000674 <gsm_printf>
    return true;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e005      	b.n	8000ed4 <gsm_power+0x1cc>
  }
  gsm_printf("[GSM] power(%d) failed!\r\n", on_off);
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	4619      	mov	r1, r3
 8000ecc:	480a      	ldr	r0, [pc, #40]	; (8000ef8 <gsm_power+0x1f0>)
 8000ece:	f7ff fbd1 	bl	8000674 <gsm_printf>
  return false;
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	08006ad8 	.word	0x08006ad8
 8000ee0:	200000b4 	.word	0x200000b4
 8000ee4:	0800698c 	.word	0x0800698c
 8000ee8:	08006a4c 	.word	0x08006a4c
 8000eec:	200000bc 	.word	0x200000bc
 8000ef0:	200000b8 	.word	0x200000b8
 8000ef4:	08006af0 	.word	0x08006af0
 8000ef8:	08006b08 	.word	0x08006b08

08000efc <gsm_getSignalQuality_0_to_100>:
  gsm_unlock();
  return true;
}
//###############################################################################################################
uint8_t gsm_getSignalQuality_0_to_100(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08e      	sub	sp, #56	; 0x38
 8000f00:	af04      	add	r7, sp, #16
  if (gsm_lock(10000) == false)
 8000f02:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f06:	f7ff fc4f 	bl	80007a8 <gsm_lock>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	f083 0301 	eor.w	r3, r3, #1
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d004      	beq.n	8000f20 <gsm_getSignalQuality_0_to_100+0x24>
  {
    gsm_printf("[GSM] getSignalQuality_0_to_100() failed!\r\n");
 8000f16:	4829      	ldr	r0, [pc, #164]	; (8000fbc <gsm_getSignalQuality_0_to_100+0xc0>)
 8000f18:	f7ff fbac 	bl	8000674 <gsm_printf>
    return false;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	e049      	b.n	8000fb4 <gsm_getSignalQuality_0_to_100+0xb8>
  }
  char str[32];
  int16_t p1, p2;
  if (gsm_command("AT+CSQ\r\n", 1000, str, sizeof(str), 2, "\r\n+CSQ:", "\r\nERROR\r\n") != 1)
 8000f20:	f107 0308 	add.w	r3, r7, #8
 8000f24:	4a26      	ldr	r2, [pc, #152]	; (8000fc0 <gsm_getSignalQuality_0_to_100+0xc4>)
 8000f26:	9203      	str	r2, [sp, #12]
 8000f28:	4a26      	ldr	r2, [pc, #152]	; (8000fc4 <gsm_getSignalQuality_0_to_100+0xc8>)
 8000f2a:	9202      	str	r2, [sp, #8]
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	9201      	str	r2, [sp, #4]
 8000f30:	2220      	movs	r2, #32
 8000f32:	9200      	str	r2, [sp, #0]
 8000f34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f38:	4923      	ldr	r1, [pc, #140]	; (8000fc8 <gsm_getSignalQuality_0_to_100+0xcc>)
 8000f3a:	4824      	ldr	r0, [pc, #144]	; (8000fcc <gsm_getSignalQuality_0_to_100+0xd0>)
 8000f3c:	f7ff fa82 	bl	8000444 <atc_command>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d006      	beq.n	8000f54 <gsm_getSignalQuality_0_to_100+0x58>
  {
    gsm_printf("[GSM] getSignalQuality_0_to_100() failed!\r\n");
 8000f46:	481d      	ldr	r0, [pc, #116]	; (8000fbc <gsm_getSignalQuality_0_to_100+0xc0>)
 8000f48:	f7ff fb94 	bl	8000674 <gsm_printf>
    gsm_unlock();
 8000f4c:	f7ff fc50 	bl	80007f0 <gsm_unlock>
    return 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	e02f      	b.n	8000fb4 <gsm_getSignalQuality_0_to_100+0xb8>
  }
  if (sscanf(str, "\r\n+CSQ: %hd,%hd\r\n", &p1, &p2) != 2)
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	1dba      	adds	r2, r7, #6
 8000f58:	f107 0008 	add.w	r0, r7, #8
 8000f5c:	491c      	ldr	r1, [pc, #112]	; (8000fd0 <gsm_getSignalQuality_0_to_100+0xd4>)
 8000f5e:	f003 fec3 	bl	8004ce8 <siscanf>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d006      	beq.n	8000f76 <gsm_getSignalQuality_0_to_100+0x7a>
  {
    gsm_printf("[GSM] getSignalQuality_0_to_100() failed!\r\n");
 8000f68:	4814      	ldr	r0, [pc, #80]	; (8000fbc <gsm_getSignalQuality_0_to_100+0xc0>)
 8000f6a:	f7ff fb83 	bl	8000674 <gsm_printf>
    gsm_unlock();
 8000f6e:	f7ff fc3f 	bl	80007f0 <gsm_unlock>
    return 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	e01e      	b.n	8000fb4 <gsm_getSignalQuality_0_to_100+0xb8>
  }
  if (p1 == 99)
 8000f76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f7a:	2b63      	cmp	r3, #99	; 0x63
 8000f7c:	d103      	bne.n	8000f86 <gsm_getSignalQuality_0_to_100+0x8a>
    gsm.signal = 0;
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <gsm_getSignalQuality_0_to_100+0xd8>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	70da      	strb	r2, [r3, #3]
 8000f84:	e00f      	b.n	8000fa6 <gsm_getSignalQuality_0_to_100+0xaa>
  else
    gsm.signal = (p1 * 100) / 31;
 8000f86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	2364      	movs	r3, #100	; 0x64
 8000f8e:	fb03 f302 	mul.w	r3, r3, r2
 8000f92:	4a11      	ldr	r2, [pc, #68]	; (8000fd8 <gsm_getSignalQuality_0_to_100+0xdc>)
 8000f94:	fb82 1203 	smull	r1, r2, r2, r3
 8000f98:	441a      	add	r2, r3
 8000f9a:	1112      	asrs	r2, r2, #4
 8000f9c:	17db      	asrs	r3, r3, #31
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <gsm_getSignalQuality_0_to_100+0xd8>)
 8000fa4:	70da      	strb	r2, [r3, #3]
  gsm_printf("[GSM] getSignalQuality_0_to_100() done\r\n");
 8000fa6:	480d      	ldr	r0, [pc, #52]	; (8000fdc <gsm_getSignalQuality_0_to_100+0xe0>)
 8000fa8:	f7ff fb64 	bl	8000674 <gsm_printf>
  gsm_unlock();
 8000fac:	f7ff fc20 	bl	80007f0 <gsm_unlock>
  return gsm.signal;
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <gsm_getSignalQuality_0_to_100+0xd8>)
 8000fb2:	78db      	ldrb	r3, [r3, #3]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3728      	adds	r7, #40	; 0x28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	08006d60 	.word	0x08006d60
 8000fc0:	080069c8 	.word	0x080069c8
 8000fc4:	08006d98 	.word	0x08006d98
 8000fc8:	08006d8c 	.word	0x08006d8c
 8000fcc:	200000bc 	.word	0x200000bc
 8000fd0:	08006da0 	.word	0x08006da0
 8000fd4:	200000b4 	.word	0x200000b4
 8000fd8:	84210843 	.word	0x84210843
 8000fdc:	08006db4 	.word	0x08006db4

08000fe0 <gsm_waitForRegister>:
//###############################################################################################################
bool gsm_waitForRegister(uint8_t seconds)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
  gsm_printf("[GSM] waitForRegister(%d second) begin\r\n", seconds);
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	4619      	mov	r1, r3
 8000fee:	4820      	ldr	r0, [pc, #128]	; (8001070 <gsm_waitForRegister+0x90>)
 8000ff0:	f7ff fb40 	bl	8000674 <gsm_printf>
  uint32_t startTime = HAL_GetTick();
 8000ff4:	f001 f8c6 	bl	8002184 <HAL_GetTick>
 8000ff8:	60b8      	str	r0, [r7, #8]
  while (HAL_GetTick() - startTime < (seconds * 1000))
 8000ffa:	e024      	b.n	8001046 <gsm_waitForRegister+0x66>
  {
    gsm_delay(100);
 8000ffc:	2064      	movs	r0, #100	; 0x64
 8000ffe:	f001 f8cb 	bl	8002198 <HAL_Delay>
    gsm_loop();
 8001002:	f7ff fc01 	bl	8000808 <gsm_loop>
    if (gsm.status.registerd == 1)
 8001006:	4b1b      	ldr	r3, [pc, #108]	; (8001074 <gsm_waitForRegister+0x94>)
 8001008:	791b      	ldrb	r3, [r3, #4]
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2b00      	cmp	r3, #0
 8001012:	d013      	beq.n	800103c <gsm_waitForRegister+0x5c>
    {
      for (uint8_t i = 0; i < 10; i++)
 8001014:	2300      	movs	r3, #0
 8001016:	73fb      	strb	r3, [r7, #15]
 8001018:	e008      	b.n	800102c <gsm_waitForRegister+0x4c>
      {
        gsm_loop();
 800101a:	f7ff fbf5 	bl	8000808 <gsm_loop>
        gsm_delay(500);
 800101e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001022:	f001 f8b9 	bl	8002198 <HAL_Delay>
      for (uint8_t i = 0; i < 10; i++)
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	3301      	adds	r3, #1
 800102a:	73fb      	strb	r3, [r7, #15]
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	2b09      	cmp	r3, #9
 8001030:	d9f3      	bls.n	800101a <gsm_waitForRegister+0x3a>
      }
      gsm_printf("[GSM] waitForRegister() done\r\n");
 8001032:	4811      	ldr	r0, [pc, #68]	; (8001078 <gsm_waitForRegister+0x98>)
 8001034:	f7ff fb1e 	bl	8000674 <gsm_printf>
      return true;
 8001038:	2301      	movs	r3, #1
 800103a:	e014      	b.n	8001066 <gsm_waitForRegister+0x86>
    }
    if (gsm.inited == 0)
 800103c:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <gsm_waitForRegister+0x94>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d100      	bne.n	8001046 <gsm_waitForRegister+0x66>
      continue;
 8001044:	bf00      	nop
  while (HAL_GetTick() - startTime < (seconds * 1000))
 8001046:	f001 f89d 	bl	8002184 <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	79fa      	ldrb	r2, [r7, #7]
 8001052:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001056:	fb01 f202 	mul.w	r2, r1, r2
 800105a:	4293      	cmp	r3, r2
 800105c:	d3ce      	bcc.n	8000ffc <gsm_waitForRegister+0x1c>
  }
  gsm_printf("[GSM] waitForRegister() failed!\r\n");
 800105e:	4807      	ldr	r0, [pc, #28]	; (800107c <gsm_waitForRegister+0x9c>)
 8001060:	f7ff fb08 	bl	8000674 <gsm_printf>
  return false;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	08006de0 	.word	0x08006de0
 8001074:	200000b4 	.word	0x200000b4
 8001078:	08006e0c 	.word	0x08006e0c
 800107c:	08006e2c 	.word	0x08006e2c

08001080 <gsm_callback_simcardReady>:

#include "gsm.h"
#if (_GSM_CALL == 1 || _GSM_MSG == 1 || _GSM_GPRS == 1)
//###############################################################################################################
void gsm_callback_simcardReady(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  gsm_printf("CALLBACK SIMCARD READY\r\n");
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <gsm_callback_simcardReady+0x10>)
 8001086:	f7ff faf5 	bl	8000674 <gsm_printf>
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	08006fb8 	.word	0x08006fb8

08001094 <gsm_callback_simcardPinRequest>:
//###############################################################################################################
void gsm_callback_simcardPinRequest(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  gsm_printf("CALLBACK SIMCARD PIN\r\n");
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <gsm_callback_simcardPinRequest+0x10>)
 800109a:	f7ff faeb 	bl	8000674 <gsm_printf>
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	08006fd4 	.word	0x08006fd4

080010a8 <gsm_callback_simcardPukRequest>:
//###############################################################################################################
void gsm_callback_simcardPukRequest(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  gsm_printf("CALLBACK SIMCARD PUK\r\n");
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <gsm_callback_simcardPukRequest+0x10>)
 80010ae:	f7ff fae1 	bl	8000674 <gsm_printf>
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	08006fec 	.word	0x08006fec

080010bc <gsm_callback_simcardNotInserted>:
//###############################################################################################################
void gsm_callback_simcardNotInserted(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  gsm_printf("CALLBACK SIMCARD NOT DETECT\r\n");
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <gsm_callback_simcardNotInserted+0x10>)
 80010c2:	f7ff fad7 	bl	8000674 <gsm_printf>
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	08007004 	.word	0x08007004

080010d0 <gsm_callback_networkRegister>:
//###############################################################################################################
void gsm_callback_networkRegister(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  gsm_printf("CALLBACK NETWORK REGISTER\r\n");
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <gsm_callback_networkRegister+0x10>)
 80010d6:	f7ff facd 	bl	8000674 <gsm_printf>
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	08007024 	.word	0x08007024

080010e4 <gsm_callback_networkUnregister>:
//###############################################################################################################
void gsm_callback_networkUnregister(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  gsm_printf("CALLBACK NETWORK UNREGISTER\r\n");
 80010e8:	4802      	ldr	r0, [pc, #8]	; (80010f4 <gsm_callback_networkUnregister+0x10>)
 80010ea:	f7ff fac3 	bl	8000674 <gsm_printf>
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	08007040 	.word	0x08007040

080010f8 <gsm_callback_newMsg>:
}
#endif
//###############################################################################################################
#if (_GSM_MSG == 1)
void gsm_callback_newMsg(char *number, gsm_time_t time, char *msg)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	1d38      	adds	r0, r7, #4
 8001102:	e880 0006 	stmia.w	r0, {r1, r2}
 8001106:	603b      	str	r3, [r7, #0]
  gsm_printf("CALLBACK NEW MESSAGE FROM %s, LEN:%d\r\n", number, strlen(msg));
 8001108:	6838      	ldr	r0, [r7, #0]
 800110a:	f7ff f829 	bl	8000160 <strlen>
 800110e:	4603      	mov	r3, r0
 8001110:	461a      	mov	r2, r3
 8001112:	68f9      	ldr	r1, [r7, #12]
 8001114:	4805      	ldr	r0, [pc, #20]	; (800112c <gsm_callback_newMsg+0x34>)
 8001116:	f7ff faad 	bl	8000674 <gsm_printf>
  gsm_printf("%s\r\n", msg);
 800111a:	6839      	ldr	r1, [r7, #0]
 800111c:	4804      	ldr	r0, [pc, #16]	; (8001130 <gsm_callback_newMsg+0x38>)
 800111e:	f7ff faa9 	bl	8000674 <gsm_printf>
}
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	08007060 	.word	0x08007060
 8001130:	08007088 	.word	0x08007088

08001134 <gsm_callback_gprsConnected>:
#endif
//###############################################################################################################
#if (_GSM_GPRS == 1)
void gsm_callback_gprsConnected(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  gsm_printf("CALLBACK GPRS CONNECTED, IP: %s\r\n", gsm.gprs.ip);
 8001138:	4902      	ldr	r1, [pc, #8]	; (8001144 <gsm_callback_gprsConnected+0x10>)
 800113a:	4803      	ldr	r0, [pc, #12]	; (8001148 <gsm_callback_gprsConnected+0x14>)
 800113c:	f7ff fa9a 	bl	8000674 <gsm_printf>
}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	2000093a 	.word	0x2000093a
 8001148:	08007090 	.word	0x08007090

0800114c <gsm_callback_gprsDisconnected>:
//###############################################################################################################
void gsm_callback_gprsDisconnected(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  gsm_printf("CALLBACK GPRS DISCONNECTED\r\n");
 8001150:	4802      	ldr	r0, [pc, #8]	; (800115c <gsm_callback_gprsDisconnected+0x10>)
 8001152:	f7ff fa8f 	bl	8000674 <gsm_printf>
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	080070b4 	.word	0x080070b4

08001160 <gsm_callback_mqttMessage>:
//###############################################################################################################
void gsm_callback_mqttMessage(char *topic, char *message)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  gsm_printf("CALLBACK GPRS MQTT TOPIC: %s   ----   MESSAGE: %s\r\n", topic, message);
 800116a:	683a      	ldr	r2, [r7, #0]
 800116c:	6879      	ldr	r1, [r7, #4]
 800116e:	4803      	ldr	r0, [pc, #12]	; (800117c <gsm_callback_mqttMessage+0x1c>)
 8001170:	f7ff fa80 	bl	8000674 <gsm_printf>
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	080070d4 	.word	0x080070d4

08001180 <gsm_callback_mqttDisconnect>:
//###############################################################################################################
void gsm_callback_mqttDisconnect(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  gsm_printf("CALLBACK GPRS MQTT DISCONNECT\r\n");
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <gsm_callback_mqttDisconnect+0x10>)
 8001186:	f7ff fa75 	bl	8000674 <gsm_printf>
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	08007108 	.word	0x08007108

08001194 <gsm_msg_updateStorage>:
#include "gsm.h"

#if (_GSM_MSG == 1)
//###############################################################################################################
bool gsm_msg_updateStorage(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b096      	sub	sp, #88	; 0x58
 8001198:	af04      	add	r7, sp, #16
  if (gsm_lock(10000) == false)
 800119a:	f242 7010 	movw	r0, #10000	; 0x2710
 800119e:	f7ff fb03 	bl	80007a8 <gsm_lock>
 80011a2:	4603      	mov	r3, r0
 80011a4:	f083 0301 	eor.w	r3, r3, #1
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d004      	beq.n	80011b8 <gsm_msg_updateStorage+0x24>
  {
    gsm_printf("[GSM] msg_updateStorage() failed!\r\n");
 80011ae:	4840      	ldr	r0, [pc, #256]	; (80012b0 <gsm_msg_updateStorage+0x11c>)
 80011b0:	f7ff fa60 	bl	8000674 <gsm_printf>
    return false;
 80011b4:	2300      	movs	r3, #0
 80011b6:	e077      	b.n	80012a8 <gsm_msg_updateStorage+0x114>
  }
  char str[64];
  char s[5];
  if (gsm_command("AT+CPMS?\r\n", 1000 , str, sizeof(str), 2, "\r\n+CPMS:", "\r\nERROR\r\n") != 1)
 80011b8:	f107 0308 	add.w	r3, r7, #8
 80011bc:	4a3d      	ldr	r2, [pc, #244]	; (80012b4 <gsm_msg_updateStorage+0x120>)
 80011be:	9203      	str	r2, [sp, #12]
 80011c0:	4a3d      	ldr	r2, [pc, #244]	; (80012b8 <gsm_msg_updateStorage+0x124>)
 80011c2:	9202      	str	r2, [sp, #8]
 80011c4:	2202      	movs	r2, #2
 80011c6:	9201      	str	r2, [sp, #4]
 80011c8:	2240      	movs	r2, #64	; 0x40
 80011ca:	9200      	str	r2, [sp, #0]
 80011cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011d0:	493a      	ldr	r1, [pc, #232]	; (80012bc <gsm_msg_updateStorage+0x128>)
 80011d2:	483b      	ldr	r0, [pc, #236]	; (80012c0 <gsm_msg_updateStorage+0x12c>)
 80011d4:	f7ff f936 	bl	8000444 <atc_command>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d006      	beq.n	80011ec <gsm_msg_updateStorage+0x58>
  {
    gsm_printf("[GSM] msg_updateStorage() failed!\r\n");
 80011de:	4834      	ldr	r0, [pc, #208]	; (80012b0 <gsm_msg_updateStorage+0x11c>)
 80011e0:	f7ff fa48 	bl	8000674 <gsm_printf>
    gsm_unlock();
 80011e4:	f7ff fb04 	bl	80007f0 <gsm_unlock>
    return false;
 80011e8:	2300      	movs	r3, #0
 80011ea:	e05d      	b.n	80012a8 <gsm_msg_updateStorage+0x114>
  }
  if (sscanf(str, "\r\n+CPMS: \"%[^\"]\",%hd,%hd,", s, &gsm.msg.storageUsed, &gsm.msg.storageTotal) != 3)
 80011ec:	463a      	mov	r2, r7
 80011ee:	f107 0008 	add.w	r0, r7, #8
 80011f2:	4b34      	ldr	r3, [pc, #208]	; (80012c4 <gsm_msg_updateStorage+0x130>)
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	4b34      	ldr	r3, [pc, #208]	; (80012c8 <gsm_msg_updateStorage+0x134>)
 80011f8:	4934      	ldr	r1, [pc, #208]	; (80012cc <gsm_msg_updateStorage+0x138>)
 80011fa:	f003 fd75 	bl	8004ce8 <siscanf>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b03      	cmp	r3, #3
 8001202:	d006      	beq.n	8001212 <gsm_msg_updateStorage+0x7e>
  {
    gsm_printf("[GSM] msg_updateStorage() failed!\r\n");
 8001204:	482a      	ldr	r0, [pc, #168]	; (80012b0 <gsm_msg_updateStorage+0x11c>)
 8001206:	f7ff fa35 	bl	8000674 <gsm_printf>
    gsm_unlock();
 800120a:	f7ff faf1 	bl	80007f0 <gsm_unlock>
    return false;
 800120e:	2300      	movs	r3, #0
 8001210:	e04a      	b.n	80012a8 <gsm_msg_updateStorage+0x114>
  }
  if (strcmp(s, "SM") == 0)
 8001212:	463b      	mov	r3, r7
 8001214:	492e      	ldr	r1, [pc, #184]	; (80012d0 <gsm_msg_updateStorage+0x13c>)
 8001216:	4618      	mov	r0, r3
 8001218:	f7fe ff98 	bl	800014c <strcmp>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d104      	bne.n	800122c <gsm_msg_updateStorage+0x98>
    gsm.msg.storage = gsm_msg_store_simcard;
 8001222:	4b2c      	ldr	r3, [pc, #176]	; (80012d4 <gsm_msg_updateStorage+0x140>)
 8001224:	2201      	movs	r2, #1
 8001226:	f883 2856 	strb.w	r2, [r3, #2134]	; 0x856
 800122a:	e037      	b.n	800129c <gsm_msg_updateStorage+0x108>
  else if (strcmp(s, "ME") == 0)
 800122c:	463b      	mov	r3, r7
 800122e:	492a      	ldr	r1, [pc, #168]	; (80012d8 <gsm_msg_updateStorage+0x144>)
 8001230:	4618      	mov	r0, r3
 8001232:	f7fe ff8b 	bl	800014c <strcmp>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d104      	bne.n	8001246 <gsm_msg_updateStorage+0xb2>
    gsm.msg.storage = gsm_msg_store_module;
 800123c:	4b25      	ldr	r3, [pc, #148]	; (80012d4 <gsm_msg_updateStorage+0x140>)
 800123e:	2202      	movs	r2, #2
 8001240:	f883 2856 	strb.w	r2, [r3, #2134]	; 0x856
 8001244:	e02a      	b.n	800129c <gsm_msg_updateStorage+0x108>
  else if (strcmp(s, "SM_P") == 0)
 8001246:	463b      	mov	r3, r7
 8001248:	4924      	ldr	r1, [pc, #144]	; (80012dc <gsm_msg_updateStorage+0x148>)
 800124a:	4618      	mov	r0, r3
 800124c:	f7fe ff7e 	bl	800014c <strcmp>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d104      	bne.n	8001260 <gsm_msg_updateStorage+0xcc>
    gsm.msg.storage = gsm_msg_store_simcard_preferred;
 8001256:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <gsm_msg_updateStorage+0x140>)
 8001258:	2203      	movs	r2, #3
 800125a:	f883 2856 	strb.w	r2, [r3, #2134]	; 0x856
 800125e:	e01d      	b.n	800129c <gsm_msg_updateStorage+0x108>
  else if (strcmp(s, "ME_P") == 0)
 8001260:	463b      	mov	r3, r7
 8001262:	491f      	ldr	r1, [pc, #124]	; (80012e0 <gsm_msg_updateStorage+0x14c>)
 8001264:	4618      	mov	r0, r3
 8001266:	f7fe ff71 	bl	800014c <strcmp>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d104      	bne.n	800127a <gsm_msg_updateStorage+0xe6>
    gsm.msg.storage = gsm_msg_store_module_preferred;
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <gsm_msg_updateStorage+0x140>)
 8001272:	2204      	movs	r2, #4
 8001274:	f883 2856 	strb.w	r2, [r3, #2134]	; 0x856
 8001278:	e010      	b.n	800129c <gsm_msg_updateStorage+0x108>
  else if (strcmp(s, "MT") == 0)
 800127a:	463b      	mov	r3, r7
 800127c:	4919      	ldr	r1, [pc, #100]	; (80012e4 <gsm_msg_updateStorage+0x150>)
 800127e:	4618      	mov	r0, r3
 8001280:	f7fe ff64 	bl	800014c <strcmp>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d104      	bne.n	8001294 <gsm_msg_updateStorage+0x100>
    gsm.msg.storage = gsm_msg_store_simcard_or_module;
 800128a:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <gsm_msg_updateStorage+0x140>)
 800128c:	2205      	movs	r2, #5
 800128e:	f883 2856 	strb.w	r2, [r3, #2134]	; 0x856
 8001292:	e003      	b.n	800129c <gsm_msg_updateStorage+0x108>
  else
    gsm.msg.storage = gsm_msg_store_error;
 8001294:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <gsm_msg_updateStorage+0x140>)
 8001296:	2200      	movs	r2, #0
 8001298:	f883 2856 	strb.w	r2, [r3, #2134]	; 0x856
  gsm_printf("[GSM] msg_updateStorage() done\r\n");
 800129c:	4812      	ldr	r0, [pc, #72]	; (80012e8 <gsm_msg_updateStorage+0x154>)
 800129e:	f7ff f9e9 	bl	8000674 <gsm_printf>
  gsm_unlock();
 80012a2:	f7ff faa5 	bl	80007f0 <gsm_unlock>
  return true;
 80012a6:	2301      	movs	r3, #1
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3748      	adds	r7, #72	; 0x48
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	08007128 	.word	0x08007128
 80012b4:	08007158 	.word	0x08007158
 80012b8:	08007164 	.word	0x08007164
 80012bc:	0800714c 	.word	0x0800714c
 80012c0:	200000bc 	.word	0x200000bc
 80012c4:	2000090c 	.word	0x2000090c
 80012c8:	2000090e 	.word	0x2000090e
 80012cc:	08007170 	.word	0x08007170
 80012d0:	0800718c 	.word	0x0800718c
 80012d4:	200000b4 	.word	0x200000b4
 80012d8:	08007190 	.word	0x08007190
 80012dc:	08007194 	.word	0x08007194
 80012e0:	0800719c 	.word	0x0800719c
 80012e4:	080071a4 	.word	0x080071a4
 80012e8:	080071a8 	.word	0x080071a8

080012ec <gsm_msg_textMode>:
  gsm_msg_updateStorage();
  return gsm.msg.storageTotal - gsm.msg.storageUsed;
}
//###############################################################################################################
bool gsm_msg_textMode(bool on_off, bool integer)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af04      	add	r7, sp, #16
 80012f2:	4603      	mov	r3, r0
 80012f4:	460a      	mov	r2, r1
 80012f6:	71fb      	strb	r3, [r7, #7]
 80012f8:	4613      	mov	r3, r2
 80012fa:	71bb      	strb	r3, [r7, #6]
  if (gsm_lock(10000) == false)
 80012fc:	f242 7010 	movw	r0, #10000	; 0x2710
 8001300:	f7ff fa52 	bl	80007a8 <gsm_lock>
 8001304:	4603      	mov	r3, r0
 8001306:	f083 0301 	eor.w	r3, r3, #1
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b00      	cmp	r3, #0
 800130e:	d004      	beq.n	800131a <gsm_msg_textMode+0x2e>
  {
    gsm_printf("[GSM] msg_textMode() failed!\r\n");
 8001310:	4839      	ldr	r0, [pc, #228]	; (80013f8 <gsm_msg_textMode+0x10c>)
 8001312:	f7ff f9af 	bl	8000674 <gsm_printf>
    return false;
 8001316:	2300      	movs	r3, #0
 8001318:	e06a      	b.n	80013f0 <gsm_msg_textMode+0x104>
  }
  if (on_off)
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d044      	beq.n	80013aa <gsm_msg_textMode+0xbe>
  {
    if (gsm_command("AT+CMGF=1\r\n", 1000, NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n") == 1)
 8001320:	4b36      	ldr	r3, [pc, #216]	; (80013fc <gsm_msg_textMode+0x110>)
 8001322:	9303      	str	r3, [sp, #12]
 8001324:	4b36      	ldr	r3, [pc, #216]	; (8001400 <gsm_msg_textMode+0x114>)
 8001326:	9302      	str	r3, [sp, #8]
 8001328:	2302      	movs	r3, #2
 800132a:	9301      	str	r3, [sp, #4]
 800132c:	2300      	movs	r3, #0
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2300      	movs	r3, #0
 8001332:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001336:	4933      	ldr	r1, [pc, #204]	; (8001404 <gsm_msg_textMode+0x118>)
 8001338:	4833      	ldr	r0, [pc, #204]	; (8001408 <gsm_msg_textMode+0x11c>)
 800133a:	f7ff f883 	bl	8000444 <atc_command>
 800133e:	4603      	mov	r3, r0
 8001340:	2b01      	cmp	r3, #1
 8001342:	d14f      	bne.n	80013e4 <gsm_msg_textMode+0xf8>
    {
      gsm.msg.textMode = 1;
 8001344:	4b31      	ldr	r3, [pc, #196]	; (800140c <gsm_msg_textMode+0x120>)
 8001346:	2201      	movs	r2, #1
 8001348:	f883 2854 	strb.w	r2, [r3, #2132]	; 0x854
      if (integer == false)
 800134c:	79bb      	ldrb	r3, [r7, #6]
 800134e:	f083 0301 	eor.w	r3, r3, #1
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d012      	beq.n	800137e <gsm_msg_textMode+0x92>
      {
        gsm_command("AT+CSMP=17,167,0,0\r\n", 1000, NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 8001358:	4b28      	ldr	r3, [pc, #160]	; (80013fc <gsm_msg_textMode+0x110>)
 800135a:	9303      	str	r3, [sp, #12]
 800135c:	4b28      	ldr	r3, [pc, #160]	; (8001400 <gsm_msg_textMode+0x114>)
 800135e:	9302      	str	r3, [sp, #8]
 8001360:	2302      	movs	r3, #2
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	2300      	movs	r3, #0
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	2300      	movs	r3, #0
 800136a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800136e:	4928      	ldr	r1, [pc, #160]	; (8001410 <gsm_msg_textMode+0x124>)
 8001370:	4825      	ldr	r0, [pc, #148]	; (8001408 <gsm_msg_textMode+0x11c>)
 8001372:	f7ff f867 	bl	8000444 <atc_command>
        gsm_printf("[GSM] msg_textMode() done. text: true, integer: false \r\n");
 8001376:	4827      	ldr	r0, [pc, #156]	; (8001414 <gsm_msg_textMode+0x128>)
 8001378:	f7ff f97c 	bl	8000674 <gsm_printf>
 800137c:	e011      	b.n	80013a2 <gsm_msg_textMode+0xb6>
      }
      else
      {
        gsm_command("AT+CSMP=17,167,0,8\r\n", 1000, NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 800137e:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <gsm_msg_textMode+0x110>)
 8001380:	9303      	str	r3, [sp, #12]
 8001382:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <gsm_msg_textMode+0x114>)
 8001384:	9302      	str	r3, [sp, #8]
 8001386:	2302      	movs	r3, #2
 8001388:	9301      	str	r3, [sp, #4]
 800138a:	2300      	movs	r3, #0
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	2300      	movs	r3, #0
 8001390:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001394:	4920      	ldr	r1, [pc, #128]	; (8001418 <gsm_msg_textMode+0x12c>)
 8001396:	481c      	ldr	r0, [pc, #112]	; (8001408 <gsm_msg_textMode+0x11c>)
 8001398:	f7ff f854 	bl	8000444 <atc_command>
        gsm_printf("[GSM] msg_textMode() done. text: true, integer: true \r\n");
 800139c:	481f      	ldr	r0, [pc, #124]	; (800141c <gsm_msg_textMode+0x130>)
 800139e:	f7ff f969 	bl	8000674 <gsm_printf>
      }
      gsm_unlock();
 80013a2:	f7ff fa25 	bl	80007f0 <gsm_unlock>
      return true;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e022      	b.n	80013f0 <gsm_msg_textMode+0x104>
    }
  }
  else
  {
    if (gsm_command("AT+CMGF=0\r\n", 1000, NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n") == 1)
 80013aa:	4b14      	ldr	r3, [pc, #80]	; (80013fc <gsm_msg_textMode+0x110>)
 80013ac:	9303      	str	r3, [sp, #12]
 80013ae:	4b14      	ldr	r3, [pc, #80]	; (8001400 <gsm_msg_textMode+0x114>)
 80013b0:	9302      	str	r3, [sp, #8]
 80013b2:	2302      	movs	r3, #2
 80013b4:	9301      	str	r3, [sp, #4]
 80013b6:	2300      	movs	r3, #0
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	2300      	movs	r3, #0
 80013bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013c0:	4917      	ldr	r1, [pc, #92]	; (8001420 <gsm_msg_textMode+0x134>)
 80013c2:	4811      	ldr	r0, [pc, #68]	; (8001408 <gsm_msg_textMode+0x11c>)
 80013c4:	f7ff f83e 	bl	8000444 <atc_command>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d10a      	bne.n	80013e4 <gsm_msg_textMode+0xf8>
    {
      gsm.msg.textMode = 0;
 80013ce:	4b0f      	ldr	r3, [pc, #60]	; (800140c <gsm_msg_textMode+0x120>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 2854 	strb.w	r2, [r3, #2132]	; 0x854
      gsm_printf("[GSM] msg_textMode() done. text: false\r\n");
 80013d6:	4813      	ldr	r0, [pc, #76]	; (8001424 <gsm_msg_textMode+0x138>)
 80013d8:	f7ff f94c 	bl	8000674 <gsm_printf>
      gsm_unlock();
 80013dc:	f7ff fa08 	bl	80007f0 <gsm_unlock>
      return true;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e005      	b.n	80013f0 <gsm_msg_textMode+0x104>
    }
  }
  gsm_printf("[GSM] msg_textMode() failed!\r\n");
 80013e4:	4804      	ldr	r0, [pc, #16]	; (80013f8 <gsm_msg_textMode+0x10c>)
 80013e6:	f7ff f945 	bl	8000674 <gsm_printf>
  gsm_unlock();
 80013ea:	f7ff fa01 	bl	80007f0 <gsm_unlock>
  return false;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	080071cc 	.word	0x080071cc
 80013fc:	08007158 	.word	0x08007158
 8001400:	080071f8 	.word	0x080071f8
 8001404:	080071ec 	.word	0x080071ec
 8001408:	200000bc 	.word	0x200000bc
 800140c:	200000b4 	.word	0x200000b4
 8001410:	08007200 	.word	0x08007200
 8001414:	08007218 	.word	0x08007218
 8001418:	08007254 	.word	0x08007254
 800141c:	0800726c 	.word	0x0800726c
 8001420:	080072a4 	.word	0x080072a4
 8001424:	080072b0 	.word	0x080072b0

08001428 <gsm_msg_delete>:
    return true;
  }
}
//###############################################################################################################
bool gsm_msg_delete(uint16_t index)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08e      	sub	sp, #56	; 0x38
 800142c:	af04      	add	r7, sp, #16
 800142e:	4603      	mov	r3, r0
 8001430:	80fb      	strh	r3, [r7, #6]
  if (gsm_lock(10000) == false)
 8001432:	f242 7010 	movw	r0, #10000	; 0x2710
 8001436:	f7ff f9b7 	bl	80007a8 <gsm_lock>
 800143a:	4603      	mov	r3, r0
 800143c:	f083 0301 	eor.w	r3, r3, #1
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d006      	beq.n	8001454 <gsm_msg_delete+0x2c>
  {
    gsm_printf("[GSM] msg_delete(%d) failed!\r\n", index);
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	4619      	mov	r1, r3
 800144a:	481a      	ldr	r0, [pc, #104]	; (80014b4 <gsm_msg_delete+0x8c>)
 800144c:	f7ff f912 	bl	8000674 <gsm_printf>
    return false;
 8001450:	2300      	movs	r3, #0
 8001452:	e02a      	b.n	80014aa <gsm_msg_delete+0x82>
  }
  char str[32];
  sprintf(str, "AT+CMGD=%d\r\n", index);
 8001454:	88fa      	ldrh	r2, [r7, #6]
 8001456:	f107 0308 	add.w	r3, r7, #8
 800145a:	4917      	ldr	r1, [pc, #92]	; (80014b8 <gsm_msg_delete+0x90>)
 800145c:	4618      	mov	r0, r3
 800145e:	f003 fc23 	bl	8004ca8 <siprintf>
  if (gsm_command(str, 5000 , NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n") == 1)
 8001462:	f107 0108 	add.w	r1, r7, #8
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <gsm_msg_delete+0x94>)
 8001468:	9303      	str	r3, [sp, #12]
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <gsm_msg_delete+0x98>)
 800146c:	9302      	str	r3, [sp, #8]
 800146e:	2302      	movs	r3, #2
 8001470:	9301      	str	r3, [sp, #4]
 8001472:	2300      	movs	r3, #0
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	2300      	movs	r3, #0
 8001478:	f241 3288 	movw	r2, #5000	; 0x1388
 800147c:	4811      	ldr	r0, [pc, #68]	; (80014c4 <gsm_msg_delete+0x9c>)
 800147e:	f7fe ffe1 	bl	8000444 <atc_command>
 8001482:	4603      	mov	r3, r0
 8001484:	2b01      	cmp	r3, #1
 8001486:	d108      	bne.n	800149a <gsm_msg_delete+0x72>
  {
    gsm_printf("[GSM] msg_delete(%d) done\r\n", index);
 8001488:	88fb      	ldrh	r3, [r7, #6]
 800148a:	4619      	mov	r1, r3
 800148c:	480e      	ldr	r0, [pc, #56]	; (80014c8 <gsm_msg_delete+0xa0>)
 800148e:	f7ff f8f1 	bl	8000674 <gsm_printf>
    gsm_unlock();
 8001492:	f7ff f9ad 	bl	80007f0 <gsm_unlock>
    return true;
 8001496:	2301      	movs	r3, #1
 8001498:	e007      	b.n	80014aa <gsm_msg_delete+0x82>
  }
  gsm_printf("[GSM] msg_delete(%d) failed!\r\n", index);
 800149a:	88fb      	ldrh	r3, [r7, #6]
 800149c:	4619      	mov	r1, r3
 800149e:	4805      	ldr	r0, [pc, #20]	; (80014b4 <gsm_msg_delete+0x8c>)
 80014a0:	f7ff f8e8 	bl	8000674 <gsm_printf>
  gsm_unlock();
 80014a4:	f7ff f9a4 	bl	80007f0 <gsm_unlock>
  return false;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3728      	adds	r7, #40	; 0x28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	080073e0 	.word	0x080073e0
 80014b8:	08007400 	.word	0x08007400
 80014bc:	08007158 	.word	0x08007158
 80014c0:	080071f8 	.word	0x080071f8
 80014c4:	200000bc 	.word	0x200000bc
 80014c8:	08007410 	.word	0x08007410

080014cc <gsm_msg_selectStorage>:
    return false;
  }
}
//###############################################################################################################
bool gsm_msg_selectStorage(gsm_msg_store_t gsm_msg_store_)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b096      	sub	sp, #88	; 0x58
 80014d0:	af04      	add	r7, sp, #16
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
  if (gsm_lock(10000) == false)
 80014d6:	f242 7010 	movw	r0, #10000	; 0x2710
 80014da:	f7ff f965 	bl	80007a8 <gsm_lock>
 80014de:	4603      	mov	r3, r0
 80014e0:	f083 0301 	eor.w	r3, r3, #1
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d004      	beq.n	80014f4 <gsm_msg_selectStorage+0x28>
  {
    gsm_printf("[GSM] msg_selectStorage() failed!\r\n");
 80014ea:	4835      	ldr	r0, [pc, #212]	; (80015c0 <gsm_msg_selectStorage+0xf4>)
 80014ec:	f7ff f8c2 	bl	8000674 <gsm_printf>
    return false;
 80014f0:	2300      	movs	r3, #0
 80014f2:	e061      	b.n	80015b8 <gsm_msg_selectStorage+0xec>
  }
  char str[64];
  switch (gsm_msg_store_)
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	2b04      	cmp	r3, #4
 80014fa:	d830      	bhi.n	800155e <gsm_msg_selectStorage+0x92>
 80014fc:	a201      	add	r2, pc, #4	; (adr r2, 8001504 <gsm_msg_selectStorage+0x38>)
 80014fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001502:	bf00      	nop
 8001504:	08001519 	.word	0x08001519
 8001508:	08001527 	.word	0x08001527
 800150c:	08001535 	.word	0x08001535
 8001510:	08001543 	.word	0x08001543
 8001514:	08001551 	.word	0x08001551
  {
  case gsm_msg_store_simcard:
    sprintf(str, "AT+CPMS=\"SM\",\"SM\",\"SM\"\r\n");
 8001518:	f107 0308 	add.w	r3, r7, #8
 800151c:	4929      	ldr	r1, [pc, #164]	; (80015c4 <gsm_msg_selectStorage+0xf8>)
 800151e:	4618      	mov	r0, r3
 8001520:	f003 fbc2 	bl	8004ca8 <siprintf>
    break;
 8001524:	e022      	b.n	800156c <gsm_msg_selectStorage+0xa0>
  case gsm_msg_store_module:
    sprintf(str, "AT+CPMS=\"ME\",\"ME\",\"ME\"\r\n");
 8001526:	f107 0308 	add.w	r3, r7, #8
 800152a:	4927      	ldr	r1, [pc, #156]	; (80015c8 <gsm_msg_selectStorage+0xfc>)
 800152c:	4618      	mov	r0, r3
 800152e:	f003 fbbb 	bl	8004ca8 <siprintf>
    break;
 8001532:	e01b      	b.n	800156c <gsm_msg_selectStorage+0xa0>
  case gsm_msg_store_simcard_preferred:
    sprintf(str, "AT+CPMS=\"SM_P\",\"SM_P\",\"SM_P\"\r\n");
 8001534:	f107 0308 	add.w	r3, r7, #8
 8001538:	4924      	ldr	r1, [pc, #144]	; (80015cc <gsm_msg_selectStorage+0x100>)
 800153a:	4618      	mov	r0, r3
 800153c:	f003 fbb4 	bl	8004ca8 <siprintf>
    break;
 8001540:	e014      	b.n	800156c <gsm_msg_selectStorage+0xa0>
  case gsm_msg_store_module_preferred:
    sprintf(str, "AT+CPMS=\"ME_P\",\"ME_P\",\"ME_P\"\r\n");
 8001542:	f107 0308 	add.w	r3, r7, #8
 8001546:	4922      	ldr	r1, [pc, #136]	; (80015d0 <gsm_msg_selectStorage+0x104>)
 8001548:	4618      	mov	r0, r3
 800154a:	f003 fbad 	bl	8004ca8 <siprintf>
    break;
 800154e:	e00d      	b.n	800156c <gsm_msg_selectStorage+0xa0>
  case gsm_msg_store_simcard_or_module:
    sprintf(str, "AT+CPMS=\"MT\",\"MT\",\"MT\"\r\n");
 8001550:	f107 0308 	add.w	r3, r7, #8
 8001554:	491f      	ldr	r1, [pc, #124]	; (80015d4 <gsm_msg_selectStorage+0x108>)
 8001556:	4618      	mov	r0, r3
 8001558:	f003 fba6 	bl	8004ca8 <siprintf>
    break;
 800155c:	e006      	b.n	800156c <gsm_msg_selectStorage+0xa0>
  default:
    gsm_printf("[GSM] msg_selectStorage() failed!\r\n");
 800155e:	4818      	ldr	r0, [pc, #96]	; (80015c0 <gsm_msg_selectStorage+0xf4>)
 8001560:	f7ff f888 	bl	8000674 <gsm_printf>
    gsm_unlock();
 8001564:	f7ff f944 	bl	80007f0 <gsm_unlock>
    return false;
 8001568:	2300      	movs	r3, #0
 800156a:	e025      	b.n	80015b8 <gsm_msg_selectStorage+0xec>
  }
  if (gsm_command(str, 1000 , NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n") != 1)
 800156c:	f107 0108 	add.w	r1, r7, #8
 8001570:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <gsm_msg_selectStorage+0x10c>)
 8001572:	9303      	str	r3, [sp, #12]
 8001574:	4b19      	ldr	r3, [pc, #100]	; (80015dc <gsm_msg_selectStorage+0x110>)
 8001576:	9302      	str	r3, [sp, #8]
 8001578:	2302      	movs	r3, #2
 800157a:	9301      	str	r3, [sp, #4]
 800157c:	2300      	movs	r3, #0
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	2300      	movs	r3, #0
 8001582:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001586:	4816      	ldr	r0, [pc, #88]	; (80015e0 <gsm_msg_selectStorage+0x114>)
 8001588:	f7fe ff5c 	bl	8000444 <atc_command>
 800158c:	4603      	mov	r3, r0
 800158e:	2b01      	cmp	r3, #1
 8001590:	d006      	beq.n	80015a0 <gsm_msg_selectStorage+0xd4>
  {
    gsm_printf("[GSM] msg_selectStorage() failed!\r\n");
 8001592:	480b      	ldr	r0, [pc, #44]	; (80015c0 <gsm_msg_selectStorage+0xf4>)
 8001594:	f7ff f86e 	bl	8000674 <gsm_printf>
    gsm_unlock();
 8001598:	f7ff f92a 	bl	80007f0 <gsm_unlock>
    return false;
 800159c:	2300      	movs	r3, #0
 800159e:	e00b      	b.n	80015b8 <gsm_msg_selectStorage+0xec>
  }
  gsm.msg.storage = gsm_msg_store_;
 80015a0:	4a10      	ldr	r2, [pc, #64]	; (80015e4 <gsm_msg_selectStorage+0x118>)
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	f882 3856 	strb.w	r3, [r2, #2134]	; 0x856
  gsm_printf("[GSM] msg_selectStorage() done\r\n");
 80015a8:	480f      	ldr	r0, [pc, #60]	; (80015e8 <gsm_msg_selectStorage+0x11c>)
 80015aa:	f7ff f863 	bl	8000674 <gsm_printf>
  gsm_unlock();
 80015ae:	f7ff f91f 	bl	80007f0 <gsm_unlock>
  gsm_msg_updateStorage();
 80015b2:	f7ff fdef 	bl	8001194 <gsm_msg_updateStorage>
  return true;
 80015b6:	2301      	movs	r3, #1
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3748      	adds	r7, #72	; 0x48
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	080074ac 	.word	0x080074ac
 80015c4:	080074d0 	.word	0x080074d0
 80015c8:	080074ec 	.word	0x080074ec
 80015cc:	08007508 	.word	0x08007508
 80015d0:	08007528 	.word	0x08007528
 80015d4:	08007548 	.word	0x08007548
 80015d8:	08007158 	.word	0x08007158
 80015dc:	080071f8 	.word	0x080071f8
 80015e0:	200000bc 	.word	0x200000bc
 80015e4:	200000b4 	.word	0x200000b4
 80015e8:	08007564 	.word	0x08007564

080015ec <gsm_msg_selectCharacterSet>:
//###############################################################################################################
bool gsm_msg_selectCharacterSet(gsm_msg_chset_t gsm_msg_chSet_)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b096      	sub	sp, #88	; 0x58
 80015f0:	af04      	add	r7, sp, #16
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
  if (gsm_lock(10000) == false)
 80015f6:	f242 7010 	movw	r0, #10000	; 0x2710
 80015fa:	f7ff f8d5 	bl	80007a8 <gsm_lock>
 80015fe:	4603      	mov	r3, r0
 8001600:	f083 0301 	eor.w	r3, r3, #1
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d004      	beq.n	8001614 <gsm_msg_selectCharacterSet+0x28>
  {
    gsm_printf("[GSM] msg_selectCharacterSet() failed!\r\n");
 800160a:	483d      	ldr	r0, [pc, #244]	; (8001700 <gsm_msg_selectCharacterSet+0x114>)
 800160c:	f7ff f832 	bl	8000674 <gsm_printf>
    return false;
 8001610:	2300      	movs	r3, #0
 8001612:	e071      	b.n	80016f8 <gsm_msg_selectCharacterSet+0x10c>
  }
  char str[64];
  switch (gsm_msg_chSet_)
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	3b01      	subs	r3, #1
 8001618:	2b06      	cmp	r3, #6
 800161a:	d842      	bhi.n	80016a2 <gsm_msg_selectCharacterSet+0xb6>
 800161c:	a201      	add	r2, pc, #4	; (adr r2, 8001624 <gsm_msg_selectCharacterSet+0x38>)
 800161e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001622:	bf00      	nop
 8001624:	0800164f 	.word	0x0800164f
 8001628:	08001687 	.word	0x08001687
 800162c:	0800165d 	.word	0x0800165d
 8001630:	08001679 	.word	0x08001679
 8001634:	0800166b 	.word	0x0800166b
 8001638:	08001695 	.word	0x08001695
 800163c:	08001641 	.word	0x08001641
  {
  case gsm_msg_chSet_8859_1:
    sprintf(str, "AT+CSCS=\"8859-1\"\r\n");
 8001640:	f107 0308 	add.w	r3, r7, #8
 8001644:	492f      	ldr	r1, [pc, #188]	; (8001704 <gsm_msg_selectCharacterSet+0x118>)
 8001646:	4618      	mov	r0, r3
 8001648:	f003 fb2e 	bl	8004ca8 <siprintf>
    break;
 800164c:	e030      	b.n	80016b0 <gsm_msg_selectCharacterSet+0xc4>
  case gsm_msg_chSet_gsm:
    sprintf(str, "AT+CSCS=\"GSM\"\r\n");
 800164e:	f107 0308 	add.w	r3, r7, #8
 8001652:	492d      	ldr	r1, [pc, #180]	; (8001708 <gsm_msg_selectCharacterSet+0x11c>)
 8001654:	4618      	mov	r0, r3
 8001656:	f003 fb27 	bl	8004ca8 <siprintf>
    break;
 800165a:	e029      	b.n	80016b0 <gsm_msg_selectCharacterSet+0xc4>
  case gsm_msg_chSet_ira:
    sprintf(str, "AT+CSCS=\"IRA\"\r\n");
 800165c:	f107 0308 	add.w	r3, r7, #8
 8001660:	492a      	ldr	r1, [pc, #168]	; (800170c <gsm_msg_selectCharacterSet+0x120>)
 8001662:	4618      	mov	r0, r3
 8001664:	f003 fb20 	bl	8004ca8 <siprintf>
    break;
 8001668:	e022      	b.n	80016b0 <gsm_msg_selectCharacterSet+0xc4>
  case gsm_msg_chSet_pccp:
    sprintf(str, "AT+CSCS=\"PCCP\"\r\n");
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	4928      	ldr	r1, [pc, #160]	; (8001710 <gsm_msg_selectCharacterSet+0x124>)
 8001670:	4618      	mov	r0, r3
 8001672:	f003 fb19 	bl	8004ca8 <siprintf>
    break;
 8001676:	e01b      	b.n	80016b0 <gsm_msg_selectCharacterSet+0xc4>
  case gsm_msg_chSet_hex:
    sprintf(str, "AT+CSCS=\"HEX\"\r\n");
 8001678:	f107 0308 	add.w	r3, r7, #8
 800167c:	4925      	ldr	r1, [pc, #148]	; (8001714 <gsm_msg_selectCharacterSet+0x128>)
 800167e:	4618      	mov	r0, r3
 8001680:	f003 fb12 	bl	8004ca8 <siprintf>
    break;
 8001684:	e014      	b.n	80016b0 <gsm_msg_selectCharacterSet+0xc4>
  case gsm_msg_chSet_ucs2:
    sprintf(str, "AT+CSCS=\"UCS2\"\r\n");
 8001686:	f107 0308 	add.w	r3, r7, #8
 800168a:	4923      	ldr	r1, [pc, #140]	; (8001718 <gsm_msg_selectCharacterSet+0x12c>)
 800168c:	4618      	mov	r0, r3
 800168e:	f003 fb0b 	bl	8004ca8 <siprintf>
    break;
 8001692:	e00d      	b.n	80016b0 <gsm_msg_selectCharacterSet+0xc4>
  case gsm_msg_chSet_pcdn:
    sprintf(str, "AT+CSCS=\"PCDN\"\r\n");
 8001694:	f107 0308 	add.w	r3, r7, #8
 8001698:	4920      	ldr	r1, [pc, #128]	; (800171c <gsm_msg_selectCharacterSet+0x130>)
 800169a:	4618      	mov	r0, r3
 800169c:	f003 fb04 	bl	8004ca8 <siprintf>
    break;
 80016a0:	e006      	b.n	80016b0 <gsm_msg_selectCharacterSet+0xc4>
  default:
    gsm_printf("[GSM] msg_selectCharacterSet() failed!\r\n");
 80016a2:	4817      	ldr	r0, [pc, #92]	; (8001700 <gsm_msg_selectCharacterSet+0x114>)
 80016a4:	f7fe ffe6 	bl	8000674 <gsm_printf>
    gsm_unlock();
 80016a8:	f7ff f8a2 	bl	80007f0 <gsm_unlock>
    return false;
 80016ac:	2300      	movs	r3, #0
 80016ae:	e023      	b.n	80016f8 <gsm_msg_selectCharacterSet+0x10c>
  }
  if (gsm_command(str, 1000 , NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n") != 1)
 80016b0:	f107 0108 	add.w	r1, r7, #8
 80016b4:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <gsm_msg_selectCharacterSet+0x134>)
 80016b6:	9303      	str	r3, [sp, #12]
 80016b8:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <gsm_msg_selectCharacterSet+0x138>)
 80016ba:	9302      	str	r3, [sp, #8]
 80016bc:	2302      	movs	r3, #2
 80016be:	9301      	str	r3, [sp, #4]
 80016c0:	2300      	movs	r3, #0
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	2300      	movs	r3, #0
 80016c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016ca:	4817      	ldr	r0, [pc, #92]	; (8001728 <gsm_msg_selectCharacterSet+0x13c>)
 80016cc:	f7fe feba 	bl	8000444 <atc_command>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d006      	beq.n	80016e4 <gsm_msg_selectCharacterSet+0xf8>
  {
    gsm_printf("[GSM] msg_selectCharacterSet() failed!\r\n");
 80016d6:	480a      	ldr	r0, [pc, #40]	; (8001700 <gsm_msg_selectCharacterSet+0x114>)
 80016d8:	f7fe ffcc 	bl	8000674 <gsm_printf>
    gsm_unlock();
 80016dc:	f7ff f888 	bl	80007f0 <gsm_unlock>
    return false;
 80016e0:	2300      	movs	r3, #0
 80016e2:	e009      	b.n	80016f8 <gsm_msg_selectCharacterSet+0x10c>
  }
  gsm.msg.characterSet = gsm_msg_chSet_;
 80016e4:	4a11      	ldr	r2, [pc, #68]	; (800172c <gsm_msg_selectCharacterSet+0x140>)
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	f882 3855 	strb.w	r3, [r2, #2133]	; 0x855
  gsm_printf("[GSM] msg_selectCharacterSet() done\r\n");
 80016ec:	4810      	ldr	r0, [pc, #64]	; (8001730 <gsm_msg_selectCharacterSet+0x144>)
 80016ee:	f7fe ffc1 	bl	8000674 <gsm_printf>
  gsm_unlock();
 80016f2:	f7ff f87d 	bl	80007f0 <gsm_unlock>
  return true;
 80016f6:	2301      	movs	r3, #1
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3748      	adds	r7, #72	; 0x48
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	08007588 	.word	0x08007588
 8001704:	080075b4 	.word	0x080075b4
 8001708:	080075c8 	.word	0x080075c8
 800170c:	080075d8 	.word	0x080075d8
 8001710:	080075e8 	.word	0x080075e8
 8001714:	080075fc 	.word	0x080075fc
 8001718:	0800760c 	.word	0x0800760c
 800171c:	08007620 	.word	0x08007620
 8001720:	08007158 	.word	0x08007158
 8001724:	080071f8 	.word	0x080071f8
 8001728:	200000bc 	.word	0x200000bc
 800172c:	200000b4 	.word	0x200000b4
 8001730:	08007634 	.word	0x08007634

08001734 <gsm_msg_read>:
//###############################################################################################################
bool gsm_msg_read(uint16_t index)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b094      	sub	sp, #80	; 0x50
 8001738:	af06      	add	r7, sp, #24
 800173a:	4603      	mov	r3, r0
 800173c:	80fb      	strh	r3, [r7, #6]
  if (gsm_lock(10000) == false)
 800173e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001742:	f7ff f831 	bl	80007a8 <gsm_lock>
 8001746:	4603      	mov	r3, r0
 8001748:	f083 0301 	eor.w	r3, r3, #1
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d006      	beq.n	8001760 <gsm_msg_read+0x2c>
  {
    gsm_printf("[GSM] msg_read(%d) failed!\r\n", index);
 8001752:	88fb      	ldrh	r3, [r7, #6]
 8001754:	4619      	mov	r1, r3
 8001756:	4869      	ldr	r0, [pc, #420]	; (80018fc <gsm_msg_read+0x1c8>)
 8001758:	f7fe ff8c 	bl	8000674 <gsm_printf>
    return false;
 800175c:	2300      	movs	r3, #0
 800175e:	e0c8      	b.n	80018f2 <gsm_msg_read+0x1be>
  }
  //  +++ text mode
  if (gsm.msg.textMode == 1)
 8001760:	4b67      	ldr	r3, [pc, #412]	; (8001900 <gsm_msg_read+0x1cc>)
 8001762:	f893 3854 	ldrb.w	r3, [r3, #2132]	; 0x854
 8001766:	2b01      	cmp	r3, #1
 8001768:	f040 80b2 	bne.w	80018d0 <gsm_msg_read+0x19c>
  {
    char str[20];
    uint16_t d[6];
    sprintf(str, "AT+CMGR=%d\r\n", index);
 800176c:	88fa      	ldrh	r2, [r7, #6]
 800176e:	f107 0318 	add.w	r3, r7, #24
 8001772:	4964      	ldr	r1, [pc, #400]	; (8001904 <gsm_msg_read+0x1d0>)
 8001774:	4618      	mov	r0, r3
 8001776:	f003 fa97 	bl	8004ca8 <siprintf>
    if (gsm_command(str, 5000, (char* )gsm.buffer, sizeof(gsm.buffer), 3, "\r\n+CMGR:", "\r\nOK\r\n", "\r\nERROR\r\n")
 800177a:	f107 0118 	add.w	r1, r7, #24
 800177e:	4b62      	ldr	r3, [pc, #392]	; (8001908 <gsm_msg_read+0x1d4>)
 8001780:	9304      	str	r3, [sp, #16]
 8001782:	4b62      	ldr	r3, [pc, #392]	; (800190c <gsm_msg_read+0x1d8>)
 8001784:	9303      	str	r3, [sp, #12]
 8001786:	4b62      	ldr	r3, [pc, #392]	; (8001910 <gsm_msg_read+0x1dc>)
 8001788:	9302      	str	r3, [sp, #8]
 800178a:	2303      	movs	r3, #3
 800178c:	9301      	str	r3, [sp, #4]
 800178e:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	4b5f      	ldr	r3, [pc, #380]	; (8001914 <gsm_msg_read+0x1e0>)
 8001796:	f241 3288 	movw	r2, #5000	; 0x1388
 800179a:	485f      	ldr	r0, [pc, #380]	; (8001918 <gsm_msg_read+0x1e4>)
 800179c:	f7fe fe52 	bl	8000444 <atc_command>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d008      	beq.n	80017b8 <gsm_msg_read+0x84>
        != 1)
    {
      gsm_printf("[GSM] msg_read(%d) failed!\r\n", index);
 80017a6:	88fb      	ldrh	r3, [r7, #6]
 80017a8:	4619      	mov	r1, r3
 80017aa:	4854      	ldr	r0, [pc, #336]	; (80018fc <gsm_msg_read+0x1c8>)
 80017ac:	f7fe ff62 	bl	8000674 <gsm_printf>
      gsm_unlock();
 80017b0:	f7ff f81e 	bl	80007f0 <gsm_unlock>
      return false;
 80017b4:	2300      	movs	r3, #0
 80017b6:	e09c      	b.n	80018f2 <gsm_msg_read+0x1be>
    }
    sscanf((char*) gsm.buffer, "\r\n+CMGR: \"%[^\"]\",\"%[^\"]\",\"\",\"%hd/%hd/%hd,%hd:%hd:%hd%*d\"", gsm.msg.status,
 80017b8:	f107 030c 	add.w	r3, r7, #12
 80017bc:	330a      	adds	r3, #10
 80017be:	9305      	str	r3, [sp, #20]
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	3308      	adds	r3, #8
 80017c6:	9304      	str	r3, [sp, #16]
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	3306      	adds	r3, #6
 80017ce:	9303      	str	r3, [sp, #12]
 80017d0:	f107 030c 	add.w	r3, r7, #12
 80017d4:	3304      	adds	r3, #4
 80017d6:	9302      	str	r3, [sp, #8]
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	3302      	adds	r3, #2
 80017de:	9301      	str	r3, [sp, #4]
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	4b4d      	ldr	r3, [pc, #308]	; (800191c <gsm_msg_read+0x1e8>)
 80017e8:	4a4d      	ldr	r2, [pc, #308]	; (8001920 <gsm_msg_read+0x1ec>)
 80017ea:	494e      	ldr	r1, [pc, #312]	; (8001924 <gsm_msg_read+0x1f0>)
 80017ec:	4849      	ldr	r0, [pc, #292]	; (8001914 <gsm_msg_read+0x1e0>)
 80017ee:	f003 fa7b 	bl	8004ce8 <siscanf>
        gsm.msg.number, &d[0], &d[1], &d[2], &d[3], &d[4], &d[5]);
    gsm.msg.time.year = d[0];
 80017f2:	89bb      	ldrh	r3, [r7, #12]
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	4b42      	ldr	r3, [pc, #264]	; (8001900 <gsm_msg_read+0x1cc>)
 80017f8:	f883 285c 	strb.w	r2, [r3, #2140]	; 0x85c
    gsm.msg.time.month = d[1];
 80017fc:	89fb      	ldrh	r3, [r7, #14]
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	4b3f      	ldr	r3, [pc, #252]	; (8001900 <gsm_msg_read+0x1cc>)
 8001802:	f883 285d 	strb.w	r2, [r3, #2141]	; 0x85d
    gsm.msg.time.day = d[2];
 8001806:	8a3b      	ldrh	r3, [r7, #16]
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4b3d      	ldr	r3, [pc, #244]	; (8001900 <gsm_msg_read+0x1cc>)
 800180c:	f883 285e 	strb.w	r2, [r3, #2142]	; 0x85e
    gsm.msg.time.hour = d[3];
 8001810:	8a7b      	ldrh	r3, [r7, #18]
 8001812:	b2da      	uxtb	r2, r3
 8001814:	4b3a      	ldr	r3, [pc, #232]	; (8001900 <gsm_msg_read+0x1cc>)
 8001816:	f883 285f 	strb.w	r2, [r3, #2143]	; 0x85f
    gsm.msg.time.minute = d[4];
 800181a:	8abb      	ldrh	r3, [r7, #20]
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4b38      	ldr	r3, [pc, #224]	; (8001900 <gsm_msg_read+0x1cc>)
 8001820:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
    gsm.msg.time.second = d[5];
 8001824:	8afb      	ldrh	r3, [r7, #22]
 8001826:	b2da      	uxtb	r2, r3
 8001828:	4b35      	ldr	r3, [pc, #212]	; (8001900 <gsm_msg_read+0x1cc>)
 800182a:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861
    uint8_t cnt = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    char *s = strtok((char*) gsm.buffer, "\"");
 8001834:	493c      	ldr	r1, [pc, #240]	; (8001928 <gsm_msg_read+0x1f4>)
 8001836:	4837      	ldr	r0, [pc, #220]	; (8001914 <gsm_msg_read+0x1e0>)
 8001838:	f003 faf8 	bl	8004e2c <strtok>
 800183c:	6338      	str	r0, [r7, #48]	; 0x30
    while (s != NULL)
 800183e:	e043      	b.n	80018c8 <gsm_msg_read+0x194>
    {
      s = strtok(NULL, "\"");
 8001840:	4939      	ldr	r1, [pc, #228]	; (8001928 <gsm_msg_read+0x1f4>)
 8001842:	2000      	movs	r0, #0
 8001844:	f003 faf2 	bl	8004e2c <strtok>
 8001848:	6338      	str	r0, [r7, #48]	; 0x30
      if (cnt == 6)
 800184a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800184e:	2b06      	cmp	r3, #6
 8001850:	d135      	bne.n	80018be <gsm_msg_read+0x18a>
      {
        s += 2;
 8001852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001854:	3302      	adds	r3, #2
 8001856:	633b      	str	r3, [r7, #48]	; 0x30
        char *end = strstr(s, "\r\nOK\r\n");
 8001858:	492c      	ldr	r1, [pc, #176]	; (800190c <gsm_msg_read+0x1d8>)
 800185a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800185c:	f003 face 	bl	8004dfc <strstr>
 8001860:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (end != NULL)
 8001862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001864:	2b00      	cmp	r3, #0
 8001866:	d021      	beq.n	80018ac <gsm_msg_read+0x178>
        {
          strncpy((char*) &gsm.buffer[0], s, end - s);
 8001868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800186a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	461a      	mov	r2, r3
 8001870:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001872:	4828      	ldr	r0, [pc, #160]	; (8001914 <gsm_msg_read+0x1e0>)
 8001874:	f003 faaf 	bl	8004dd6 <strncpy>
          memset(&gsm.buffer[end - s], 0, sizeof(gsm.buffer) - (end - s));
 8001878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800187a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8001882:	4a1f      	ldr	r2, [pc, #124]	; (8001900 <gsm_msg_read+0x1cc>)
 8001884:	4413      	add	r3, r2
 8001886:	1d18      	adds	r0, r3, #4
 8001888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800188a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	f5c3 737c 	rsb	r3, r3, #1008	; 0x3f0
 8001892:	461a      	mov	r2, r3
 8001894:	2100      	movs	r1, #0
 8001896:	f003 f93b 	bl	8004b10 <memset>
          gsm_printf("[GSM] msg_read(%d) done\r\n", index);
 800189a:	88fb      	ldrh	r3, [r7, #6]
 800189c:	4619      	mov	r1, r3
 800189e:	4823      	ldr	r0, [pc, #140]	; (800192c <gsm_msg_read+0x1f8>)
 80018a0:	f7fe fee8 	bl	8000674 <gsm_printf>
          gsm_unlock();
 80018a4:	f7fe ffa4 	bl	80007f0 <gsm_unlock>
          return true;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e022      	b.n	80018f2 <gsm_msg_read+0x1be>
        }
        else
        {
          gsm_printf("[GSM] msg_read(%d) failed!\r\n", index);
 80018ac:	88fb      	ldrh	r3, [r7, #6]
 80018ae:	4619      	mov	r1, r3
 80018b0:	4812      	ldr	r0, [pc, #72]	; (80018fc <gsm_msg_read+0x1c8>)
 80018b2:	f7fe fedf 	bl	8000674 <gsm_printf>
          gsm_unlock();
 80018b6:	f7fe ff9b 	bl	80007f0 <gsm_unlock>
          return false;
 80018ba:	2300      	movs	r3, #0
 80018bc:	e019      	b.n	80018f2 <gsm_msg_read+0x1be>
        }
      }
      cnt++;
 80018be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80018c2:	3301      	adds	r3, #1
 80018c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while (s != NULL)
 80018c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1b8      	bne.n	8001840 <gsm_msg_read+0x10c>
 80018ce:	e008      	b.n	80018e2 <gsm_msg_read+0x1ae>
  //  --- text mode

  //  +++ pdu mode
  else
  {
    gsm_printf("[GSM] msg_read(%d) failed!\r\n", index);
 80018d0:	88fb      	ldrh	r3, [r7, #6]
 80018d2:	4619      	mov	r1, r3
 80018d4:	4809      	ldr	r0, [pc, #36]	; (80018fc <gsm_msg_read+0x1c8>)
 80018d6:	f7fe fecd 	bl	8000674 <gsm_printf>
    gsm_unlock();
 80018da:	f7fe ff89 	bl	80007f0 <gsm_unlock>
    return false;
 80018de:	2300      	movs	r3, #0
 80018e0:	e007      	b.n	80018f2 <gsm_msg_read+0x1be>
  }
  //  --- pdu mode

  gsm_printf("[GSM] msg_read(%d) failed!\r\n", index);
 80018e2:	88fb      	ldrh	r3, [r7, #6]
 80018e4:	4619      	mov	r1, r3
 80018e6:	4805      	ldr	r0, [pc, #20]	; (80018fc <gsm_msg_read+0x1c8>)
 80018e8:	f7fe fec4 	bl	8000674 <gsm_printf>
  gsm_unlock();
 80018ec:	f7fe ff80 	bl	80007f0 <gsm_unlock>
  return false;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3738      	adds	r7, #56	; 0x38
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	0800765c 	.word	0x0800765c
 8001900:	200000b4 	.word	0x200000b4
 8001904:	0800767c 	.word	0x0800767c
 8001908:	08007158 	.word	0x08007158
 800190c:	080071f8 	.word	0x080071f8
 8001910:	0800768c 	.word	0x0800768c
 8001914:	20000518 	.word	0x20000518
 8001918:	200000bc 	.word	0x200000bc
 800191c:	20000928 	.word	0x20000928
 8001920:	20000918 	.word	0x20000918
 8001924:	08007698 	.word	0x08007698
 8001928:	080076d4 	.word	0x080076d4
 800192c:	080076d8 	.word	0x080076d8

08001930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001934:	f000 fbce 	bl	80020d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001938:	f000 f80b 	bl	8001952 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800193c:	f000 f8f0 	bl	8001b20 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001940:	f000 f89a 	bl	8001a78 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001944:	f000 f8c2 	bl	8001acc <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8001948:	f000 f848 	bl	80019dc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
userMain();
 800194c:	f000 fb4a 	bl	8001fe4 <userMain>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001950:	e7fe      	b.n	8001950 <main+0x20>

08001952 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b090      	sub	sp, #64	; 0x40
 8001956:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001958:	f107 0318 	add.w	r3, r7, #24
 800195c:	2228      	movs	r2, #40	; 0x28
 800195e:	2100      	movs	r1, #0
 8001960:	4618      	mov	r0, r3
 8001962:	f003 f8d5 	bl	8004b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001974:	2301      	movs	r3, #1
 8001976:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001978:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800197c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800197e:	2300      	movs	r3, #0
 8001980:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001982:	2301      	movs	r3, #1
 8001984:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001986:	2302      	movs	r3, #2
 8001988:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800198a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800198e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001990:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001994:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001996:	f107 0318 	add.w	r3, r7, #24
 800199a:	4618      	mov	r0, r3
 800199c:	f001 f89c 	bl	8002ad8 <HAL_RCC_OscConfig>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <SystemClock_Config+0x58>
  {
    Error_Handler();
 80019a6:	f000 f913 	bl	8001bd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019aa:	230f      	movs	r3, #15
 80019ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019ae:	2302      	movs	r3, #2
 80019b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	2102      	movs	r1, #2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f001 fbf7 	bl	80031b8 <HAL_RCC_ClockConfig>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80019d0:	f000 f8fe 	bl	8001bd0 <Error_Handler>
  }
}
 80019d4:	bf00      	nop
 80019d6:	3740      	adds	r7, #64	; 0x40
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019e2:	f107 0308 	add.w	r3, r7, #8
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f0:	463b      	mov	r3, r7
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019f8:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <MX_TIM4_Init+0x94>)
 80019fa:	4a1e      	ldr	r2, [pc, #120]	; (8001a74 <MX_TIM4_Init+0x98>)
 80019fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4999;
 80019fe:	4b1c      	ldr	r3, [pc, #112]	; (8001a70 <MX_TIM4_Init+0x94>)
 8001a00:	f241 3287 	movw	r2, #4999	; 0x1387
 8001a04:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a06:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <MX_TIM4_Init+0x94>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1439;
 8001a0c:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <MX_TIM4_Init+0x94>)
 8001a0e:	f240 529f 	movw	r2, #1439	; 0x59f
 8001a12:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a14:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <MX_TIM4_Init+0x94>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <MX_TIM4_Init+0x94>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a20:	4813      	ldr	r0, [pc, #76]	; (8001a70 <MX_TIM4_Init+0x94>)
 8001a22:	f001 fe09 	bl	8003638 <HAL_TIM_Base_Init>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001a2c:	f000 f8d0 	bl	8001bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a36:	f107 0308 	add.w	r3, r7, #8
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	480c      	ldr	r0, [pc, #48]	; (8001a70 <MX_TIM4_Init+0x94>)
 8001a3e:	f001 ffad 	bl	800399c <HAL_TIM_ConfigClockSource>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001a48:	f000 f8c2 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a50:	2300      	movs	r3, #0
 8001a52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a54:	463b      	mov	r3, r7
 8001a56:	4619      	mov	r1, r3
 8001a58:	4805      	ldr	r0, [pc, #20]	; (8001a70 <MX_TIM4_Init+0x94>)
 8001a5a:	f002 fb5f 	bl	800411c <HAL_TIMEx_MasterConfigSynchronization>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001a64:	f000 f8b4 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a68:	bf00      	nop
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	200009e0 	.word	0x200009e0
 8001a74:	40000800 	.word	0x40000800

08001a78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a7e:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <MX_USART2_UART_Init+0x50>)
 8001a80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a96:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a9c:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a9e:	220c      	movs	r2, #12
 8001aa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aae:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001ab0:	f002 fbf0 	bl	8004294 <HAL_UART_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001aba:	f000 f889 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000a68 	.word	0x20000a68
 8001ac8:	40004400 	.word	0x40004400

08001acc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001ad2:	4a12      	ldr	r2, [pc, #72]	; (8001b1c <MX_USART3_UART_Init+0x50>)
 8001ad4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001ad8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001adc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001aea:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001af2:	220c      	movs	r2, #12
 8001af4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001af6:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b02:	4805      	ldr	r0, [pc, #20]	; (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001b04:	f002 fbc6 	bl	8004294 <HAL_UART_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b0e:	f000 f85f 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000a28 	.word	0x20000a28
 8001b1c:	40004800 	.word	0x40004800

08001b20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b26:	f107 0310 	add.w	r3, r7, #16
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b34:	4b24      	ldr	r3, [pc, #144]	; (8001bc8 <MX_GPIO_Init+0xa8>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	4a23      	ldr	r2, [pc, #140]	; (8001bc8 <MX_GPIO_Init+0xa8>)
 8001b3a:	f043 0310 	orr.w	r3, r3, #16
 8001b3e:	6193      	str	r3, [r2, #24]
 8001b40:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <MX_GPIO_Init+0xa8>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	f003 0310 	and.w	r3, r3, #16
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b4c:	4b1e      	ldr	r3, [pc, #120]	; (8001bc8 <MX_GPIO_Init+0xa8>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	4a1d      	ldr	r2, [pc, #116]	; (8001bc8 <MX_GPIO_Init+0xa8>)
 8001b52:	f043 0320 	orr.w	r3, r3, #32
 8001b56:	6193      	str	r3, [r2, #24]
 8001b58:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <MX_GPIO_Init+0xa8>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	f003 0320 	and.w	r3, r3, #32
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b64:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <MX_GPIO_Init+0xa8>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	4a17      	ldr	r2, [pc, #92]	; (8001bc8 <MX_GPIO_Init+0xa8>)
 8001b6a:	f043 0304 	orr.w	r3, r3, #4
 8001b6e:	6193      	str	r3, [r2, #24]
 8001b70:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <MX_GPIO_Init+0xa8>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	607b      	str	r3, [r7, #4]
 8001b7a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7c:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <MX_GPIO_Init+0xa8>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	4a11      	ldr	r2, [pc, #68]	; (8001bc8 <MX_GPIO_Init+0xa8>)
 8001b82:	f043 0308 	orr.w	r3, r3, #8
 8001b86:	6193      	str	r3, [r2, #24]
 8001b88:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <MX_GPIO_Init+0xa8>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f003 0308 	and.w	r3, r3, #8
 8001b90:	603b      	str	r3, [r7, #0]
 8001b92:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b94:	2200      	movs	r2, #0
 8001b96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b9a:	480c      	ldr	r0, [pc, #48]	; (8001bcc <MX_GPIO_Init+0xac>)
 8001b9c:	f000 ff42 	bl	8002a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ba0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ba4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb2:	f107 0310 	add.w	r3, r7, #16
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4804      	ldr	r0, [pc, #16]	; (8001bcc <MX_GPIO_Init+0xac>)
 8001bba:	f000 fcc3 	bl	8002544 <HAL_GPIO_Init>

}
 8001bbe:	bf00      	nop
 8001bc0:	3720      	adds	r7, #32
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40011000 	.word	0x40011000

08001bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd4:	b672      	cpsid	i
}
 8001bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <Error_Handler+0x8>

08001bda <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
 8001be2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr
	...

08001bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bf6:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <HAL_MspInit+0x5c>)
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	4a14      	ldr	r2, [pc, #80]	; (8001c4c <HAL_MspInit+0x5c>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6193      	str	r3, [r2, #24]
 8001c02:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <HAL_MspInit+0x5c>)
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c0e:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <HAL_MspInit+0x5c>)
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	4a0e      	ldr	r2, [pc, #56]	; (8001c4c <HAL_MspInit+0x5c>)
 8001c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c18:	61d3      	str	r3, [r2, #28]
 8001c1a:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <HAL_MspInit+0x5c>)
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c26:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <HAL_MspInit+0x60>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <HAL_MspInit+0x60>)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c42:	bf00      	nop
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40010000 	.word	0x40010000

08001c54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a0d      	ldr	r2, [pc, #52]	; (8001c98 <HAL_TIM_Base_MspInit+0x44>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d113      	bne.n	8001c8e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c66:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <HAL_TIM_Base_MspInit+0x48>)
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	4a0c      	ldr	r2, [pc, #48]	; (8001c9c <HAL_TIM_Base_MspInit+0x48>)
 8001c6c:	f043 0304 	orr.w	r3, r3, #4
 8001c70:	61d3      	str	r3, [r2, #28]
 8001c72:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <HAL_TIM_Base_MspInit+0x48>)
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	f003 0304 	and.w	r3, r3, #4
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2100      	movs	r1, #0
 8001c82:	201e      	movs	r0, #30
 8001c84:	f000 fb98 	bl	80023b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c88:	201e      	movs	r0, #30
 8001c8a:	f000 fbc1 	bl	8002410 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c8e:	bf00      	nop
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40000800 	.word	0x40000800
 8001c9c:	40021000 	.word	0x40021000

08001ca0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	; 0x28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 0318 	add.w	r3, r7, #24
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a3f      	ldr	r2, [pc, #252]	; (8001db8 <HAL_UART_MspInit+0x118>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d138      	bne.n	8001d32 <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cc0:	4b3e      	ldr	r3, [pc, #248]	; (8001dbc <HAL_UART_MspInit+0x11c>)
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	4a3d      	ldr	r2, [pc, #244]	; (8001dbc <HAL_UART_MspInit+0x11c>)
 8001cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cca:	61d3      	str	r3, [r2, #28]
 8001ccc:	4b3b      	ldr	r3, [pc, #236]	; (8001dbc <HAL_UART_MspInit+0x11c>)
 8001cce:	69db      	ldr	r3, [r3, #28]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd8:	4b38      	ldr	r3, [pc, #224]	; (8001dbc <HAL_UART_MspInit+0x11c>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	4a37      	ldr	r2, [pc, #220]	; (8001dbc <HAL_UART_MspInit+0x11c>)
 8001cde:	f043 0304 	orr.w	r3, r3, #4
 8001ce2:	6193      	str	r3, [r2, #24]
 8001ce4:	4b35      	ldr	r3, [pc, #212]	; (8001dbc <HAL_UART_MspInit+0x11c>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cf0:	2304      	movs	r3, #4
 8001cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfc:	f107 0318 	add.w	r3, r7, #24
 8001d00:	4619      	mov	r1, r3
 8001d02:	482f      	ldr	r0, [pc, #188]	; (8001dc0 <HAL_UART_MspInit+0x120>)
 8001d04:	f000 fc1e 	bl	8002544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d08:	2308      	movs	r3, #8
 8001d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d14:	f107 0318 	add.w	r3, r7, #24
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4829      	ldr	r0, [pc, #164]	; (8001dc0 <HAL_UART_MspInit+0x120>)
 8001d1c:	f000 fc12 	bl	8002544 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d20:	2200      	movs	r2, #0
 8001d22:	2100      	movs	r1, #0
 8001d24:	2026      	movs	r0, #38	; 0x26
 8001d26:	f000 fb47 	bl	80023b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d2a:	2026      	movs	r0, #38	; 0x26
 8001d2c:	f000 fb70 	bl	8002410 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d30:	e03e      	b.n	8001db0 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART3)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a23      	ldr	r2, [pc, #140]	; (8001dc4 <HAL_UART_MspInit+0x124>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d139      	bne.n	8001db0 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d3c:	4b1f      	ldr	r3, [pc, #124]	; (8001dbc <HAL_UART_MspInit+0x11c>)
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	4a1e      	ldr	r2, [pc, #120]	; (8001dbc <HAL_UART_MspInit+0x11c>)
 8001d42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d46:	61d3      	str	r3, [r2, #28]
 8001d48:	4b1c      	ldr	r3, [pc, #112]	; (8001dbc <HAL_UART_MspInit+0x11c>)
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d54:	4b19      	ldr	r3, [pc, #100]	; (8001dbc <HAL_UART_MspInit+0x11c>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	4a18      	ldr	r2, [pc, #96]	; (8001dbc <HAL_UART_MspInit+0x11c>)
 8001d5a:	f043 0308 	orr.w	r3, r3, #8
 8001d5e:	6193      	str	r3, [r2, #24]
 8001d60:	4b16      	ldr	r3, [pc, #88]	; (8001dbc <HAL_UART_MspInit+0x11c>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d72:	2302      	movs	r3, #2
 8001d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d76:	2303      	movs	r3, #3
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7a:	f107 0318 	add.w	r3, r7, #24
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4811      	ldr	r0, [pc, #68]	; (8001dc8 <HAL_UART_MspInit+0x128>)
 8001d82:	f000 fbdf 	bl	8002544 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d94:	f107 0318 	add.w	r3, r7, #24
 8001d98:	4619      	mov	r1, r3
 8001d9a:	480b      	ldr	r0, [pc, #44]	; (8001dc8 <HAL_UART_MspInit+0x128>)
 8001d9c:	f000 fbd2 	bl	8002544 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001da0:	2200      	movs	r2, #0
 8001da2:	2100      	movs	r1, #0
 8001da4:	2027      	movs	r0, #39	; 0x27
 8001da6:	f000 fb07 	bl	80023b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001daa:	2027      	movs	r0, #39	; 0x27
 8001dac:	f000 fb30 	bl	8002410 <HAL_NVIC_EnableIRQ>
}
 8001db0:	bf00      	nop
 8001db2:	3728      	adds	r7, #40	; 0x28
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40004400 	.word	0x40004400
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40010800 	.word	0x40010800
 8001dc4:	40004800 	.word	0x40004800
 8001dc8:	40010c00 	.word	0x40010c00

08001dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <NMI_Handler+0x4>

08001dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd6:	e7fe      	b.n	8001dd6 <HardFault_Handler+0x4>

08001dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ddc:	e7fe      	b.n	8001ddc <MemManage_Handler+0x4>

08001dde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001de2:	e7fe      	b.n	8001de2 <BusFault_Handler+0x4>

08001de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de8:	e7fe      	b.n	8001de8 <UsageFault_Handler+0x4>

08001dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr

08001df6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr

08001e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr

08001e0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e12:	f000 f9a5 	bl	8002160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e20:	4802      	ldr	r0, [pc, #8]	; (8001e2c <TIM4_IRQHandler+0x10>)
 8001e22:	f001 fcb3 	bl	800378c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	200009e0 	.word	0x200009e0

08001e30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <USART2_IRQHandler+0x10>)
 8001e36:	f002 fb19 	bl	800446c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000a68 	.word	0x20000a68

08001e44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e48:	4802      	ldr	r0, [pc, #8]	; (8001e54 <USART3_IRQHandler+0x10>)
 8001e4a:	f002 fb0f 	bl	800446c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000a28 	.word	0x20000a28

08001e58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
	return 1;
 8001e5c:	2301      	movs	r3, #1
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr

08001e66 <_kill>:

int _kill(int pid, int sig)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e70:	f002 fe06 	bl	8004a80 <__errno>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2216      	movs	r2, #22
 8001e78:	601a      	str	r2, [r3, #0]
	return -1;
 8001e7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <_exit>:

void _exit (int status)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e8e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff ffe7 	bl	8001e66 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e98:	e7fe      	b.n	8001e98 <_exit+0x12>

08001e9a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b086      	sub	sp, #24
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	60f8      	str	r0, [r7, #12]
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	e00a      	b.n	8001ec2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001eac:	f3af 8000 	nop.w
 8001eb0:	4601      	mov	r1, r0
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	1c5a      	adds	r2, r3, #1
 8001eb6:	60ba      	str	r2, [r7, #8]
 8001eb8:	b2ca      	uxtb	r2, r1
 8001eba:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	dbf0      	blt.n	8001eac <_read+0x12>
	}

return len;
 8001eca:	687b      	ldr	r3, [r7, #4]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	e009      	b.n	8001efa <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	1c5a      	adds	r2, r3, #1
 8001eea:	60ba      	str	r2, [r7, #8]
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	617b      	str	r3, [r7, #20]
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	dbf1      	blt.n	8001ee6 <_write+0x12>
	}
	return len;
 8001f02:	687b      	ldr	r3, [r7, #4]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <_close>:

int _close(int file)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
	return -1;
 8001f14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr

08001f22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f32:	605a      	str	r2, [r3, #4]
	return 0;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr

08001f40 <_isatty>:

int _isatty(int file)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
	return 1;
 8001f48:	2301      	movs	r3, #1
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr

08001f54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
	return 0;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr

08001f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f74:	4a14      	ldr	r2, [pc, #80]	; (8001fc8 <_sbrk+0x5c>)
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <_sbrk+0x60>)
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f80:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <_sbrk+0x64>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d102      	bne.n	8001f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f88:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <_sbrk+0x64>)
 8001f8a:	4a12      	ldr	r2, [pc, #72]	; (8001fd4 <_sbrk+0x68>)
 8001f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <_sbrk+0x64>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4413      	add	r3, r2
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d207      	bcs.n	8001fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f9c:	f002 fd70 	bl	8004a80 <__errno>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	220c      	movs	r2, #12
 8001fa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001faa:	e009      	b.n	8001fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fac:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <_sbrk+0x64>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fb2:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <_sbrk+0x64>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4413      	add	r3, r2
 8001fba:	4a05      	ldr	r2, [pc, #20]	; (8001fd0 <_sbrk+0x64>)
 8001fbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	20005000 	.word	0x20005000
 8001fcc:	00000400 	.word	0x00000400
 8001fd0:	200000a0 	.word	0x200000a0
 8001fd4:	20000ac0 	.word	0x20000ac0

08001fd8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <userMain>:
unsigned counter_IT = 0;
uint16_t message_counter = 0;
char *message_welcome = "\n\n\r_____WELCOME_____\n\n\r";

void userMain()
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
	// init
//	init_TIM_IT(&htim4);

//	gsm_init();
//	gsm_power(1); // true
	gsm_waitForRegister(30);
 8001fe8:	201e      	movs	r0, #30
 8001fea:	f7fe fff9 	bl	8000fe0 <gsm_waitForRegister>
//	gsm_msg_send("+48796075202", "TO JEST NAPAD");
	while (1)
 8001fee:	e7fe      	b.n	8001fee <userMain+0xa>

08001ff0 <HAL_TIM_PeriodElapsedCallback>:

uint16_t msg_len = 80;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)	// 10Hz
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
	if(counter_IT % 1 == 0 && htim->Instance == TIM4)		// 10Hz
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a1b      	ldr	r2, [pc, #108]	; (800206c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d12a      	bne.n	8002058 <HAL_TIM_PeriodElapsedCallback+0x68>
	{
		uint8_t *msg = (uint8_t*)calloc(msg_len, sizeof(uint8_t));
 8002002:	4b1b      	ldr	r3, [pc, #108]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	2101      	movs	r1, #1
 8002008:	4618      	mov	r0, r3
 800200a:	f002 fd31 	bl	8004a70 <calloc>
 800200e:	4603      	mov	r3, r0
 8002010:	60fb      	str	r3, [r7, #12]

		// create & transmit message
		msg_len = sprintf(msg, "Ty piszesz program, a Lewandowski strzelil juz %d goli.\r\n", message_counter);
 8002012:	4b18      	ldr	r3, [pc, #96]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	461a      	mov	r2, r3
 8002018:	4917      	ldr	r1, [pc, #92]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f002 fe44 	bl	8004ca8 <siprintf>
 8002020:	4603      	mov	r3, r0
 8002022:	b29a      	uxth	r2, r3
 8002024:	4b12      	ldr	r3, [pc, #72]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002026:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, msg, msg_len);
 8002028:	4b11      	ldr	r3, [pc, #68]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	68f9      	ldr	r1, [r7, #12]
 8002030:	4812      	ldr	r0, [pc, #72]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002032:	f002 f9d7 	bl	80043e4 <HAL_UART_Transmit_IT>

		free(msg);
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f002 fd54 	bl	8004ae4 <free>

		// blink
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800203c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002040:	480f      	ldr	r0, [pc, #60]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002042:	f000 fd21 	bl	8002a88 <HAL_GPIO_TogglePin>
		counter_IT = 0;
 8002046:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
		message_counter++;
 800204c:	4b09      	ldr	r3, [pc, #36]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	3301      	adds	r3, #1
 8002052:	b29a      	uxth	r2, r3
 8002054:	4b07      	ldr	r3, [pc, #28]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002056:	801a      	strh	r2, [r3, #0]
	}
	counter_IT++;
 8002058:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	3301      	adds	r3, #1
 800205e:	4a09      	ldr	r2, [pc, #36]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002060:	6013      	str	r3, [r2, #0]
}
 8002062:	bf00      	nop
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40000800 	.word	0x40000800
 8002070:	20000004 	.word	0x20000004
 8002074:	200000a8 	.word	0x200000a8
 8002078:	0800770c 	.word	0x0800770c
 800207c:	20000a28 	.word	0x20000a28
 8002080:	40011000 	.word	0x40011000
 8002084:	200000a4 	.word	0x200000a4

08002088 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002088:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800208a:	e003      	b.n	8002094 <LoopCopyDataInit>

0800208c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800208e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002090:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002092:	3104      	adds	r1, #4

08002094 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002094:	480a      	ldr	r0, [pc, #40]	; (80020c0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002096:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002098:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800209a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800209c:	d3f6      	bcc.n	800208c <CopyDataInit>
  ldr r2, =_sbss
 800209e:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80020a0:	e002      	b.n	80020a8 <LoopFillZerobss>

080020a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80020a2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80020a4:	f842 3b04 	str.w	r3, [r2], #4

080020a8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80020a8:	4b08      	ldr	r3, [pc, #32]	; (80020cc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80020aa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80020ac:	d3f9      	bcc.n	80020a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020ae:	f7ff ff93 	bl	8001fd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020b2:	f002 fceb 	bl	8004a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020b6:	f7ff fc3b 	bl	8001930 <main>
  bx lr
 80020ba:	4770      	bx	lr
  ldr r3, =_sidata
 80020bc:	08007b4c 	.word	0x08007b4c
  ldr r0, =_sdata
 80020c0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80020c4:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 80020c8:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 80020cc:	20000abc 	.word	0x20000abc

080020d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020d0:	e7fe      	b.n	80020d0 <ADC1_2_IRQHandler>
	...

080020d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020d8:	4b08      	ldr	r3, [pc, #32]	; (80020fc <HAL_Init+0x28>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a07      	ldr	r2, [pc, #28]	; (80020fc <HAL_Init+0x28>)
 80020de:	f043 0310 	orr.w	r3, r3, #16
 80020e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020e4:	2003      	movs	r0, #3
 80020e6:	f000 f947 	bl	8002378 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ea:	2000      	movs	r0, #0
 80020ec:	f000 f808 	bl	8002100 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020f0:	f7ff fd7e 	bl	8001bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40022000 	.word	0x40022000

08002100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002108:	4b12      	ldr	r3, [pc, #72]	; (8002154 <HAL_InitTick+0x54>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b12      	ldr	r3, [pc, #72]	; (8002158 <HAL_InitTick+0x58>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	4619      	mov	r1, r3
 8002112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002116:	fbb3 f3f1 	udiv	r3, r3, r1
 800211a:	fbb2 f3f3 	udiv	r3, r2, r3
 800211e:	4618      	mov	r0, r3
 8002120:	f000 f98e 	bl	8002440 <HAL_SYSTICK_Config>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e00e      	b.n	800214c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b0f      	cmp	r3, #15
 8002132:	d80a      	bhi.n	800214a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002134:	2200      	movs	r2, #0
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800213c:	f000 f93c 	bl	80023b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002140:	4a06      	ldr	r2, [pc, #24]	; (800215c <HAL_InitTick+0x5c>)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
 8002148:	e000      	b.n	800214c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
}
 800214c:	4618      	mov	r0, r3
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20000000 	.word	0x20000000
 8002158:	2000000c 	.word	0x2000000c
 800215c:	20000008 	.word	0x20000008

08002160 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002164:	4b05      	ldr	r3, [pc, #20]	; (800217c <HAL_IncTick+0x1c>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	461a      	mov	r2, r3
 800216a:	4b05      	ldr	r3, [pc, #20]	; (8002180 <HAL_IncTick+0x20>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4413      	add	r3, r2
 8002170:	4a03      	ldr	r2, [pc, #12]	; (8002180 <HAL_IncTick+0x20>)
 8002172:	6013      	str	r3, [r2, #0]
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr
 800217c:	2000000c 	.word	0x2000000c
 8002180:	20000aa8 	.word	0x20000aa8

08002184 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return uwTick;
 8002188:	4b02      	ldr	r3, [pc, #8]	; (8002194 <HAL_GetTick+0x10>)
 800218a:	681b      	ldr	r3, [r3, #0]
}
 800218c:	4618      	mov	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr
 8002194:	20000aa8 	.word	0x20000aa8

08002198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021a0:	f7ff fff0 	bl	8002184 <HAL_GetTick>
 80021a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021b0:	d005      	beq.n	80021be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021b2:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <HAL_Delay+0x44>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	461a      	mov	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4413      	add	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021be:	bf00      	nop
 80021c0:	f7ff ffe0 	bl	8002184 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d8f7      	bhi.n	80021c0 <HAL_Delay+0x28>
  {
  }
}
 80021d0:	bf00      	nop
 80021d2:	bf00      	nop
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	2000000c 	.word	0x2000000c

080021e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <__NVIC_SetPriorityGrouping+0x44>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021fc:	4013      	ands	r3, r2
 80021fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800220c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002212:	4a04      	ldr	r2, [pc, #16]	; (8002224 <__NVIC_SetPriorityGrouping+0x44>)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	60d3      	str	r3, [r2, #12]
}
 8002218:	bf00      	nop
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	bc80      	pop	{r7}
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800222c:	4b04      	ldr	r3, [pc, #16]	; (8002240 <__NVIC_GetPriorityGrouping+0x18>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	0a1b      	lsrs	r3, r3, #8
 8002232:	f003 0307 	and.w	r3, r3, #7
}
 8002236:	4618      	mov	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	2b00      	cmp	r3, #0
 8002254:	db0b      	blt.n	800226e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	f003 021f 	and.w	r2, r3, #31
 800225c:	4906      	ldr	r1, [pc, #24]	; (8002278 <__NVIC_EnableIRQ+0x34>)
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	095b      	lsrs	r3, r3, #5
 8002264:	2001      	movs	r0, #1
 8002266:	fa00 f202 	lsl.w	r2, r0, r2
 800226a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr
 8002278:	e000e100 	.word	0xe000e100

0800227c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	6039      	str	r1, [r7, #0]
 8002286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228c:	2b00      	cmp	r3, #0
 800228e:	db0a      	blt.n	80022a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	b2da      	uxtb	r2, r3
 8002294:	490c      	ldr	r1, [pc, #48]	; (80022c8 <__NVIC_SetPriority+0x4c>)
 8002296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229a:	0112      	lsls	r2, r2, #4
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	440b      	add	r3, r1
 80022a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022a4:	e00a      	b.n	80022bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	4908      	ldr	r1, [pc, #32]	; (80022cc <__NVIC_SetPriority+0x50>)
 80022ac:	79fb      	ldrb	r3, [r7, #7]
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	3b04      	subs	r3, #4
 80022b4:	0112      	lsls	r2, r2, #4
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	440b      	add	r3, r1
 80022ba:	761a      	strb	r2, [r3, #24]
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	e000e100 	.word	0xe000e100
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b089      	sub	sp, #36	; 0x24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f1c3 0307 	rsb	r3, r3, #7
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	bf28      	it	cs
 80022ee:	2304      	movcs	r3, #4
 80022f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	3304      	adds	r3, #4
 80022f6:	2b06      	cmp	r3, #6
 80022f8:	d902      	bls.n	8002300 <NVIC_EncodePriority+0x30>
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	3b03      	subs	r3, #3
 80022fe:	e000      	b.n	8002302 <NVIC_EncodePriority+0x32>
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002304:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43da      	mvns	r2, r3
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	401a      	ands	r2, r3
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002318:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	fa01 f303 	lsl.w	r3, r1, r3
 8002322:	43d9      	mvns	r1, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002328:	4313      	orrs	r3, r2
         );
}
 800232a:	4618      	mov	r0, r3
 800232c:	3724      	adds	r7, #36	; 0x24
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr

08002334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3b01      	subs	r3, #1
 8002340:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002344:	d301      	bcc.n	800234a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002346:	2301      	movs	r3, #1
 8002348:	e00f      	b.n	800236a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800234a:	4a0a      	ldr	r2, [pc, #40]	; (8002374 <SysTick_Config+0x40>)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3b01      	subs	r3, #1
 8002350:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002352:	210f      	movs	r1, #15
 8002354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002358:	f7ff ff90 	bl	800227c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800235c:	4b05      	ldr	r3, [pc, #20]	; (8002374 <SysTick_Config+0x40>)
 800235e:	2200      	movs	r2, #0
 8002360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002362:	4b04      	ldr	r3, [pc, #16]	; (8002374 <SysTick_Config+0x40>)
 8002364:	2207      	movs	r2, #7
 8002366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	e000e010 	.word	0xe000e010

08002378 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b07      	cmp	r3, #7
 8002384:	d00f      	beq.n	80023a6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b06      	cmp	r3, #6
 800238a:	d00c      	beq.n	80023a6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b05      	cmp	r3, #5
 8002390:	d009      	beq.n	80023a6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b04      	cmp	r3, #4
 8002396:	d006      	beq.n	80023a6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b03      	cmp	r3, #3
 800239c:	d003      	beq.n	80023a6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800239e:	2192      	movs	r1, #146	; 0x92
 80023a0:	4804      	ldr	r0, [pc, #16]	; (80023b4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80023a2:	f7ff fc1a 	bl	8001bda <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff ff1a 	bl	80021e0 <__NVIC_SetPriorityGrouping>
}
 80023ac:	bf00      	nop
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	08007748 	.word	0x08007748

080023b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
 80023c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b0f      	cmp	r3, #15
 80023ce:	d903      	bls.n	80023d8 <HAL_NVIC_SetPriority+0x20>
 80023d0:	21aa      	movs	r1, #170	; 0xaa
 80023d2:	480e      	ldr	r0, [pc, #56]	; (800240c <HAL_NVIC_SetPriority+0x54>)
 80023d4:	f7ff fc01 	bl	8001bda <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b0f      	cmp	r3, #15
 80023dc:	d903      	bls.n	80023e6 <HAL_NVIC_SetPriority+0x2e>
 80023de:	21ab      	movs	r1, #171	; 0xab
 80023e0:	480a      	ldr	r0, [pc, #40]	; (800240c <HAL_NVIC_SetPriority+0x54>)
 80023e2:	f7ff fbfa 	bl	8001bda <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023e6:	f7ff ff1f 	bl	8002228 <__NVIC_GetPriorityGrouping>
 80023ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	68b9      	ldr	r1, [r7, #8]
 80023f0:	6978      	ldr	r0, [r7, #20]
 80023f2:	f7ff ff6d 	bl	80022d0 <NVIC_EncodePriority>
 80023f6:	4602      	mov	r2, r0
 80023f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023fc:	4611      	mov	r1, r2
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff ff3c 	bl	800227c <__NVIC_SetPriority>
}
 8002404:	bf00      	nop
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	08007748 	.word	0x08007748

08002410 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	2b00      	cmp	r3, #0
 8002420:	da03      	bge.n	800242a <HAL_NVIC_EnableIRQ+0x1a>
 8002422:	21be      	movs	r1, #190	; 0xbe
 8002424:	4805      	ldr	r0, [pc, #20]	; (800243c <HAL_NVIC_EnableIRQ+0x2c>)
 8002426:	f7ff fbd8 	bl	8001bda <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff ff08 	bl	8002244 <__NVIC_EnableIRQ>
}
 8002434:	bf00      	nop
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	08007748 	.word	0x08007748

08002440 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7ff ff73 	bl	8002334 <SysTick_Config>
 800244e:	4603      	mov	r3, r0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800246a:	2b02      	cmp	r3, #2
 800246c:	d005      	beq.n	800247a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2204      	movs	r2, #4
 8002472:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	73fb      	strb	r3, [r7, #15]
 8002478:	e051      	b.n	800251e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 020e 	bic.w	r2, r2, #14
 8002488:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0201 	bic.w	r2, r2, #1
 8002498:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a22      	ldr	r2, [pc, #136]	; (8002528 <HAL_DMA_Abort_IT+0xd0>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d029      	beq.n	80024f8 <HAL_DMA_Abort_IT+0xa0>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a20      	ldr	r2, [pc, #128]	; (800252c <HAL_DMA_Abort_IT+0xd4>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d022      	beq.n	80024f4 <HAL_DMA_Abort_IT+0x9c>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a1f      	ldr	r2, [pc, #124]	; (8002530 <HAL_DMA_Abort_IT+0xd8>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d01a      	beq.n	80024ee <HAL_DMA_Abort_IT+0x96>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a1d      	ldr	r2, [pc, #116]	; (8002534 <HAL_DMA_Abort_IT+0xdc>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d012      	beq.n	80024e8 <HAL_DMA_Abort_IT+0x90>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a1c      	ldr	r2, [pc, #112]	; (8002538 <HAL_DMA_Abort_IT+0xe0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d00a      	beq.n	80024e2 <HAL_DMA_Abort_IT+0x8a>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a1a      	ldr	r2, [pc, #104]	; (800253c <HAL_DMA_Abort_IT+0xe4>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d102      	bne.n	80024dc <HAL_DMA_Abort_IT+0x84>
 80024d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024da:	e00e      	b.n	80024fa <HAL_DMA_Abort_IT+0xa2>
 80024dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024e0:	e00b      	b.n	80024fa <HAL_DMA_Abort_IT+0xa2>
 80024e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024e6:	e008      	b.n	80024fa <HAL_DMA_Abort_IT+0xa2>
 80024e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ec:	e005      	b.n	80024fa <HAL_DMA_Abort_IT+0xa2>
 80024ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024f2:	e002      	b.n	80024fa <HAL_DMA_Abort_IT+0xa2>
 80024f4:	2310      	movs	r3, #16
 80024f6:	e000      	b.n	80024fa <HAL_DMA_Abort_IT+0xa2>
 80024f8:	2301      	movs	r3, #1
 80024fa:	4a11      	ldr	r2, [pc, #68]	; (8002540 <HAL_DMA_Abort_IT+0xe8>)
 80024fc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	4798      	blx	r3
    } 
  }
  return status;
 800251e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40020008 	.word	0x40020008
 800252c:	4002001c 	.word	0x4002001c
 8002530:	40020030 	.word	0x40020030
 8002534:	40020044 	.word	0x40020044
 8002538:	40020058 	.word	0x40020058
 800253c:	4002006c 	.word	0x4002006c
 8002540:	40020000 	.word	0x40020000

08002544 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08a      	sub	sp, #40	; 0x28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800254e:	2300      	movs	r3, #0
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002552:	2300      	movs	r3, #0
 8002554:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4aa1      	ldr	r2, [pc, #644]	; (80027e0 <HAL_GPIO_Init+0x29c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d013      	beq.n	8002586 <HAL_GPIO_Init+0x42>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4aa0      	ldr	r2, [pc, #640]	; (80027e4 <HAL_GPIO_Init+0x2a0>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d00f      	beq.n	8002586 <HAL_GPIO_Init+0x42>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a9f      	ldr	r2, [pc, #636]	; (80027e8 <HAL_GPIO_Init+0x2a4>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d00b      	beq.n	8002586 <HAL_GPIO_Init+0x42>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a9e      	ldr	r2, [pc, #632]	; (80027ec <HAL_GPIO_Init+0x2a8>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d007      	beq.n	8002586 <HAL_GPIO_Init+0x42>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a9d      	ldr	r2, [pc, #628]	; (80027f0 <HAL_GPIO_Init+0x2ac>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d003      	beq.n	8002586 <HAL_GPIO_Init+0x42>
 800257e:	21bd      	movs	r1, #189	; 0xbd
 8002580:	489c      	ldr	r0, [pc, #624]	; (80027f4 <HAL_GPIO_Init+0x2b0>)
 8002582:	f7ff fb2a 	bl	8001bda <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	b29b      	uxth	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <HAL_GPIO_Init+0x58>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	0c1b      	lsrs	r3, r3, #16
 8002596:	041b      	lsls	r3, r3, #16
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_GPIO_Init+0x60>
 800259c:	21be      	movs	r1, #190	; 0xbe
 800259e:	4895      	ldr	r0, [pc, #596]	; (80027f4 <HAL_GPIO_Init+0x2b0>)
 80025a0:	f7ff fb1b 	bl	8001bda <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 821d 	beq.w	80029e8 <HAL_GPIO_Init+0x4a4>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	f000 8218 	beq.w	80029e8 <HAL_GPIO_Init+0x4a4>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b11      	cmp	r3, #17
 80025be:	f000 8213 	beq.w	80029e8 <HAL_GPIO_Init+0x4a4>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	f000 820e 	beq.w	80029e8 <HAL_GPIO_Init+0x4a4>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b12      	cmp	r3, #18
 80025d2:	f000 8209 	beq.w	80029e8 <HAL_GPIO_Init+0x4a4>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	4a87      	ldr	r2, [pc, #540]	; (80027f8 <HAL_GPIO_Init+0x2b4>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	f000 8203 	beq.w	80029e8 <HAL_GPIO_Init+0x4a4>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	4a85      	ldr	r2, [pc, #532]	; (80027fc <HAL_GPIO_Init+0x2b8>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	f000 81fd 	beq.w	80029e8 <HAL_GPIO_Init+0x4a4>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	4a83      	ldr	r2, [pc, #524]	; (8002800 <HAL_GPIO_Init+0x2bc>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	f000 81f7 	beq.w	80029e8 <HAL_GPIO_Init+0x4a4>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	4a81      	ldr	r2, [pc, #516]	; (8002804 <HAL_GPIO_Init+0x2c0>)
 8002600:	4293      	cmp	r3, r2
 8002602:	f000 81f1 	beq.w	80029e8 <HAL_GPIO_Init+0x4a4>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	4a7f      	ldr	r2, [pc, #508]	; (8002808 <HAL_GPIO_Init+0x2c4>)
 800260c:	4293      	cmp	r3, r2
 800260e:	f000 81eb 	beq.w	80029e8 <HAL_GPIO_Init+0x4a4>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	4a7d      	ldr	r2, [pc, #500]	; (800280c <HAL_GPIO_Init+0x2c8>)
 8002618:	4293      	cmp	r3, r2
 800261a:	f000 81e5 	beq.w	80029e8 <HAL_GPIO_Init+0x4a4>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b03      	cmp	r3, #3
 8002624:	f000 81e0 	beq.w	80029e8 <HAL_GPIO_Init+0x4a4>
 8002628:	21bf      	movs	r1, #191	; 0xbf
 800262a:	4872      	ldr	r0, [pc, #456]	; (80027f4 <HAL_GPIO_Init+0x2b0>)
 800262c:	f7ff fad5 	bl	8001bda <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002630:	e1da      	b.n	80029e8 <HAL_GPIO_Init+0x4a4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002632:	2201      	movs	r2, #1
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	69fa      	ldr	r2, [r7, #28]
 8002642:	4013      	ands	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	429a      	cmp	r2, r3
 800264c:	f040 81c9 	bne.w	80029e2 <HAL_GPIO_Init+0x49e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a63      	ldr	r2, [pc, #396]	; (80027e0 <HAL_GPIO_Init+0x29c>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d013      	beq.n	8002680 <HAL_GPIO_Init+0x13c>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a62      	ldr	r2, [pc, #392]	; (80027e4 <HAL_GPIO_Init+0x2a0>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d00f      	beq.n	8002680 <HAL_GPIO_Init+0x13c>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a61      	ldr	r2, [pc, #388]	; (80027e8 <HAL_GPIO_Init+0x2a4>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d00b      	beq.n	8002680 <HAL_GPIO_Init+0x13c>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a60      	ldr	r2, [pc, #384]	; (80027ec <HAL_GPIO_Init+0x2a8>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d007      	beq.n	8002680 <HAL_GPIO_Init+0x13c>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a5f      	ldr	r2, [pc, #380]	; (80027f0 <HAL_GPIO_Init+0x2ac>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x13c>
 8002678:	21cd      	movs	r1, #205	; 0xcd
 800267a:	485e      	ldr	r0, [pc, #376]	; (80027f4 <HAL_GPIO_Init+0x2b0>)
 800267c:	f7ff faad 	bl	8001bda <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	4a61      	ldr	r2, [pc, #388]	; (800280c <HAL_GPIO_Init+0x2c8>)
 8002686:	4293      	cmp	r3, r2
 8002688:	f000 80c2 	beq.w	8002810 <HAL_GPIO_Init+0x2cc>
 800268c:	4a5f      	ldr	r2, [pc, #380]	; (800280c <HAL_GPIO_Init+0x2c8>)
 800268e:	4293      	cmp	r3, r2
 8002690:	f200 80e8 	bhi.w	8002864 <HAL_GPIO_Init+0x320>
 8002694:	4a5a      	ldr	r2, [pc, #360]	; (8002800 <HAL_GPIO_Init+0x2bc>)
 8002696:	4293      	cmp	r3, r2
 8002698:	f000 80ba 	beq.w	8002810 <HAL_GPIO_Init+0x2cc>
 800269c:	4a58      	ldr	r2, [pc, #352]	; (8002800 <HAL_GPIO_Init+0x2bc>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	f200 80e0 	bhi.w	8002864 <HAL_GPIO_Init+0x320>
 80026a4:	4a58      	ldr	r2, [pc, #352]	; (8002808 <HAL_GPIO_Init+0x2c4>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	f000 80b2 	beq.w	8002810 <HAL_GPIO_Init+0x2cc>
 80026ac:	4a56      	ldr	r2, [pc, #344]	; (8002808 <HAL_GPIO_Init+0x2c4>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	f200 80d8 	bhi.w	8002864 <HAL_GPIO_Init+0x320>
 80026b4:	4a51      	ldr	r2, [pc, #324]	; (80027fc <HAL_GPIO_Init+0x2b8>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	f000 80aa 	beq.w	8002810 <HAL_GPIO_Init+0x2cc>
 80026bc:	4a4f      	ldr	r2, [pc, #316]	; (80027fc <HAL_GPIO_Init+0x2b8>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	f200 80d0 	bhi.w	8002864 <HAL_GPIO_Init+0x320>
 80026c4:	4a4f      	ldr	r2, [pc, #316]	; (8002804 <HAL_GPIO_Init+0x2c0>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	f000 80a2 	beq.w	8002810 <HAL_GPIO_Init+0x2cc>
 80026cc:	4a4d      	ldr	r2, [pc, #308]	; (8002804 <HAL_GPIO_Init+0x2c0>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	f200 80c8 	bhi.w	8002864 <HAL_GPIO_Init+0x320>
 80026d4:	2b12      	cmp	r3, #18
 80026d6:	d82b      	bhi.n	8002730 <HAL_GPIO_Init+0x1ec>
 80026d8:	2b12      	cmp	r3, #18
 80026da:	f200 80c3 	bhi.w	8002864 <HAL_GPIO_Init+0x320>
 80026de:	a201      	add	r2, pc, #4	; (adr r2, 80026e4 <HAL_GPIO_Init+0x1a0>)
 80026e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e4:	08002811 	.word	0x08002811
 80026e8:	08002739 	.word	0x08002739
 80026ec:	0800278b 	.word	0x0800278b
 80026f0:	0800285f 	.word	0x0800285f
 80026f4:	08002865 	.word	0x08002865
 80026f8:	08002865 	.word	0x08002865
 80026fc:	08002865 	.word	0x08002865
 8002700:	08002865 	.word	0x08002865
 8002704:	08002865 	.word	0x08002865
 8002708:	08002865 	.word	0x08002865
 800270c:	08002865 	.word	0x08002865
 8002710:	08002865 	.word	0x08002865
 8002714:	08002865 	.word	0x08002865
 8002718:	08002865 	.word	0x08002865
 800271c:	08002865 	.word	0x08002865
 8002720:	08002865 	.word	0x08002865
 8002724:	08002865 	.word	0x08002865
 8002728:	08002761 	.word	0x08002761
 800272c:	080027b5 	.word	0x080027b5
 8002730:	4a31      	ldr	r2, [pc, #196]	; (80027f8 <HAL_GPIO_Init+0x2b4>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d06c      	beq.n	8002810 <HAL_GPIO_Init+0x2cc>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002736:	e095      	b.n	8002864 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	2b02      	cmp	r3, #2
 800273e:	d00b      	beq.n	8002758 <HAL_GPIO_Init+0x214>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d007      	beq.n	8002758 <HAL_GPIO_Init+0x214>
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	2b03      	cmp	r3, #3
 800274e:	d003      	beq.n	8002758 <HAL_GPIO_Init+0x214>
 8002750:	21d5      	movs	r1, #213	; 0xd5
 8002752:	4828      	ldr	r0, [pc, #160]	; (80027f4 <HAL_GPIO_Init+0x2b0>)
 8002754:	f7ff fa41 	bl	8001bda <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	623b      	str	r3, [r7, #32]
          break;
 800275e:	e082      	b.n	8002866 <HAL_GPIO_Init+0x322>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	2b02      	cmp	r3, #2
 8002766:	d00b      	beq.n	8002780 <HAL_GPIO_Init+0x23c>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d007      	beq.n	8002780 <HAL_GPIO_Init+0x23c>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	2b03      	cmp	r3, #3
 8002776:	d003      	beq.n	8002780 <HAL_GPIO_Init+0x23c>
 8002778:	21dc      	movs	r1, #220	; 0xdc
 800277a:	481e      	ldr	r0, [pc, #120]	; (80027f4 <HAL_GPIO_Init+0x2b0>)
 800277c:	f7ff fa2d 	bl	8001bda <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	3304      	adds	r3, #4
 8002786:	623b      	str	r3, [r7, #32]
          break;
 8002788:	e06d      	b.n	8002866 <HAL_GPIO_Init+0x322>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d00b      	beq.n	80027aa <HAL_GPIO_Init+0x266>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d007      	beq.n	80027aa <HAL_GPIO_Init+0x266>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	2b03      	cmp	r3, #3
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_Init+0x266>
 80027a2:	21e3      	movs	r1, #227	; 0xe3
 80027a4:	4813      	ldr	r0, [pc, #76]	; (80027f4 <HAL_GPIO_Init+0x2b0>)
 80027a6:	f7ff fa18 	bl	8001bda <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	3308      	adds	r3, #8
 80027b0:	623b      	str	r3, [r7, #32]
          break;
 80027b2:	e058      	b.n	8002866 <HAL_GPIO_Init+0x322>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d00b      	beq.n	80027d4 <HAL_GPIO_Init+0x290>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d007      	beq.n	80027d4 <HAL_GPIO_Init+0x290>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d003      	beq.n	80027d4 <HAL_GPIO_Init+0x290>
 80027cc:	21ea      	movs	r1, #234	; 0xea
 80027ce:	4809      	ldr	r0, [pc, #36]	; (80027f4 <HAL_GPIO_Init+0x2b0>)
 80027d0:	f7ff fa03 	bl	8001bda <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	330c      	adds	r3, #12
 80027da:	623b      	str	r3, [r7, #32]
          break;
 80027dc:	e043      	b.n	8002866 <HAL_GPIO_Init+0x322>
 80027de:	bf00      	nop
 80027e0:	40010800 	.word	0x40010800
 80027e4:	40010c00 	.word	0x40010c00
 80027e8:	40011000 	.word	0x40011000
 80027ec:	40011400 	.word	0x40011400
 80027f0:	40011800 	.word	0x40011800
 80027f4:	08007784 	.word	0x08007784
 80027f8:	10110000 	.word	0x10110000
 80027fc:	10210000 	.word	0x10210000
 8002800:	10310000 	.word	0x10310000
 8002804:	10120000 	.word	0x10120000
 8002808:	10220000 	.word	0x10220000
 800280c:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00b      	beq.n	8002830 <HAL_GPIO_Init+0x2ec>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d007      	beq.n	8002830 <HAL_GPIO_Init+0x2ec>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b02      	cmp	r3, #2
 8002826:	d003      	beq.n	8002830 <HAL_GPIO_Init+0x2ec>
 8002828:	21f7      	movs	r1, #247	; 0xf7
 800282a:	4876      	ldr	r0, [pc, #472]	; (8002a04 <HAL_GPIO_Init+0x4c0>)
 800282c:	f7ff f9d5 	bl	8001bda <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d102      	bne.n	800283e <HAL_GPIO_Init+0x2fa>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002838:	2304      	movs	r3, #4
 800283a:	623b      	str	r3, [r7, #32]
          break;
 800283c:	e013      	b.n	8002866 <HAL_GPIO_Init+0x322>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d105      	bne.n	8002852 <HAL_GPIO_Init+0x30e>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002846:	2308      	movs	r3, #8
 8002848:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69fa      	ldr	r2, [r7, #28]
 800284e:	611a      	str	r2, [r3, #16]
          break;
 8002850:	e009      	b.n	8002866 <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002852:	2308      	movs	r3, #8
 8002854:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69fa      	ldr	r2, [r7, #28]
 800285a:	615a      	str	r2, [r3, #20]
          break;
 800285c:	e003      	b.n	8002866 <HAL_GPIO_Init+0x322>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800285e:	2300      	movs	r3, #0
 8002860:	623b      	str	r3, [r7, #32]
          break;
 8002862:	e000      	b.n	8002866 <HAL_GPIO_Init+0x322>
          break;
 8002864:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	2bff      	cmp	r3, #255	; 0xff
 800286a:	d801      	bhi.n	8002870 <HAL_GPIO_Init+0x32c>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	e001      	b.n	8002874 <HAL_GPIO_Init+0x330>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3304      	adds	r3, #4
 8002874:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	2bff      	cmp	r3, #255	; 0xff
 800287a:	d802      	bhi.n	8002882 <HAL_GPIO_Init+0x33e>
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	e002      	b.n	8002888 <HAL_GPIO_Init+0x344>
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	3b08      	subs	r3, #8
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	210f      	movs	r1, #15
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	fa01 f303 	lsl.w	r3, r1, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	401a      	ands	r2, r3
 800289a:	6a39      	ldr	r1, [r7, #32]
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	fa01 f303 	lsl.w	r3, r1, r3
 80028a2:	431a      	orrs	r2, r3
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 8096 	beq.w	80029e2 <HAL_GPIO_Init+0x49e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028b6:	4b54      	ldr	r3, [pc, #336]	; (8002a08 <HAL_GPIO_Init+0x4c4>)
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	4a53      	ldr	r2, [pc, #332]	; (8002a08 <HAL_GPIO_Init+0x4c4>)
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	6193      	str	r3, [r2, #24]
 80028c2:	4b51      	ldr	r3, [pc, #324]	; (8002a08 <HAL_GPIO_Init+0x4c4>)
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	60bb      	str	r3, [r7, #8]
 80028cc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028ce:	4a4f      	ldr	r2, [pc, #316]	; (8002a0c <HAL_GPIO_Init+0x4c8>)
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	089b      	lsrs	r3, r3, #2
 80028d4:	3302      	adds	r3, #2
 80028d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028da:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	220f      	movs	r2, #15
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	4013      	ands	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a46      	ldr	r2, [pc, #280]	; (8002a10 <HAL_GPIO_Init+0x4cc>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d013      	beq.n	8002922 <HAL_GPIO_Init+0x3de>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a45      	ldr	r2, [pc, #276]	; (8002a14 <HAL_GPIO_Init+0x4d0>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d00d      	beq.n	800291e <HAL_GPIO_Init+0x3da>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a44      	ldr	r2, [pc, #272]	; (8002a18 <HAL_GPIO_Init+0x4d4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d007      	beq.n	800291a <HAL_GPIO_Init+0x3d6>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a43      	ldr	r2, [pc, #268]	; (8002a1c <HAL_GPIO_Init+0x4d8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d101      	bne.n	8002916 <HAL_GPIO_Init+0x3d2>
 8002912:	2303      	movs	r3, #3
 8002914:	e006      	b.n	8002924 <HAL_GPIO_Init+0x3e0>
 8002916:	2304      	movs	r3, #4
 8002918:	e004      	b.n	8002924 <HAL_GPIO_Init+0x3e0>
 800291a:	2302      	movs	r3, #2
 800291c:	e002      	b.n	8002924 <HAL_GPIO_Init+0x3e0>
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <HAL_GPIO_Init+0x3e0>
 8002922:	2300      	movs	r3, #0
 8002924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002926:	f002 0203 	and.w	r2, r2, #3
 800292a:	0092      	lsls	r2, r2, #2
 800292c:	4093      	lsls	r3, r2
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4313      	orrs	r3, r2
 8002932:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002934:	4935      	ldr	r1, [pc, #212]	; (8002a0c <HAL_GPIO_Init+0x4c8>)
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	089b      	lsrs	r3, r3, #2
 800293a:	3302      	adds	r3, #2
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d006      	beq.n	800295c <HAL_GPIO_Init+0x418>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800294e:	4b34      	ldr	r3, [pc, #208]	; (8002a20 <HAL_GPIO_Init+0x4dc>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	4933      	ldr	r1, [pc, #204]	; (8002a20 <HAL_GPIO_Init+0x4dc>)
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	4313      	orrs	r3, r2
 8002958:	600b      	str	r3, [r1, #0]
 800295a:	e006      	b.n	800296a <HAL_GPIO_Init+0x426>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800295c:	4b30      	ldr	r3, [pc, #192]	; (8002a20 <HAL_GPIO_Init+0x4dc>)
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	43db      	mvns	r3, r3
 8002964:	492e      	ldr	r1, [pc, #184]	; (8002a20 <HAL_GPIO_Init+0x4dc>)
 8002966:	4013      	ands	r3, r2
 8002968:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d006      	beq.n	8002984 <HAL_GPIO_Init+0x440>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002976:	4b2a      	ldr	r3, [pc, #168]	; (8002a20 <HAL_GPIO_Init+0x4dc>)
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	4929      	ldr	r1, [pc, #164]	; (8002a20 <HAL_GPIO_Init+0x4dc>)
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	4313      	orrs	r3, r2
 8002980:	604b      	str	r3, [r1, #4]
 8002982:	e006      	b.n	8002992 <HAL_GPIO_Init+0x44e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002984:	4b26      	ldr	r3, [pc, #152]	; (8002a20 <HAL_GPIO_Init+0x4dc>)
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	43db      	mvns	r3, r3
 800298c:	4924      	ldr	r1, [pc, #144]	; (8002a20 <HAL_GPIO_Init+0x4dc>)
 800298e:	4013      	ands	r3, r2
 8002990:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d006      	beq.n	80029ac <HAL_GPIO_Init+0x468>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800299e:	4b20      	ldr	r3, [pc, #128]	; (8002a20 <HAL_GPIO_Init+0x4dc>)
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	491f      	ldr	r1, [pc, #124]	; (8002a20 <HAL_GPIO_Init+0x4dc>)
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	608b      	str	r3, [r1, #8]
 80029aa:	e006      	b.n	80029ba <HAL_GPIO_Init+0x476>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029ac:	4b1c      	ldr	r3, [pc, #112]	; (8002a20 <HAL_GPIO_Init+0x4dc>)
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	43db      	mvns	r3, r3
 80029b4:	491a      	ldr	r1, [pc, #104]	; (8002a20 <HAL_GPIO_Init+0x4dc>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d006      	beq.n	80029d4 <HAL_GPIO_Init+0x490>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029c6:	4b16      	ldr	r3, [pc, #88]	; (8002a20 <HAL_GPIO_Init+0x4dc>)
 80029c8:	68da      	ldr	r2, [r3, #12]
 80029ca:	4915      	ldr	r1, [pc, #84]	; (8002a20 <HAL_GPIO_Init+0x4dc>)
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60cb      	str	r3, [r1, #12]
 80029d2:	e006      	b.n	80029e2 <HAL_GPIO_Init+0x49e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029d4:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <HAL_GPIO_Init+0x4dc>)
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	43db      	mvns	r3, r3
 80029dc:	4910      	ldr	r1, [pc, #64]	; (8002a20 <HAL_GPIO_Init+0x4dc>)
 80029de:	4013      	ands	r3, r2
 80029e0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	3301      	adds	r3, #1
 80029e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ee:	fa22 f303 	lsr.w	r3, r2, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f47f ae1d 	bne.w	8002632 <HAL_GPIO_Init+0xee>
  }
}
 80029f8:	bf00      	nop
 80029fa:	bf00      	nop
 80029fc:	3728      	adds	r7, #40	; 0x28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	08007784 	.word	0x08007784
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	40010000 	.word	0x40010000
 8002a10:	40010800 	.word	0x40010800
 8002a14:	40010c00 	.word	0x40010c00
 8002a18:	40011000 	.word	0x40011000
 8002a1c:	40011400 	.word	0x40011400
 8002a20:	40010400 	.word	0x40010400

08002a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	807b      	strh	r3, [r7, #2]
 8002a30:	4613      	mov	r3, r2
 8002a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002a34:	887b      	ldrh	r3, [r7, #2]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d004      	beq.n	8002a44 <HAL_GPIO_WritePin+0x20>
 8002a3a:	887b      	ldrh	r3, [r7, #2]
 8002a3c:	0c1b      	lsrs	r3, r3, #16
 8002a3e:	041b      	lsls	r3, r3, #16
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d004      	beq.n	8002a4e <HAL_GPIO_WritePin+0x2a>
 8002a44:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8002a48:	480e      	ldr	r0, [pc, #56]	; (8002a84 <HAL_GPIO_WritePin+0x60>)
 8002a4a:	f7ff f8c6 	bl	8001bda <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002a4e:	787b      	ldrb	r3, [r7, #1]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d007      	beq.n	8002a64 <HAL_GPIO_WritePin+0x40>
 8002a54:	787b      	ldrb	r3, [r7, #1]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d004      	beq.n	8002a64 <HAL_GPIO_WritePin+0x40>
 8002a5a:	f240 11d5 	movw	r1, #469	; 0x1d5
 8002a5e:	4809      	ldr	r0, [pc, #36]	; (8002a84 <HAL_GPIO_WritePin+0x60>)
 8002a60:	f7ff f8bb 	bl	8001bda <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8002a64:	787b      	ldrb	r3, [r7, #1]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a6a:	887a      	ldrh	r2, [r7, #2]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a70:	e003      	b.n	8002a7a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a72:	887b      	ldrh	r3, [r7, #2]
 8002a74:	041a      	lsls	r2, r3, #16
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	611a      	str	r2, [r3, #16]
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	08007784 	.word	0x08007784

08002a88 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	460b      	mov	r3, r1
 8002a92:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002a94:	887b      	ldrh	r3, [r7, #2]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d004      	beq.n	8002aa4 <HAL_GPIO_TogglePin+0x1c>
 8002a9a:	887b      	ldrh	r3, [r7, #2]
 8002a9c:	0c1b      	lsrs	r3, r3, #16
 8002a9e:	041b      	lsls	r3, r3, #16
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d004      	beq.n	8002aae <HAL_GPIO_TogglePin+0x26>
 8002aa4:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8002aa8:	480a      	ldr	r0, [pc, #40]	; (8002ad4 <HAL_GPIO_TogglePin+0x4c>)
 8002aaa:	f7ff f896 	bl	8001bda <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ab4:	887a      	ldrh	r2, [r7, #2]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	041a      	lsls	r2, r3, #16
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	43d9      	mvns	r1, r3
 8002ac0:	887b      	ldrh	r3, [r7, #2]
 8002ac2:	400b      	ands	r3, r1
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	611a      	str	r2, [r3, #16]
}
 8002aca:	bf00      	nop
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	08007784 	.word	0x08007784

08002ad8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e35c      	b.n	80031a4 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d01c      	beq.n	8002b2c <HAL_RCC_OscConfig+0x54>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d116      	bne.n	8002b2c <HAL_RCC_OscConfig+0x54>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d110      	bne.n	8002b2c <HAL_RCC_OscConfig+0x54>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10a      	bne.n	8002b2c <HAL_RCC_OscConfig+0x54>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0304 	and.w	r3, r3, #4
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d104      	bne.n	8002b2c <HAL_RCC_OscConfig+0x54>
 8002b22:	f240 1167 	movw	r1, #359	; 0x167
 8002b26:	48a5      	ldr	r0, [pc, #660]	; (8002dbc <HAL_RCC_OscConfig+0x2e4>)
 8002b28:	f7ff f857 	bl	8001bda <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 809a 	beq.w	8002c6e <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00e      	beq.n	8002b60 <HAL_RCC_OscConfig+0x88>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b4a:	d009      	beq.n	8002b60 <HAL_RCC_OscConfig+0x88>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b54:	d004      	beq.n	8002b60 <HAL_RCC_OscConfig+0x88>
 8002b56:	f240 116d 	movw	r1, #365	; 0x16d
 8002b5a:	4898      	ldr	r0, [pc, #608]	; (8002dbc <HAL_RCC_OscConfig+0x2e4>)
 8002b5c:	f7ff f83d 	bl	8001bda <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b60:	4b97      	ldr	r3, [pc, #604]	; (8002dc0 <HAL_RCC_OscConfig+0x2e8>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 030c 	and.w	r3, r3, #12
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d00c      	beq.n	8002b86 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b6c:	4b94      	ldr	r3, [pc, #592]	; (8002dc0 <HAL_RCC_OscConfig+0x2e8>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 030c 	and.w	r3, r3, #12
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d112      	bne.n	8002b9e <HAL_RCC_OscConfig+0xc6>
 8002b78:	4b91      	ldr	r3, [pc, #580]	; (8002dc0 <HAL_RCC_OscConfig+0x2e8>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b84:	d10b      	bne.n	8002b9e <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b86:	4b8e      	ldr	r3, [pc, #568]	; (8002dc0 <HAL_RCC_OscConfig+0x2e8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d06c      	beq.n	8002c6c <HAL_RCC_OscConfig+0x194>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d168      	bne.n	8002c6c <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e302      	b.n	80031a4 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba6:	d106      	bne.n	8002bb6 <HAL_RCC_OscConfig+0xde>
 8002ba8:	4b85      	ldr	r3, [pc, #532]	; (8002dc0 <HAL_RCC_OscConfig+0x2e8>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a84      	ldr	r2, [pc, #528]	; (8002dc0 <HAL_RCC_OscConfig+0x2e8>)
 8002bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb2:	6013      	str	r3, [r2, #0]
 8002bb4:	e02e      	b.n	8002c14 <HAL_RCC_OscConfig+0x13c>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10c      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x100>
 8002bbe:	4b80      	ldr	r3, [pc, #512]	; (8002dc0 <HAL_RCC_OscConfig+0x2e8>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a7f      	ldr	r2, [pc, #508]	; (8002dc0 <HAL_RCC_OscConfig+0x2e8>)
 8002bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	4b7d      	ldr	r3, [pc, #500]	; (8002dc0 <HAL_RCC_OscConfig+0x2e8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a7c      	ldr	r2, [pc, #496]	; (8002dc0 <HAL_RCC_OscConfig+0x2e8>)
 8002bd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	e01d      	b.n	8002c14 <HAL_RCC_OscConfig+0x13c>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002be0:	d10c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x124>
 8002be2:	4b77      	ldr	r3, [pc, #476]	; (8002dc0 <HAL_RCC_OscConfig+0x2e8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a76      	ldr	r2, [pc, #472]	; (8002dc0 <HAL_RCC_OscConfig+0x2e8>)
 8002be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	4b74      	ldr	r3, [pc, #464]	; (8002dc0 <HAL_RCC_OscConfig+0x2e8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a73      	ldr	r2, [pc, #460]	; (8002dc0 <HAL_RCC_OscConfig+0x2e8>)
 8002bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	e00b      	b.n	8002c14 <HAL_RCC_OscConfig+0x13c>
 8002bfc:	4b70      	ldr	r3, [pc, #448]	; (8002dc0 <HAL_RCC_OscConfig+0x2e8>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a6f      	ldr	r2, [pc, #444]	; (8002dc0 <HAL_RCC_OscConfig+0x2e8>)
 8002c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	4b6d      	ldr	r3, [pc, #436]	; (8002dc0 <HAL_RCC_OscConfig+0x2e8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a6c      	ldr	r2, [pc, #432]	; (8002dc0 <HAL_RCC_OscConfig+0x2e8>)
 8002c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d013      	beq.n	8002c44 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1c:	f7ff fab2 	bl	8002184 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c24:	f7ff faae 	bl	8002184 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b64      	cmp	r3, #100	; 0x64
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e2b6      	b.n	80031a4 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c36:	4b62      	ldr	r3, [pc, #392]	; (8002dc0 <HAL_RCC_OscConfig+0x2e8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0x14c>
 8002c42:	e014      	b.n	8002c6e <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c44:	f7ff fa9e 	bl	8002184 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c4c:	f7ff fa9a 	bl	8002184 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b64      	cmp	r3, #100	; 0x64
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e2a2      	b.n	80031a4 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5e:	4b58      	ldr	r3, [pc, #352]	; (8002dc0 <HAL_RCC_OscConfig+0x2e8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0x174>
 8002c6a:	e000      	b.n	8002c6e <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d079      	beq.n	8002d6e <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d008      	beq.n	8002c94 <HAL_RCC_OscConfig+0x1bc>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d004      	beq.n	8002c94 <HAL_RCC_OscConfig+0x1bc>
 8002c8a:	f240 11a1 	movw	r1, #417	; 0x1a1
 8002c8e:	484b      	ldr	r0, [pc, #300]	; (8002dbc <HAL_RCC_OscConfig+0x2e4>)
 8002c90:	f7fe ffa3 	bl	8001bda <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	2b1f      	cmp	r3, #31
 8002c9a:	d904      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x1ce>
 8002c9c:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8002ca0:	4846      	ldr	r0, [pc, #280]	; (8002dbc <HAL_RCC_OscConfig+0x2e4>)
 8002ca2:	f7fe ff9a 	bl	8001bda <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ca6:	4b46      	ldr	r3, [pc, #280]	; (8002dc0 <HAL_RCC_OscConfig+0x2e8>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00b      	beq.n	8002cca <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cb2:	4b43      	ldr	r3, [pc, #268]	; (8002dc0 <HAL_RCC_OscConfig+0x2e8>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d11c      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x220>
 8002cbe:	4b40      	ldr	r3, [pc, #256]	; (8002dc0 <HAL_RCC_OscConfig+0x2e8>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d116      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cca:	4b3d      	ldr	r3, [pc, #244]	; (8002dc0 <HAL_RCC_OscConfig+0x2e8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d005      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x20a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d001      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e260      	b.n	80031a4 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce2:	4b37      	ldr	r3, [pc, #220]	; (8002dc0 <HAL_RCC_OscConfig+0x2e8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	4933      	ldr	r1, [pc, #204]	; (8002dc0 <HAL_RCC_OscConfig+0x2e8>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf6:	e03a      	b.n	8002d6e <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d020      	beq.n	8002d42 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d00:	4b30      	ldr	r3, [pc, #192]	; (8002dc4 <HAL_RCC_OscConfig+0x2ec>)
 8002d02:	2201      	movs	r2, #1
 8002d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d06:	f7ff fa3d 	bl	8002184 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d0c:	e008      	b.n	8002d20 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d0e:	f7ff fa39 	bl	8002184 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e241      	b.n	80031a4 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d20:	4b27      	ldr	r3, [pc, #156]	; (8002dc0 <HAL_RCC_OscConfig+0x2e8>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0f0      	beq.n	8002d0e <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d2c:	4b24      	ldr	r3, [pc, #144]	; (8002dc0 <HAL_RCC_OscConfig+0x2e8>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	4921      	ldr	r1, [pc, #132]	; (8002dc0 <HAL_RCC_OscConfig+0x2e8>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	600b      	str	r3, [r1, #0]
 8002d40:	e015      	b.n	8002d6e <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d42:	4b20      	ldr	r3, [pc, #128]	; (8002dc4 <HAL_RCC_OscConfig+0x2ec>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d48:	f7ff fa1c 	bl	8002184 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d50:	f7ff fa18 	bl	8002184 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e220      	b.n	80031a4 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d62:	4b17      	ldr	r3, [pc, #92]	; (8002dc0 <HAL_RCC_OscConfig+0x2e8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d048      	beq.n	8002e0c <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d008      	beq.n	8002d94 <HAL_RCC_OscConfig+0x2bc>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d004      	beq.n	8002d94 <HAL_RCC_OscConfig+0x2bc>
 8002d8a:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8002d8e:	480b      	ldr	r0, [pc, #44]	; (8002dbc <HAL_RCC_OscConfig+0x2e4>)
 8002d90:	f7fe ff23 	bl	8001bda <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d021      	beq.n	8002de0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d9c:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <HAL_RCC_OscConfig+0x2f0>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da2:	f7ff f9ef 	bl	8002184 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da8:	e010      	b.n	8002dcc <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002daa:	f7ff f9eb 	bl	8002184 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d909      	bls.n	8002dcc <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e1f3      	b.n	80031a4 <HAL_RCC_OscConfig+0x6cc>
 8002dbc:	080077c0 	.word	0x080077c0
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	42420000 	.word	0x42420000
 8002dc8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dcc:	4b67      	ldr	r3, [pc, #412]	; (8002f6c <HAL_RCC_OscConfig+0x494>)
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0e8      	beq.n	8002daa <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dd8:	2001      	movs	r0, #1
 8002dda:	f000 fc0f 	bl	80035fc <RCC_Delay>
 8002dde:	e015      	b.n	8002e0c <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de0:	4b63      	ldr	r3, [pc, #396]	; (8002f70 <HAL_RCC_OscConfig+0x498>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de6:	f7ff f9cd 	bl	8002184 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dee:	f7ff f9c9 	bl	8002184 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e1d1      	b.n	80031a4 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e00:	4b5a      	ldr	r3, [pc, #360]	; (8002f6c <HAL_RCC_OscConfig+0x494>)
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1f0      	bne.n	8002dee <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 80c0 	beq.w	8002f9a <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00c      	beq.n	8002e40 <HAL_RCC_OscConfig+0x368>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d008      	beq.n	8002e40 <HAL_RCC_OscConfig+0x368>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	2b05      	cmp	r3, #5
 8002e34:	d004      	beq.n	8002e40 <HAL_RCC_OscConfig+0x368>
 8002e36:	f240 2111 	movw	r1, #529	; 0x211
 8002e3a:	484e      	ldr	r0, [pc, #312]	; (8002f74 <HAL_RCC_OscConfig+0x49c>)
 8002e3c:	f7fe fecd 	bl	8001bda <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e40:	4b4a      	ldr	r3, [pc, #296]	; (8002f6c <HAL_RCC_OscConfig+0x494>)
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10d      	bne.n	8002e68 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e4c:	4b47      	ldr	r3, [pc, #284]	; (8002f6c <HAL_RCC_OscConfig+0x494>)
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	4a46      	ldr	r2, [pc, #280]	; (8002f6c <HAL_RCC_OscConfig+0x494>)
 8002e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e56:	61d3      	str	r3, [r2, #28]
 8002e58:	4b44      	ldr	r3, [pc, #272]	; (8002f6c <HAL_RCC_OscConfig+0x494>)
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e60:	60bb      	str	r3, [r7, #8]
 8002e62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e64:	2301      	movs	r3, #1
 8002e66:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e68:	4b43      	ldr	r3, [pc, #268]	; (8002f78 <HAL_RCC_OscConfig+0x4a0>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d118      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e74:	4b40      	ldr	r3, [pc, #256]	; (8002f78 <HAL_RCC_OscConfig+0x4a0>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a3f      	ldr	r2, [pc, #252]	; (8002f78 <HAL_RCC_OscConfig+0x4a0>)
 8002e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e80:	f7ff f980 	bl	8002184 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e88:	f7ff f97c 	bl	8002184 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b64      	cmp	r3, #100	; 0x64
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e184      	b.n	80031a4 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9a:	4b37      	ldr	r3, [pc, #220]	; (8002f78 <HAL_RCC_OscConfig+0x4a0>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0f0      	beq.n	8002e88 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d106      	bne.n	8002ebc <HAL_RCC_OscConfig+0x3e4>
 8002eae:	4b2f      	ldr	r3, [pc, #188]	; (8002f6c <HAL_RCC_OscConfig+0x494>)
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	4a2e      	ldr	r2, [pc, #184]	; (8002f6c <HAL_RCC_OscConfig+0x494>)
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	6213      	str	r3, [r2, #32]
 8002eba:	e02d      	b.n	8002f18 <HAL_RCC_OscConfig+0x440>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10c      	bne.n	8002ede <HAL_RCC_OscConfig+0x406>
 8002ec4:	4b29      	ldr	r3, [pc, #164]	; (8002f6c <HAL_RCC_OscConfig+0x494>)
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	4a28      	ldr	r2, [pc, #160]	; (8002f6c <HAL_RCC_OscConfig+0x494>)
 8002eca:	f023 0301 	bic.w	r3, r3, #1
 8002ece:	6213      	str	r3, [r2, #32]
 8002ed0:	4b26      	ldr	r3, [pc, #152]	; (8002f6c <HAL_RCC_OscConfig+0x494>)
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	4a25      	ldr	r2, [pc, #148]	; (8002f6c <HAL_RCC_OscConfig+0x494>)
 8002ed6:	f023 0304 	bic.w	r3, r3, #4
 8002eda:	6213      	str	r3, [r2, #32]
 8002edc:	e01c      	b.n	8002f18 <HAL_RCC_OscConfig+0x440>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	2b05      	cmp	r3, #5
 8002ee4:	d10c      	bne.n	8002f00 <HAL_RCC_OscConfig+0x428>
 8002ee6:	4b21      	ldr	r3, [pc, #132]	; (8002f6c <HAL_RCC_OscConfig+0x494>)
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	4a20      	ldr	r2, [pc, #128]	; (8002f6c <HAL_RCC_OscConfig+0x494>)
 8002eec:	f043 0304 	orr.w	r3, r3, #4
 8002ef0:	6213      	str	r3, [r2, #32]
 8002ef2:	4b1e      	ldr	r3, [pc, #120]	; (8002f6c <HAL_RCC_OscConfig+0x494>)
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	4a1d      	ldr	r2, [pc, #116]	; (8002f6c <HAL_RCC_OscConfig+0x494>)
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	6213      	str	r3, [r2, #32]
 8002efe:	e00b      	b.n	8002f18 <HAL_RCC_OscConfig+0x440>
 8002f00:	4b1a      	ldr	r3, [pc, #104]	; (8002f6c <HAL_RCC_OscConfig+0x494>)
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	4a19      	ldr	r2, [pc, #100]	; (8002f6c <HAL_RCC_OscConfig+0x494>)
 8002f06:	f023 0301 	bic.w	r3, r3, #1
 8002f0a:	6213      	str	r3, [r2, #32]
 8002f0c:	4b17      	ldr	r3, [pc, #92]	; (8002f6c <HAL_RCC_OscConfig+0x494>)
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	4a16      	ldr	r2, [pc, #88]	; (8002f6c <HAL_RCC_OscConfig+0x494>)
 8002f12:	f023 0304 	bic.w	r3, r3, #4
 8002f16:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d015      	beq.n	8002f4c <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f20:	f7ff f930 	bl	8002184 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f26:	e00a      	b.n	8002f3e <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f28:	f7ff f92c 	bl	8002184 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e132      	b.n	80031a4 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f3e:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <HAL_RCC_OscConfig+0x494>)
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0ee      	beq.n	8002f28 <HAL_RCC_OscConfig+0x450>
 8002f4a:	e01d      	b.n	8002f88 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f4c:	f7ff f91a 	bl	8002184 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f52:	e013      	b.n	8002f7c <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f54:	f7ff f916 	bl	8002184 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d90a      	bls.n	8002f7c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e11c      	b.n	80031a4 <HAL_RCC_OscConfig+0x6cc>
 8002f6a:	bf00      	nop
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	42420480 	.word	0x42420480
 8002f74:	080077c0 	.word	0x080077c0
 8002f78:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f7c:	4b8b      	ldr	r3, [pc, #556]	; (80031ac <HAL_RCC_OscConfig+0x6d4>)
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1e5      	bne.n	8002f54 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f88:	7dfb      	ldrb	r3, [r7, #23]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d105      	bne.n	8002f9a <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f8e:	4b87      	ldr	r3, [pc, #540]	; (80031ac <HAL_RCC_OscConfig+0x6d4>)
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	4a86      	ldr	r2, [pc, #536]	; (80031ac <HAL_RCC_OscConfig+0x6d4>)
 8002f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f98:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00c      	beq.n	8002fbc <HAL_RCC_OscConfig+0x4e4>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d008      	beq.n	8002fbc <HAL_RCC_OscConfig+0x4e4>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d004      	beq.n	8002fbc <HAL_RCC_OscConfig+0x4e4>
 8002fb2:	f240 21af 	movw	r1, #687	; 0x2af
 8002fb6:	487e      	ldr	r0, [pc, #504]	; (80031b0 <HAL_RCC_OscConfig+0x6d8>)
 8002fb8:	f7fe fe0f 	bl	8001bda <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 80ee 	beq.w	80031a2 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fc6:	4b79      	ldr	r3, [pc, #484]	; (80031ac <HAL_RCC_OscConfig+0x6d4>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f003 030c 	and.w	r3, r3, #12
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	f000 80ce 	beq.w	8003170 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	f040 80b2 	bne.w	8003142 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d009      	beq.n	8002ffa <HAL_RCC_OscConfig+0x522>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fee:	d004      	beq.n	8002ffa <HAL_RCC_OscConfig+0x522>
 8002ff0:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8002ff4:	486e      	ldr	r0, [pc, #440]	; (80031b0 <HAL_RCC_OscConfig+0x6d8>)
 8002ff6:	f7fe fdf0 	bl	8001bda <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d04a      	beq.n	8003098 <HAL_RCC_OscConfig+0x5c0>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800300a:	d045      	beq.n	8003098 <HAL_RCC_OscConfig+0x5c0>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003014:	d040      	beq.n	8003098 <HAL_RCC_OscConfig+0x5c0>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800301e:	d03b      	beq.n	8003098 <HAL_RCC_OscConfig+0x5c0>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003028:	d036      	beq.n	8003098 <HAL_RCC_OscConfig+0x5c0>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003032:	d031      	beq.n	8003098 <HAL_RCC_OscConfig+0x5c0>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800303c:	d02c      	beq.n	8003098 <HAL_RCC_OscConfig+0x5c0>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003046:	d027      	beq.n	8003098 <HAL_RCC_OscConfig+0x5c0>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003050:	d022      	beq.n	8003098 <HAL_RCC_OscConfig+0x5c0>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800305a:	d01d      	beq.n	8003098 <HAL_RCC_OscConfig+0x5c0>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003064:	d018      	beq.n	8003098 <HAL_RCC_OscConfig+0x5c0>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800306e:	d013      	beq.n	8003098 <HAL_RCC_OscConfig+0x5c0>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003078:	d00e      	beq.n	8003098 <HAL_RCC_OscConfig+0x5c0>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8003082:	d009      	beq.n	8003098 <HAL_RCC_OscConfig+0x5c0>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800308c:	d004      	beq.n	8003098 <HAL_RCC_OscConfig+0x5c0>
 800308e:	f240 21b9 	movw	r1, #697	; 0x2b9
 8003092:	4847      	ldr	r0, [pc, #284]	; (80031b0 <HAL_RCC_OscConfig+0x6d8>)
 8003094:	f7fe fda1 	bl	8001bda <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003098:	4b46      	ldr	r3, [pc, #280]	; (80031b4 <HAL_RCC_OscConfig+0x6dc>)
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309e:	f7ff f871 	bl	8002184 <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a4:	e008      	b.n	80030b8 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a6:	f7ff f86d 	bl	8002184 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e075      	b.n	80031a4 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030b8:	4b3c      	ldr	r3, [pc, #240]	; (80031ac <HAL_RCC_OscConfig+0x6d4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1f0      	bne.n	80030a6 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030cc:	d116      	bne.n	80030fc <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d009      	beq.n	80030ea <HAL_RCC_OscConfig+0x612>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030de:	d004      	beq.n	80030ea <HAL_RCC_OscConfig+0x612>
 80030e0:	f240 21cf 	movw	r1, #719	; 0x2cf
 80030e4:	4832      	ldr	r0, [pc, #200]	; (80031b0 <HAL_RCC_OscConfig+0x6d8>)
 80030e6:	f7fe fd78 	bl	8001bda <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030ea:	4b30      	ldr	r3, [pc, #192]	; (80031ac <HAL_RCC_OscConfig+0x6d4>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	492d      	ldr	r1, [pc, #180]	; (80031ac <HAL_RCC_OscConfig+0x6d4>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030fc:	4b2b      	ldr	r3, [pc, #172]	; (80031ac <HAL_RCC_OscConfig+0x6d4>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a19      	ldr	r1, [r3, #32]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	430b      	orrs	r3, r1
 800310e:	4927      	ldr	r1, [pc, #156]	; (80031ac <HAL_RCC_OscConfig+0x6d4>)
 8003110:	4313      	orrs	r3, r2
 8003112:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003114:	4b27      	ldr	r3, [pc, #156]	; (80031b4 <HAL_RCC_OscConfig+0x6dc>)
 8003116:	2201      	movs	r2, #1
 8003118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311a:	f7ff f833 	bl	8002184 <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003122:	f7ff f82f 	bl	8002184 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e037      	b.n	80031a4 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003134:	4b1d      	ldr	r3, [pc, #116]	; (80031ac <HAL_RCC_OscConfig+0x6d4>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0f0      	beq.n	8003122 <HAL_RCC_OscConfig+0x64a>
 8003140:	e02f      	b.n	80031a2 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003142:	4b1c      	ldr	r3, [pc, #112]	; (80031b4 <HAL_RCC_OscConfig+0x6dc>)
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003148:	f7ff f81c 	bl	8002184 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003150:	f7ff f818 	bl	8002184 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e020      	b.n	80031a4 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003162:	4b12      	ldr	r3, [pc, #72]	; (80031ac <HAL_RCC_OscConfig+0x6d4>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f0      	bne.n	8003150 <HAL_RCC_OscConfig+0x678>
 800316e:	e018      	b.n	80031a2 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e013      	b.n	80031a4 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800317c:	4b0b      	ldr	r3, [pc, #44]	; (80031ac <HAL_RCC_OscConfig+0x6d4>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	429a      	cmp	r2, r3
 800318e:	d106      	bne.n	800319e <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319a:	429a      	cmp	r2, r3
 800319c:	d001      	beq.n	80031a2 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3718      	adds	r7, #24
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40021000 	.word	0x40021000
 80031b0:	080077c0 	.word	0x080077c0
 80031b4:	42420060 	.word	0x42420060

080031b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e176      	b.n	80034ba <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d116      	bne.n	8003206 <HAL_RCC_ClockConfig+0x4e>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d110      	bne.n	8003206 <HAL_RCC_ClockConfig+0x4e>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10a      	bne.n	8003206 <HAL_RCC_ClockConfig+0x4e>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d104      	bne.n	8003206 <HAL_RCC_ClockConfig+0x4e>
 80031fc:	f44f 714e 	mov.w	r1, #824	; 0x338
 8003200:	4874      	ldr	r0, [pc, #464]	; (80033d4 <HAL_RCC_ClockConfig+0x21c>)
 8003202:	f7fe fcea 	bl	8001bda <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00a      	beq.n	8003222 <HAL_RCC_ClockConfig+0x6a>
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d007      	beq.n	8003222 <HAL_RCC_ClockConfig+0x6a>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	2b02      	cmp	r3, #2
 8003216:	d004      	beq.n	8003222 <HAL_RCC_ClockConfig+0x6a>
 8003218:	f240 3139 	movw	r1, #825	; 0x339
 800321c:	486d      	ldr	r0, [pc, #436]	; (80033d4 <HAL_RCC_ClockConfig+0x21c>)
 800321e:	f7fe fcdc 	bl	8001bda <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003222:	4b6d      	ldr	r3, [pc, #436]	; (80033d8 <HAL_RCC_ClockConfig+0x220>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d910      	bls.n	8003252 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003230:	4b69      	ldr	r3, [pc, #420]	; (80033d8 <HAL_RCC_ClockConfig+0x220>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f023 0207 	bic.w	r2, r3, #7
 8003238:	4967      	ldr	r1, [pc, #412]	; (80033d8 <HAL_RCC_ClockConfig+0x220>)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	4313      	orrs	r3, r2
 800323e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003240:	4b65      	ldr	r3, [pc, #404]	; (80033d8 <HAL_RCC_ClockConfig+0x220>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	429a      	cmp	r2, r3
 800324c:	d001      	beq.n	8003252 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e133      	b.n	80034ba <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d049      	beq.n	80032f2 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b00      	cmp	r3, #0
 8003268:	d005      	beq.n	8003276 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800326a:	4b5c      	ldr	r3, [pc, #368]	; (80033dc <HAL_RCC_ClockConfig+0x224>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	4a5b      	ldr	r2, [pc, #364]	; (80033dc <HAL_RCC_ClockConfig+0x224>)
 8003270:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003274:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003282:	4b56      	ldr	r3, [pc, #344]	; (80033dc <HAL_RCC_ClockConfig+0x224>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	4a55      	ldr	r2, [pc, #340]	; (80033dc <HAL_RCC_ClockConfig+0x224>)
 8003288:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800328c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d024      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x128>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2b80      	cmp	r3, #128	; 0x80
 800329c:	d020      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x128>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2b90      	cmp	r3, #144	; 0x90
 80032a4:	d01c      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x128>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	2ba0      	cmp	r3, #160	; 0xa0
 80032ac:	d018      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x128>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	2bb0      	cmp	r3, #176	; 0xb0
 80032b4:	d014      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x128>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2bc0      	cmp	r3, #192	; 0xc0
 80032bc:	d010      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x128>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	2bd0      	cmp	r3, #208	; 0xd0
 80032c4:	d00c      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x128>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	2be0      	cmp	r3, #224	; 0xe0
 80032cc:	d008      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x128>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2bf0      	cmp	r3, #240	; 0xf0
 80032d4:	d004      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x128>
 80032d6:	f240 315f 	movw	r1, #863	; 0x35f
 80032da:	483e      	ldr	r0, [pc, #248]	; (80033d4 <HAL_RCC_ClockConfig+0x21c>)
 80032dc:	f7fe fc7d 	bl	8001bda <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032e0:	4b3e      	ldr	r3, [pc, #248]	; (80033dc <HAL_RCC_ClockConfig+0x224>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	493b      	ldr	r1, [pc, #236]	; (80033dc <HAL_RCC_ClockConfig+0x224>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d051      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00c      	beq.n	8003320 <HAL_RCC_ClockConfig+0x168>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d008      	beq.n	8003320 <HAL_RCC_ClockConfig+0x168>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b02      	cmp	r3, #2
 8003314:	d004      	beq.n	8003320 <HAL_RCC_ClockConfig+0x168>
 8003316:	f240 3166 	movw	r1, #870	; 0x366
 800331a:	482e      	ldr	r0, [pc, #184]	; (80033d4 <HAL_RCC_ClockConfig+0x21c>)
 800331c:	f7fe fc5d 	bl	8001bda <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d107      	bne.n	8003338 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003328:	4b2c      	ldr	r3, [pc, #176]	; (80033dc <HAL_RCC_ClockConfig+0x224>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d115      	bne.n	8003360 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e0c0      	b.n	80034ba <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b02      	cmp	r3, #2
 800333e:	d107      	bne.n	8003350 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003340:	4b26      	ldr	r3, [pc, #152]	; (80033dc <HAL_RCC_ClockConfig+0x224>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d109      	bne.n	8003360 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e0b4      	b.n	80034ba <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003350:	4b22      	ldr	r3, [pc, #136]	; (80033dc <HAL_RCC_ClockConfig+0x224>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e0ac      	b.n	80034ba <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003360:	4b1e      	ldr	r3, [pc, #120]	; (80033dc <HAL_RCC_ClockConfig+0x224>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f023 0203 	bic.w	r2, r3, #3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	491b      	ldr	r1, [pc, #108]	; (80033dc <HAL_RCC_ClockConfig+0x224>)
 800336e:	4313      	orrs	r3, r2
 8003370:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003372:	f7fe ff07 	bl	8002184 <HAL_GetTick>
 8003376:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003378:	e00a      	b.n	8003390 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800337a:	f7fe ff03 	bl	8002184 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	f241 3288 	movw	r2, #5000	; 0x1388
 8003388:	4293      	cmp	r3, r2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e094      	b.n	80034ba <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003390:	4b12      	ldr	r3, [pc, #72]	; (80033dc <HAL_RCC_ClockConfig+0x224>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f003 020c 	and.w	r2, r3, #12
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	429a      	cmp	r2, r3
 80033a0:	d1eb      	bne.n	800337a <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033a2:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <HAL_RCC_ClockConfig+0x220>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d217      	bcs.n	80033e0 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b0:	4b09      	ldr	r3, [pc, #36]	; (80033d8 <HAL_RCC_ClockConfig+0x220>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f023 0207 	bic.w	r2, r3, #7
 80033b8:	4907      	ldr	r1, [pc, #28]	; (80033d8 <HAL_RCC_ClockConfig+0x220>)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	4313      	orrs	r3, r2
 80033be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c0:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <HAL_RCC_ClockConfig+0x220>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d008      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e073      	b.n	80034ba <HAL_RCC_ClockConfig+0x302>
 80033d2:	bf00      	nop
 80033d4:	080077c0 	.word	0x080077c0
 80033d8:	40022000 	.word	0x40022000
 80033dc:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d025      	beq.n	8003438 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d018      	beq.n	8003426 <HAL_RCC_ClockConfig+0x26e>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033fc:	d013      	beq.n	8003426 <HAL_RCC_ClockConfig+0x26e>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003406:	d00e      	beq.n	8003426 <HAL_RCC_ClockConfig+0x26e>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003410:	d009      	beq.n	8003426 <HAL_RCC_ClockConfig+0x26e>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800341a:	d004      	beq.n	8003426 <HAL_RCC_ClockConfig+0x26e>
 800341c:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8003420:	4828      	ldr	r0, [pc, #160]	; (80034c4 <HAL_RCC_ClockConfig+0x30c>)
 8003422:	f7fe fbda 	bl	8001bda <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003426:	4b28      	ldr	r3, [pc, #160]	; (80034c8 <HAL_RCC_ClockConfig+0x310>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	4925      	ldr	r1, [pc, #148]	; (80034c8 <HAL_RCC_ClockConfig+0x310>)
 8003434:	4313      	orrs	r3, r2
 8003436:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0308 	and.w	r3, r3, #8
 8003440:	2b00      	cmp	r3, #0
 8003442:	d026      	beq.n	8003492 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d018      	beq.n	800347e <HAL_RCC_ClockConfig+0x2c6>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003454:	d013      	beq.n	800347e <HAL_RCC_ClockConfig+0x2c6>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800345e:	d00e      	beq.n	800347e <HAL_RCC_ClockConfig+0x2c6>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003468:	d009      	beq.n	800347e <HAL_RCC_ClockConfig+0x2c6>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003472:	d004      	beq.n	800347e <HAL_RCC_ClockConfig+0x2c6>
 8003474:	f240 31ab 	movw	r1, #939	; 0x3ab
 8003478:	4812      	ldr	r0, [pc, #72]	; (80034c4 <HAL_RCC_ClockConfig+0x30c>)
 800347a:	f7fe fbae 	bl	8001bda <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800347e:	4b12      	ldr	r3, [pc, #72]	; (80034c8 <HAL_RCC_ClockConfig+0x310>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	490e      	ldr	r1, [pc, #56]	; (80034c8 <HAL_RCC_ClockConfig+0x310>)
 800348e:	4313      	orrs	r3, r2
 8003490:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003492:	f000 f821 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 8003496:	4602      	mov	r2, r0
 8003498:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <HAL_RCC_ClockConfig+0x310>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	091b      	lsrs	r3, r3, #4
 800349e:	f003 030f 	and.w	r3, r3, #15
 80034a2:	490a      	ldr	r1, [pc, #40]	; (80034cc <HAL_RCC_ClockConfig+0x314>)
 80034a4:	5ccb      	ldrb	r3, [r1, r3]
 80034a6:	fa22 f303 	lsr.w	r3, r2, r3
 80034aa:	4a09      	ldr	r2, [pc, #36]	; (80034d0 <HAL_RCC_ClockConfig+0x318>)
 80034ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034ae:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <HAL_RCC_ClockConfig+0x31c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fe fe24 	bl	8002100 <HAL_InitTick>

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	080077c0 	.word	0x080077c0
 80034c8:	40021000 	.word	0x40021000
 80034cc:	080078c4 	.word	0x080078c4
 80034d0:	20000000 	.word	0x20000000
 80034d4:	20000008 	.word	0x20000008

080034d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034d8:	b490      	push	{r4, r7}
 80034da:	b08a      	sub	sp, #40	; 0x28
 80034dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80034de:	4b2a      	ldr	r3, [pc, #168]	; (8003588 <HAL_RCC_GetSysClockFreq+0xb0>)
 80034e0:	1d3c      	adds	r4, r7, #4
 80034e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80034e8:	f240 2301 	movw	r3, #513	; 0x201
 80034ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	61fb      	str	r3, [r7, #28]
 80034f2:	2300      	movs	r3, #0
 80034f4:	61bb      	str	r3, [r7, #24]
 80034f6:	2300      	movs	r3, #0
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24
 80034fa:	2300      	movs	r3, #0
 80034fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034fe:	2300      	movs	r3, #0
 8003500:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003502:	4b22      	ldr	r3, [pc, #136]	; (800358c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	f003 030c 	and.w	r3, r3, #12
 800350e:	2b04      	cmp	r3, #4
 8003510:	d002      	beq.n	8003518 <HAL_RCC_GetSysClockFreq+0x40>
 8003512:	2b08      	cmp	r3, #8
 8003514:	d003      	beq.n	800351e <HAL_RCC_GetSysClockFreq+0x46>
 8003516:	e02d      	b.n	8003574 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003518:	4b1d      	ldr	r3, [pc, #116]	; (8003590 <HAL_RCC_GetSysClockFreq+0xb8>)
 800351a:	623b      	str	r3, [r7, #32]
      break;
 800351c:	e02d      	b.n	800357a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	0c9b      	lsrs	r3, r3, #18
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800352a:	4413      	add	r3, r2
 800352c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003530:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d013      	beq.n	8003564 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800353c:	4b13      	ldr	r3, [pc, #76]	; (800358c <HAL_RCC_GetSysClockFreq+0xb4>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	0c5b      	lsrs	r3, r3, #17
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800354a:	4413      	add	r3, r2
 800354c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003550:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	4a0e      	ldr	r2, [pc, #56]	; (8003590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003556:	fb02 f203 	mul.w	r2, r2, r3
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
 8003562:	e004      	b.n	800356e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	4a0b      	ldr	r2, [pc, #44]	; (8003594 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003568:	fb02 f303 	mul.w	r3, r2, r3
 800356c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	623b      	str	r3, [r7, #32]
      break;
 8003572:	e002      	b.n	800357a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003574:	4b06      	ldr	r3, [pc, #24]	; (8003590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003576:	623b      	str	r3, [r7, #32]
      break;
 8003578:	bf00      	nop
    }
  }
  return sysclockfreq;
 800357a:	6a3b      	ldr	r3, [r7, #32]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3728      	adds	r7, #40	; 0x28
 8003580:	46bd      	mov	sp, r7
 8003582:	bc90      	pop	{r4, r7}
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	080077f8 	.word	0x080077f8
 800358c:	40021000 	.word	0x40021000
 8003590:	007a1200 	.word	0x007a1200
 8003594:	003d0900 	.word	0x003d0900

08003598 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800359c:	4b02      	ldr	r3, [pc, #8]	; (80035a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800359e:	681b      	ldr	r3, [r3, #0]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bc80      	pop	{r7}
 80035a6:	4770      	bx	lr
 80035a8:	20000000 	.word	0x20000000

080035ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035b0:	f7ff fff2 	bl	8003598 <HAL_RCC_GetHCLKFreq>
 80035b4:	4602      	mov	r2, r0
 80035b6:	4b05      	ldr	r3, [pc, #20]	; (80035cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	0a1b      	lsrs	r3, r3, #8
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	4903      	ldr	r1, [pc, #12]	; (80035d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035c2:	5ccb      	ldrb	r3, [r1, r3]
 80035c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40021000 	.word	0x40021000
 80035d0:	080078d4 	.word	0x080078d4

080035d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035d8:	f7ff ffde 	bl	8003598 <HAL_RCC_GetHCLKFreq>
 80035dc:	4602      	mov	r2, r0
 80035de:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	0adb      	lsrs	r3, r3, #11
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	4903      	ldr	r1, [pc, #12]	; (80035f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035ea:	5ccb      	ldrb	r3, [r1, r3]
 80035ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40021000 	.word	0x40021000
 80035f8:	080078d4 	.word	0x080078d4

080035fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003604:	4b0a      	ldr	r3, [pc, #40]	; (8003630 <RCC_Delay+0x34>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a0a      	ldr	r2, [pc, #40]	; (8003634 <RCC_Delay+0x38>)
 800360a:	fba2 2303 	umull	r2, r3, r2, r3
 800360e:	0a5b      	lsrs	r3, r3, #9
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	fb02 f303 	mul.w	r3, r2, r3
 8003616:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003618:	bf00      	nop
  }
  while (Delay --);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	1e5a      	subs	r2, r3, #1
 800361e:	60fa      	str	r2, [r7, #12]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1f9      	bne.n	8003618 <RCC_Delay+0x1c>
}
 8003624:	bf00      	nop
 8003626:	bf00      	nop
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	bc80      	pop	{r7}
 800362e:	4770      	bx	lr
 8003630:	20000000 	.word	0x20000000
 8003634:	10624dd3 	.word	0x10624dd3

08003638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e093      	b.n	8003772 <HAL_TIM_Base_Init+0x13a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a4b      	ldr	r2, [pc, #300]	; (800377c <HAL_TIM_Base_Init+0x144>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d013      	beq.n	800367c <HAL_TIM_Base_Init+0x44>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800365c:	d00e      	beq.n	800367c <HAL_TIM_Base_Init+0x44>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a47      	ldr	r2, [pc, #284]	; (8003780 <HAL_TIM_Base_Init+0x148>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d009      	beq.n	800367c <HAL_TIM_Base_Init+0x44>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a45      	ldr	r2, [pc, #276]	; (8003784 <HAL_TIM_Base_Init+0x14c>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d004      	beq.n	800367c <HAL_TIM_Base_Init+0x44>
 8003672:	f240 1113 	movw	r1, #275	; 0x113
 8003676:	4844      	ldr	r0, [pc, #272]	; (8003788 <HAL_TIM_Base_Init+0x150>)
 8003678:	f7fe faaf 	bl	8001bda <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d014      	beq.n	80036ae <HAL_TIM_Base_Init+0x76>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	2b10      	cmp	r3, #16
 800368a:	d010      	beq.n	80036ae <HAL_TIM_Base_Init+0x76>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	2b20      	cmp	r3, #32
 8003692:	d00c      	beq.n	80036ae <HAL_TIM_Base_Init+0x76>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2b40      	cmp	r3, #64	; 0x40
 800369a:	d008      	beq.n	80036ae <HAL_TIM_Base_Init+0x76>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	2b60      	cmp	r3, #96	; 0x60
 80036a2:	d004      	beq.n	80036ae <HAL_TIM_Base_Init+0x76>
 80036a4:	f44f 718a 	mov.w	r1, #276	; 0x114
 80036a8:	4837      	ldr	r0, [pc, #220]	; (8003788 <HAL_TIM_Base_Init+0x150>)
 80036aa:	f7fe fa96 	bl	8001bda <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00e      	beq.n	80036d4 <HAL_TIM_Base_Init+0x9c>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036be:	d009      	beq.n	80036d4 <HAL_TIM_Base_Init+0x9c>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036c8:	d004      	beq.n	80036d4 <HAL_TIM_Base_Init+0x9c>
 80036ca:	f240 1115 	movw	r1, #277	; 0x115
 80036ce:	482e      	ldr	r0, [pc, #184]	; (8003788 <HAL_TIM_Base_Init+0x150>)
 80036d0:	f7fe fa83 	bl	8001bda <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d008      	beq.n	80036ee <HAL_TIM_Base_Init+0xb6>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	2b80      	cmp	r3, #128	; 0x80
 80036e2:	d004      	beq.n	80036ee <HAL_TIM_Base_Init+0xb6>
 80036e4:	f44f 718b 	mov.w	r1, #278	; 0x116
 80036e8:	4827      	ldr	r0, [pc, #156]	; (8003788 <HAL_TIM_Base_Init+0x150>)
 80036ea:	f7fe fa76 	bl	8001bda <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d106      	bne.n	8003708 <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7fe faa6 	bl	8001c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3304      	adds	r3, #4
 8003718:	4619      	mov	r1, r3
 800371a:	4610      	mov	r0, r2
 800371c:	f000 fc06 	bl	8003f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40012c00 	.word	0x40012c00
 8003780:	40000400 	.word	0x40000400
 8003784:	40000800 	.word	0x40000800
 8003788:	08007808 	.word	0x08007808

0800378c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d122      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d11b      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f06f 0202 	mvn.w	r2, #2
 80037b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 fb91 	bl	8003ef6 <HAL_TIM_IC_CaptureCallback>
 80037d4:	e005      	b.n	80037e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 fb84 	bl	8003ee4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 fb93 	bl	8003f08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d122      	bne.n	800383c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b04      	cmp	r3, #4
 8003802:	d11b      	bne.n	800383c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0204 	mvn.w	r2, #4
 800380c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2202      	movs	r2, #2
 8003812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 fb67 	bl	8003ef6 <HAL_TIM_IC_CaptureCallback>
 8003828:	e005      	b.n	8003836 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 fb5a 	bl	8003ee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 fb69 	bl	8003f08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	f003 0308 	and.w	r3, r3, #8
 8003846:	2b08      	cmp	r3, #8
 8003848:	d122      	bne.n	8003890 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f003 0308 	and.w	r3, r3, #8
 8003854:	2b08      	cmp	r3, #8
 8003856:	d11b      	bne.n	8003890 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f06f 0208 	mvn.w	r2, #8
 8003860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2204      	movs	r2, #4
 8003866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 fb3d 	bl	8003ef6 <HAL_TIM_IC_CaptureCallback>
 800387c:	e005      	b.n	800388a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 fb30 	bl	8003ee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 fb3f 	bl	8003f08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	f003 0310 	and.w	r3, r3, #16
 800389a:	2b10      	cmp	r3, #16
 800389c:	d122      	bne.n	80038e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f003 0310 	and.w	r3, r3, #16
 80038a8:	2b10      	cmp	r3, #16
 80038aa:	d11b      	bne.n	80038e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f06f 0210 	mvn.w	r2, #16
 80038b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2208      	movs	r2, #8
 80038ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fb13 	bl	8003ef6 <HAL_TIM_IC_CaptureCallback>
 80038d0:	e005      	b.n	80038de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 fb06 	bl	8003ee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 fb15 	bl	8003f08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d10e      	bne.n	8003910 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d107      	bne.n	8003910 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f06f 0201 	mvn.w	r2, #1
 8003908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7fe fb70 	bl	8001ff0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391a:	2b80      	cmp	r3, #128	; 0x80
 800391c:	d10e      	bne.n	800393c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003928:	2b80      	cmp	r3, #128	; 0x80
 800392a:	d107      	bne.n	800393c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 fca3 	bl	8004282 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003946:	2b40      	cmp	r3, #64	; 0x40
 8003948:	d10e      	bne.n	8003968 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003954:	2b40      	cmp	r3, #64	; 0x40
 8003956:	d107      	bne.n	8003968 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 fad9 	bl	8003f1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f003 0320 	and.w	r3, r3, #32
 8003972:	2b20      	cmp	r3, #32
 8003974:	d10e      	bne.n	8003994 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f003 0320 	and.w	r3, r3, #32
 8003980:	2b20      	cmp	r3, #32
 8003982:	d107      	bne.n	8003994 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f06f 0220 	mvn.w	r2, #32
 800398c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 fc6e 	bl	8004270 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003994:	bf00      	nop
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <HAL_TIM_ConfigClockSource+0x18>
 80039b0:	2302      	movs	r3, #2
 80039b2:	e28b      	b.n	8003ecc <HAL_TIM_ConfigClockSource+0x530>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039cc:	d029      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x86>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039d6:	d024      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x86>
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d020      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x86>
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b10      	cmp	r3, #16
 80039e6:	d01c      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x86>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2b20      	cmp	r3, #32
 80039ee:	d018      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x86>
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b30      	cmp	r3, #48	; 0x30
 80039f6:	d014      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x86>
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b40      	cmp	r3, #64	; 0x40
 80039fe:	d010      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x86>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b50      	cmp	r3, #80	; 0x50
 8003a06:	d00c      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x86>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2b60      	cmp	r3, #96	; 0x60
 8003a0e:	d008      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x86>
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b70      	cmp	r3, #112	; 0x70
 8003a16:	d004      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x86>
 8003a18:	f241 411d 	movw	r1, #5149	; 0x141d
 8003a1c:	489e      	ldr	r0, [pc, #632]	; (8003c98 <HAL_TIM_ConfigClockSource+0x2fc>)
 8003a1e:	f7fe f8dc 	bl	8001bda <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a30:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a38:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a4a:	f000 80be 	beq.w	8003bca <HAL_TIM_ConfigClockSource+0x22e>
 8003a4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a52:	f200 822f 	bhi.w	8003eb4 <HAL_TIM_ConfigClockSource+0x518>
 8003a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a5a:	d02d      	beq.n	8003ab8 <HAL_TIM_ConfigClockSource+0x11c>
 8003a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a60:	f200 8228 	bhi.w	8003eb4 <HAL_TIM_ConfigClockSource+0x518>
 8003a64:	2b70      	cmp	r3, #112	; 0x70
 8003a66:	d045      	beq.n	8003af4 <HAL_TIM_ConfigClockSource+0x158>
 8003a68:	2b70      	cmp	r3, #112	; 0x70
 8003a6a:	f200 8223 	bhi.w	8003eb4 <HAL_TIM_ConfigClockSource+0x518>
 8003a6e:	2b60      	cmp	r3, #96	; 0x60
 8003a70:	f000 8166 	beq.w	8003d40 <HAL_TIM_ConfigClockSource+0x3a4>
 8003a74:	2b60      	cmp	r3, #96	; 0x60
 8003a76:	f200 821d 	bhi.w	8003eb4 <HAL_TIM_ConfigClockSource+0x518>
 8003a7a:	2b50      	cmp	r3, #80	; 0x50
 8003a7c:	f000 8114 	beq.w	8003ca8 <HAL_TIM_ConfigClockSource+0x30c>
 8003a80:	2b50      	cmp	r3, #80	; 0x50
 8003a82:	f200 8217 	bhi.w	8003eb4 <HAL_TIM_ConfigClockSource+0x518>
 8003a86:	2b40      	cmp	r3, #64	; 0x40
 8003a88:	f000 81a6 	beq.w	8003dd8 <HAL_TIM_ConfigClockSource+0x43c>
 8003a8c:	2b40      	cmp	r3, #64	; 0x40
 8003a8e:	f200 8211 	bhi.w	8003eb4 <HAL_TIM_ConfigClockSource+0x518>
 8003a92:	2b30      	cmp	r3, #48	; 0x30
 8003a94:	f000 81ec 	beq.w	8003e70 <HAL_TIM_ConfigClockSource+0x4d4>
 8003a98:	2b30      	cmp	r3, #48	; 0x30
 8003a9a:	f200 820b 	bhi.w	8003eb4 <HAL_TIM_ConfigClockSource+0x518>
 8003a9e:	2b20      	cmp	r3, #32
 8003aa0:	f000 81e6 	beq.w	8003e70 <HAL_TIM_ConfigClockSource+0x4d4>
 8003aa4:	2b20      	cmp	r3, #32
 8003aa6:	f200 8205 	bhi.w	8003eb4 <HAL_TIM_ConfigClockSource+0x518>
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 81e0 	beq.w	8003e70 <HAL_TIM_ConfigClockSource+0x4d4>
 8003ab0:	2b10      	cmp	r3, #16
 8003ab2:	f000 81dd 	beq.w	8003e70 <HAL_TIM_ConfigClockSource+0x4d4>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003ab6:	e1fd      	b.n	8003eb4 <HAL_TIM_ConfigClockSource+0x518>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a77      	ldr	r2, [pc, #476]	; (8003c9c <HAL_TIM_ConfigClockSource+0x300>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	f000 81fa 	beq.w	8003eb8 <HAL_TIM_ConfigClockSource+0x51c>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003acc:	f000 81f4 	beq.w	8003eb8 <HAL_TIM_ConfigClockSource+0x51c>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a72      	ldr	r2, [pc, #456]	; (8003ca0 <HAL_TIM_ConfigClockSource+0x304>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	f000 81ee 	beq.w	8003eb8 <HAL_TIM_ConfigClockSource+0x51c>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a70      	ldr	r2, [pc, #448]	; (8003ca4 <HAL_TIM_ConfigClockSource+0x308>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	f000 81e8 	beq.w	8003eb8 <HAL_TIM_ConfigClockSource+0x51c>
 8003ae8:	f241 4129 	movw	r1, #5161	; 0x1429
 8003aec:	486a      	ldr	r0, [pc, #424]	; (8003c98 <HAL_TIM_ConfigClockSource+0x2fc>)
 8003aee:	f7fe f874 	bl	8001bda <assert_failed>
      break;
 8003af2:	e1e1      	b.n	8003eb8 <HAL_TIM_ConfigClockSource+0x51c>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a68      	ldr	r2, [pc, #416]	; (8003c9c <HAL_TIM_ConfigClockSource+0x300>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d013      	beq.n	8003b26 <HAL_TIM_ConfigClockSource+0x18a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b06:	d00e      	beq.n	8003b26 <HAL_TIM_ConfigClockSource+0x18a>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a64      	ldr	r2, [pc, #400]	; (8003ca0 <HAL_TIM_ConfigClockSource+0x304>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d009      	beq.n	8003b26 <HAL_TIM_ConfigClockSource+0x18a>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a63      	ldr	r2, [pc, #396]	; (8003ca4 <HAL_TIM_ConfigClockSource+0x308>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d004      	beq.n	8003b26 <HAL_TIM_ConfigClockSource+0x18a>
 8003b1c:	f241 4130 	movw	r1, #5168	; 0x1430
 8003b20:	485d      	ldr	r0, [pc, #372]	; (8003c98 <HAL_TIM_ConfigClockSource+0x2fc>)
 8003b22:	f7fe f85a 	bl	8001bda <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d013      	beq.n	8003b56 <HAL_TIM_ConfigClockSource+0x1ba>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b36:	d00e      	beq.n	8003b56 <HAL_TIM_ConfigClockSource+0x1ba>
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b40:	d009      	beq.n	8003b56 <HAL_TIM_ConfigClockSource+0x1ba>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b4a:	d004      	beq.n	8003b56 <HAL_TIM_ConfigClockSource+0x1ba>
 8003b4c:	f241 4133 	movw	r1, #5171	; 0x1433
 8003b50:	4851      	ldr	r0, [pc, #324]	; (8003c98 <HAL_TIM_ConfigClockSource+0x2fc>)
 8003b52:	f7fe f842 	bl	8001bda <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b5e:	d014      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0x1ee>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d010      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0x1ee>
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00c      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0x1ee>
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d008      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0x1ee>
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b0a      	cmp	r3, #10
 8003b7e:	d004      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0x1ee>
 8003b80:	f241 4134 	movw	r1, #5172	; 0x1434
 8003b84:	4844      	ldr	r0, [pc, #272]	; (8003c98 <HAL_TIM_ConfigClockSource+0x2fc>)
 8003b86:	f7fe f828 	bl	8001bda <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	2b0f      	cmp	r3, #15
 8003b90:	d904      	bls.n	8003b9c <HAL_TIM_ConfigClockSource+0x200>
 8003b92:	f241 4135 	movw	r1, #5173	; 0x1435
 8003b96:	4840      	ldr	r0, [pc, #256]	; (8003c98 <HAL_TIM_ConfigClockSource+0x2fc>)
 8003b98:	f7fe f81f 	bl	8001bda <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6818      	ldr	r0, [r3, #0]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	6899      	ldr	r1, [r3, #8]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f000 fa97 	bl	80040de <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bbe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	609a      	str	r2, [r3, #8]
      break;
 8003bc8:	e177      	b.n	8003eba <HAL_TIM_ConfigClockSource+0x51e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a33      	ldr	r2, [pc, #204]	; (8003c9c <HAL_TIM_ConfigClockSource+0x300>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d013      	beq.n	8003bfc <HAL_TIM_ConfigClockSource+0x260>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bdc:	d00e      	beq.n	8003bfc <HAL_TIM_ConfigClockSource+0x260>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a2f      	ldr	r2, [pc, #188]	; (8003ca0 <HAL_TIM_ConfigClockSource+0x304>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d009      	beq.n	8003bfc <HAL_TIM_ConfigClockSource+0x260>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a2d      	ldr	r2, [pc, #180]	; (8003ca4 <HAL_TIM_ConfigClockSource+0x308>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d004      	beq.n	8003bfc <HAL_TIM_ConfigClockSource+0x260>
 8003bf2:	f241 4148 	movw	r1, #5192	; 0x1448
 8003bf6:	4828      	ldr	r0, [pc, #160]	; (8003c98 <HAL_TIM_ConfigClockSource+0x2fc>)
 8003bf8:	f7fd ffef 	bl	8001bda <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d013      	beq.n	8003c2c <HAL_TIM_ConfigClockSource+0x290>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c0c:	d00e      	beq.n	8003c2c <HAL_TIM_ConfigClockSource+0x290>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c16:	d009      	beq.n	8003c2c <HAL_TIM_ConfigClockSource+0x290>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c20:	d004      	beq.n	8003c2c <HAL_TIM_ConfigClockSource+0x290>
 8003c22:	f241 414b 	movw	r1, #5195	; 0x144b
 8003c26:	481c      	ldr	r0, [pc, #112]	; (8003c98 <HAL_TIM_ConfigClockSource+0x2fc>)
 8003c28:	f7fd ffd7 	bl	8001bda <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c34:	d014      	beq.n	8003c60 <HAL_TIM_ConfigClockSource+0x2c4>
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d010      	beq.n	8003c60 <HAL_TIM_ConfigClockSource+0x2c4>
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00c      	beq.n	8003c60 <HAL_TIM_ConfigClockSource+0x2c4>
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d008      	beq.n	8003c60 <HAL_TIM_ConfigClockSource+0x2c4>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2b0a      	cmp	r3, #10
 8003c54:	d004      	beq.n	8003c60 <HAL_TIM_ConfigClockSource+0x2c4>
 8003c56:	f241 414c 	movw	r1, #5196	; 0x144c
 8003c5a:	480f      	ldr	r0, [pc, #60]	; (8003c98 <HAL_TIM_ConfigClockSource+0x2fc>)
 8003c5c:	f7fd ffbd 	bl	8001bda <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	2b0f      	cmp	r3, #15
 8003c66:	d904      	bls.n	8003c72 <HAL_TIM_ConfigClockSource+0x2d6>
 8003c68:	f241 414d 	movw	r1, #5197	; 0x144d
 8003c6c:	480a      	ldr	r0, [pc, #40]	; (8003c98 <HAL_TIM_ConfigClockSource+0x2fc>)
 8003c6e:	f7fd ffb4 	bl	8001bda <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6818      	ldr	r0, [r3, #0]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	6899      	ldr	r1, [r3, #8]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	f000 fa2c 	bl	80040de <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c94:	609a      	str	r2, [r3, #8]
      break;
 8003c96:	e110      	b.n	8003eba <HAL_TIM_ConfigClockSource+0x51e>
 8003c98:	08007808 	.word	0x08007808
 8003c9c:	40012c00 	.word	0x40012c00
 8003ca0:	40000400 	.word	0x40000400
 8003ca4:	40000800 	.word	0x40000800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a89      	ldr	r2, [pc, #548]	; (8003ed4 <HAL_TIM_ConfigClockSource+0x538>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d013      	beq.n	8003cda <HAL_TIM_ConfigClockSource+0x33e>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cba:	d00e      	beq.n	8003cda <HAL_TIM_ConfigClockSource+0x33e>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a85      	ldr	r2, [pc, #532]	; (8003ed8 <HAL_TIM_ConfigClockSource+0x53c>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d009      	beq.n	8003cda <HAL_TIM_ConfigClockSource+0x33e>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a84      	ldr	r2, [pc, #528]	; (8003edc <HAL_TIM_ConfigClockSource+0x540>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d004      	beq.n	8003cda <HAL_TIM_ConfigClockSource+0x33e>
 8003cd0:	f241 415c 	movw	r1, #5212	; 0x145c
 8003cd4:	4882      	ldr	r0, [pc, #520]	; (8003ee0 <HAL_TIM_ConfigClockSource+0x544>)
 8003cd6:	f7fd ff80 	bl	8001bda <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ce2:	d014      	beq.n	8003d0e <HAL_TIM_ConfigClockSource+0x372>
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d010      	beq.n	8003d0e <HAL_TIM_ConfigClockSource+0x372>
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00c      	beq.n	8003d0e <HAL_TIM_ConfigClockSource+0x372>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d008      	beq.n	8003d0e <HAL_TIM_ConfigClockSource+0x372>
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b0a      	cmp	r3, #10
 8003d02:	d004      	beq.n	8003d0e <HAL_TIM_ConfigClockSource+0x372>
 8003d04:	f241 415f 	movw	r1, #5215	; 0x145f
 8003d08:	4875      	ldr	r0, [pc, #468]	; (8003ee0 <HAL_TIM_ConfigClockSource+0x544>)
 8003d0a:	f7fd ff66 	bl	8001bda <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	2b0f      	cmp	r3, #15
 8003d14:	d904      	bls.n	8003d20 <HAL_TIM_ConfigClockSource+0x384>
 8003d16:	f44f 51a3 	mov.w	r1, #5216	; 0x1460
 8003d1a:	4871      	ldr	r0, [pc, #452]	; (8003ee0 <HAL_TIM_ConfigClockSource+0x544>)
 8003d1c:	f7fd ff5d 	bl	8001bda <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6818      	ldr	r0, [r3, #0]
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	6859      	ldr	r1, [r3, #4]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	f000 f95f 	bl	8003ff0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2150      	movs	r1, #80	; 0x50
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 f9b6 	bl	80040aa <TIM_ITRx_SetConfig>
      break;
 8003d3e:	e0bc      	b.n	8003eba <HAL_TIM_ConfigClockSource+0x51e>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a63      	ldr	r2, [pc, #396]	; (8003ed4 <HAL_TIM_ConfigClockSource+0x538>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d013      	beq.n	8003d72 <HAL_TIM_ConfigClockSource+0x3d6>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d52:	d00e      	beq.n	8003d72 <HAL_TIM_ConfigClockSource+0x3d6>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a5f      	ldr	r2, [pc, #380]	; (8003ed8 <HAL_TIM_ConfigClockSource+0x53c>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d009      	beq.n	8003d72 <HAL_TIM_ConfigClockSource+0x3d6>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a5e      	ldr	r2, [pc, #376]	; (8003edc <HAL_TIM_ConfigClockSource+0x540>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d004      	beq.n	8003d72 <HAL_TIM_ConfigClockSource+0x3d6>
 8003d68:	f241 416c 	movw	r1, #5228	; 0x146c
 8003d6c:	485c      	ldr	r0, [pc, #368]	; (8003ee0 <HAL_TIM_ConfigClockSource+0x544>)
 8003d6e:	f7fd ff34 	bl	8001bda <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d7a:	d014      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0x40a>
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d010      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0x40a>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00c      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0x40a>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d008      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0x40a>
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	2b0a      	cmp	r3, #10
 8003d9a:	d004      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0x40a>
 8003d9c:	f241 416f 	movw	r1, #5231	; 0x146f
 8003da0:	484f      	ldr	r0, [pc, #316]	; (8003ee0 <HAL_TIM_ConfigClockSource+0x544>)
 8003da2:	f7fd ff1a 	bl	8001bda <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	2b0f      	cmp	r3, #15
 8003dac:	d904      	bls.n	8003db8 <HAL_TIM_ConfigClockSource+0x41c>
 8003dae:	f241 4170 	movw	r1, #5232	; 0x1470
 8003db2:	484b      	ldr	r0, [pc, #300]	; (8003ee0 <HAL_TIM_ConfigClockSource+0x544>)
 8003db4:	f7fd ff11 	bl	8001bda <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6818      	ldr	r0, [r3, #0]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	6859      	ldr	r1, [r3, #4]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	f000 f941 	bl	800404c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2160      	movs	r1, #96	; 0x60
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 f96a 	bl	80040aa <TIM_ITRx_SetConfig>
      break;
 8003dd6:	e070      	b.n	8003eba <HAL_TIM_ConfigClockSource+0x51e>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a3d      	ldr	r2, [pc, #244]	; (8003ed4 <HAL_TIM_ConfigClockSource+0x538>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d013      	beq.n	8003e0a <HAL_TIM_ConfigClockSource+0x46e>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dea:	d00e      	beq.n	8003e0a <HAL_TIM_ConfigClockSource+0x46e>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a39      	ldr	r2, [pc, #228]	; (8003ed8 <HAL_TIM_ConfigClockSource+0x53c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d009      	beq.n	8003e0a <HAL_TIM_ConfigClockSource+0x46e>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a38      	ldr	r2, [pc, #224]	; (8003edc <HAL_TIM_ConfigClockSource+0x540>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d004      	beq.n	8003e0a <HAL_TIM_ConfigClockSource+0x46e>
 8003e00:	f241 417c 	movw	r1, #5244	; 0x147c
 8003e04:	4836      	ldr	r0, [pc, #216]	; (8003ee0 <HAL_TIM_ConfigClockSource+0x544>)
 8003e06:	f7fd fee8 	bl	8001bda <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e12:	d014      	beq.n	8003e3e <HAL_TIM_ConfigClockSource+0x4a2>
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d010      	beq.n	8003e3e <HAL_TIM_ConfigClockSource+0x4a2>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00c      	beq.n	8003e3e <HAL_TIM_ConfigClockSource+0x4a2>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d008      	beq.n	8003e3e <HAL_TIM_ConfigClockSource+0x4a2>
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2b0a      	cmp	r3, #10
 8003e32:	d004      	beq.n	8003e3e <HAL_TIM_ConfigClockSource+0x4a2>
 8003e34:	f241 417f 	movw	r1, #5247	; 0x147f
 8003e38:	4829      	ldr	r0, [pc, #164]	; (8003ee0 <HAL_TIM_ConfigClockSource+0x544>)
 8003e3a:	f7fd fece 	bl	8001bda <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	2b0f      	cmp	r3, #15
 8003e44:	d904      	bls.n	8003e50 <HAL_TIM_ConfigClockSource+0x4b4>
 8003e46:	f44f 51a4 	mov.w	r1, #5248	; 0x1480
 8003e4a:	4825      	ldr	r0, [pc, #148]	; (8003ee0 <HAL_TIM_ConfigClockSource+0x544>)
 8003e4c:	f7fd fec5 	bl	8001bda <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6818      	ldr	r0, [r3, #0]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	6859      	ldr	r1, [r3, #4]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	f000 f8c7 	bl	8003ff0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2140      	movs	r1, #64	; 0x40
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 f91e 	bl	80040aa <TIM_ITRx_SetConfig>
      break;
 8003e6e:	e024      	b.n	8003eba <HAL_TIM_ConfigClockSource+0x51e>
        assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a17      	ldr	r2, [pc, #92]	; (8003ed4 <HAL_TIM_ConfigClockSource+0x538>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d013      	beq.n	8003ea2 <HAL_TIM_ConfigClockSource+0x506>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e82:	d00e      	beq.n	8003ea2 <HAL_TIM_ConfigClockSource+0x506>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a13      	ldr	r2, [pc, #76]	; (8003ed8 <HAL_TIM_ConfigClockSource+0x53c>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d009      	beq.n	8003ea2 <HAL_TIM_ConfigClockSource+0x506>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a12      	ldr	r2, [pc, #72]	; (8003edc <HAL_TIM_ConfigClockSource+0x540>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d004      	beq.n	8003ea2 <HAL_TIM_ConfigClockSource+0x506>
 8003e98:	f241 418f 	movw	r1, #5263	; 0x148f
 8003e9c:	4810      	ldr	r0, [pc, #64]	; (8003ee0 <HAL_TIM_ConfigClockSource+0x544>)
 8003e9e:	f7fd fe9c 	bl	8001bda <assert_failed>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4619      	mov	r1, r3
 8003eac:	4610      	mov	r0, r2
 8003eae:	f000 f8fc 	bl	80040aa <TIM_ITRx_SetConfig>
        break;
 8003eb2:	e002      	b.n	8003eba <HAL_TIM_ConfigClockSource+0x51e>
      break;
 8003eb4:	bf00      	nop
 8003eb6:	e000      	b.n	8003eba <HAL_TIM_ConfigClockSource+0x51e>
      break;
 8003eb8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40012c00 	.word	0x40012c00
 8003ed8:	40000400 	.word	0x40000400
 8003edc:	40000800 	.word	0x40000800
 8003ee0:	08007808 	.word	0x08007808

08003ee4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bc80      	pop	{r7}
 8003ef4:	4770      	bx	lr

08003ef6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr

08003f08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bc80      	pop	{r7}
 8003f18:	4770      	bx	lr

08003f1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bc80      	pop	{r7}
 8003f2a:	4770      	bx	lr

08003f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a29      	ldr	r2, [pc, #164]	; (8003fe4 <TIM_Base_SetConfig+0xb8>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d00b      	beq.n	8003f5c <TIM_Base_SetConfig+0x30>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f4a:	d007      	beq.n	8003f5c <TIM_Base_SetConfig+0x30>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a26      	ldr	r2, [pc, #152]	; (8003fe8 <TIM_Base_SetConfig+0xbc>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d003      	beq.n	8003f5c <TIM_Base_SetConfig+0x30>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a25      	ldr	r2, [pc, #148]	; (8003fec <TIM_Base_SetConfig+0xc0>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d108      	bne.n	8003f6e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a1c      	ldr	r2, [pc, #112]	; (8003fe4 <TIM_Base_SetConfig+0xb8>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d00b      	beq.n	8003f8e <TIM_Base_SetConfig+0x62>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f7c:	d007      	beq.n	8003f8e <TIM_Base_SetConfig+0x62>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a19      	ldr	r2, [pc, #100]	; (8003fe8 <TIM_Base_SetConfig+0xbc>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d003      	beq.n	8003f8e <TIM_Base_SetConfig+0x62>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a18      	ldr	r2, [pc, #96]	; (8003fec <TIM_Base_SetConfig+0xc0>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d108      	bne.n	8003fa0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a07      	ldr	r2, [pc, #28]	; (8003fe4 <TIM_Base_SetConfig+0xb8>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d103      	bne.n	8003fd4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	691a      	ldr	r2, [r3, #16]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	615a      	str	r2, [r3, #20]
}
 8003fda:	bf00      	nop
 8003fdc:	3714      	adds	r7, #20
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bc80      	pop	{r7}
 8003fe2:	4770      	bx	lr
 8003fe4:	40012c00 	.word	0x40012c00
 8003fe8:	40000400 	.word	0x40000400
 8003fec:	40000800 	.word	0x40000800

08003ff0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b087      	sub	sp, #28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	f023 0201 	bic.w	r2, r3, #1
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800401a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	011b      	lsls	r3, r3, #4
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	4313      	orrs	r3, r2
 8004024:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f023 030a 	bic.w	r3, r3, #10
 800402c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	4313      	orrs	r3, r2
 8004034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	621a      	str	r2, [r3, #32]
}
 8004042:	bf00      	nop
 8004044:	371c      	adds	r7, #28
 8004046:	46bd      	mov	sp, r7
 8004048:	bc80      	pop	{r7}
 800404a:	4770      	bx	lr

0800404c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	f023 0210 	bic.w	r2, r3, #16
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004076:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	031b      	lsls	r3, r3, #12
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	4313      	orrs	r3, r2
 8004080:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004088:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	4313      	orrs	r3, r2
 8004092:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	621a      	str	r2, [r3, #32]
}
 80040a0:	bf00      	nop
 80040a2:	371c      	adds	r7, #28
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bc80      	pop	{r7}
 80040a8:	4770      	bx	lr

080040aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b085      	sub	sp, #20
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
 80040b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	f043 0307 	orr.w	r3, r3, #7
 80040cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	609a      	str	r2, [r3, #8]
}
 80040d4:	bf00      	nop
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	bc80      	pop	{r7}
 80040dc:	4770      	bx	lr

080040de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040de:	b480      	push	{r7}
 80040e0:	b087      	sub	sp, #28
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	60f8      	str	r0, [r7, #12]
 80040e6:	60b9      	str	r1, [r7, #8]
 80040e8:	607a      	str	r2, [r7, #4]
 80040ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	021a      	lsls	r2, r3, #8
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	431a      	orrs	r2, r3
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	4313      	orrs	r3, r2
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	4313      	orrs	r3, r2
 800410a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	609a      	str	r2, [r3, #8]
}
 8004112:	bf00      	nop
 8004114:	371c      	adds	r7, #28
 8004116:	46bd      	mov	sp, r7
 8004118:	bc80      	pop	{r7}
 800411a:	4770      	bx	lr

0800411c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a4d      	ldr	r2, [pc, #308]	; (8004260 <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d013      	beq.n	8004158 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004138:	d00e      	beq.n	8004158 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a49      	ldr	r2, [pc, #292]	; (8004264 <HAL_TIMEx_MasterConfigSynchronization+0x148>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d009      	beq.n	8004158 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a47      	ldr	r2, [pc, #284]	; (8004268 <HAL_TIMEx_MasterConfigSynchronization+0x14c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d004      	beq.n	8004158 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800414e:	f240 715f 	movw	r1, #1887	; 0x75f
 8004152:	4846      	ldr	r0, [pc, #280]	; (800426c <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 8004154:	f7fd fd41 	bl	8001bda <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d020      	beq.n	80041a2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b10      	cmp	r3, #16
 8004166:	d01c      	beq.n	80041a2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b20      	cmp	r3, #32
 800416e:	d018      	beq.n	80041a2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b30      	cmp	r3, #48	; 0x30
 8004176:	d014      	beq.n	80041a2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b40      	cmp	r3, #64	; 0x40
 800417e:	d010      	beq.n	80041a2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b50      	cmp	r3, #80	; 0x50
 8004186:	d00c      	beq.n	80041a2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b60      	cmp	r3, #96	; 0x60
 800418e:	d008      	beq.n	80041a2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b70      	cmp	r3, #112	; 0x70
 8004196:	d004      	beq.n	80041a2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004198:	f44f 61ec 	mov.w	r1, #1888	; 0x760
 800419c:	4833      	ldr	r0, [pc, #204]	; (800426c <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 800419e:	f7fd fd1c 	bl	8001bda <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b80      	cmp	r3, #128	; 0x80
 80041a8:	d008      	beq.n	80041bc <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d004      	beq.n	80041bc <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 80041b2:	f240 7161 	movw	r1, #1889	; 0x761
 80041b6:	482d      	ldr	r0, [pc, #180]	; (800426c <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 80041b8:	f7fd fd0f 	bl	8001bda <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d101      	bne.n	80041ca <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80041c6:	2302      	movs	r3, #2
 80041c8:	e046      	b.n	8004258 <HAL_TIMEx_MasterConfigSynchronization+0x13c>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2202      	movs	r2, #2
 80041d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a15      	ldr	r2, [pc, #84]	; (8004260 <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d00e      	beq.n	800422c <HAL_TIMEx_MasterConfigSynchronization+0x110>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004216:	d009      	beq.n	800422c <HAL_TIMEx_MasterConfigSynchronization+0x110>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a11      	ldr	r2, [pc, #68]	; (8004264 <HAL_TIMEx_MasterConfigSynchronization+0x148>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d004      	beq.n	800422c <HAL_TIMEx_MasterConfigSynchronization+0x110>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a10      	ldr	r2, [pc, #64]	; (8004268 <HAL_TIMEx_MasterConfigSynchronization+0x14c>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d10c      	bne.n	8004246 <HAL_TIMEx_MasterConfigSynchronization+0x12a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004232:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	4313      	orrs	r3, r2
 800423c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	40012c00 	.word	0x40012c00
 8004264:	40000400 	.word	0x40000400
 8004268:	40000800 	.word	0x40000800
 800426c:	08007840 	.word	0x08007840

08004270 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	bc80      	pop	{r7}
 8004280:	4770      	bx	lr

08004282 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	bc80      	pop	{r7}
 8004292:	4770      	bx	lr

08004294 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e092      	b.n	80043cc <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d02c      	beq.n	8004308 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a48      	ldr	r2, [pc, #288]	; (80043d4 <HAL_UART_Init+0x140>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d00e      	beq.n	80042d6 <HAL_UART_Init+0x42>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a46      	ldr	r2, [pc, #280]	; (80043d8 <HAL_UART_Init+0x144>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d009      	beq.n	80042d6 <HAL_UART_Init+0x42>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a45      	ldr	r2, [pc, #276]	; (80043dc <HAL_UART_Init+0x148>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d004      	beq.n	80042d6 <HAL_UART_Init+0x42>
 80042cc:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80042d0:	4843      	ldr	r0, [pc, #268]	; (80043e0 <HAL_UART_Init+0x14c>)
 80042d2:	f7fd fc82 	bl	8001bda <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d028      	beq.n	8004330 <HAL_UART_Init+0x9c>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042e6:	d023      	beq.n	8004330 <HAL_UART_Init+0x9c>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042f0:	d01e      	beq.n	8004330 <HAL_UART_Init+0x9c>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042fa:	d019      	beq.n	8004330 <HAL_UART_Init+0x9c>
 80042fc:	f240 1147 	movw	r1, #327	; 0x147
 8004300:	4837      	ldr	r0, [pc, #220]	; (80043e0 <HAL_UART_Init+0x14c>)
 8004302:	f7fd fc6a 	bl	8001bda <assert_failed>
 8004306:	e013      	b.n	8004330 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a31      	ldr	r2, [pc, #196]	; (80043d4 <HAL_UART_Init+0x140>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d00e      	beq.n	8004330 <HAL_UART_Init+0x9c>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a30      	ldr	r2, [pc, #192]	; (80043d8 <HAL_UART_Init+0x144>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d009      	beq.n	8004330 <HAL_UART_Init+0x9c>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a2e      	ldr	r2, [pc, #184]	; (80043dc <HAL_UART_Init+0x148>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d004      	beq.n	8004330 <HAL_UART_Init+0x9c>
 8004326:	f240 114b 	movw	r1, #331	; 0x14b
 800432a:	482d      	ldr	r0, [pc, #180]	; (80043e0 <HAL_UART_Init+0x14c>)
 800432c:	f7fd fc55 	bl	8001bda <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d009      	beq.n	800434c <HAL_UART_Init+0xb8>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004340:	d004      	beq.n	800434c <HAL_UART_Init+0xb8>
 8004342:	f240 114d 	movw	r1, #333	; 0x14d
 8004346:	4826      	ldr	r0, [pc, #152]	; (80043e0 <HAL_UART_Init+0x14c>)
 8004348:	f7fd fc47 	bl	8001bda <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d106      	bne.n	8004366 <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7fd fc9d 	bl	8001ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2224      	movs	r2, #36	; 0x24
 800436a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800437c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 faa8 	bl	80048d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691a      	ldr	r2, [r3, #16]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004392:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	695a      	ldr	r2, [r3, #20]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043a2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043b2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2220      	movs	r2, #32
 80043be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40013800 	.word	0x40013800
 80043d8:	40004400 	.word	0x40004400
 80043dc:	40004800 	.word	0x40004800
 80043e0:	0800787c 	.word	0x0800787c

080043e4 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	4613      	mov	r3, r2
 80043f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b20      	cmp	r3, #32
 80043fc:	d130      	bne.n	8004460 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d002      	beq.n	800440a <HAL_UART_Transmit_IT+0x26>
 8004404:	88fb      	ldrh	r3, [r7, #6]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e029      	b.n	8004462 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <HAL_UART_Transmit_IT+0x38>
 8004418:	2302      	movs	r3, #2
 800441a:	e022      	b.n	8004462 <HAL_UART_Transmit_IT+0x7e>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	88fa      	ldrh	r2, [r7, #6]
 800442e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	88fa      	ldrh	r2, [r7, #6]
 8004434:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2221      	movs	r2, #33	; 0x21
 8004440:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800445a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800445c:	2300      	movs	r3, #0
 800445e:	e000      	b.n	8004462 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004460:	2302      	movs	r3, #2
  }
}
 8004462:	4618      	mov	r0, r3
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	bc80      	pop	{r7}
 800446a:	4770      	bx	lr

0800446c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b088      	sub	sp, #32
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800448c:	2300      	movs	r3, #0
 800448e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004490:	2300      	movs	r3, #0
 8004492:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10d      	bne.n	80044be <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	f003 0320 	and.w	r3, r3, #32
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d008      	beq.n	80044be <HAL_UART_IRQHandler+0x52>
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	f003 0320 	and.w	r3, r3, #32
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f98b 	bl	80047d2 <UART_Receive_IT>
      return;
 80044bc:	e0d0      	b.n	8004660 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f000 80b0 	beq.w	8004626 <HAL_UART_IRQHandler+0x1ba>
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d105      	bne.n	80044dc <HAL_UART_IRQHandler+0x70>
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 80a5 	beq.w	8004626 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <HAL_UART_IRQHandler+0x90>
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d005      	beq.n	80044fc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f4:	f043 0201 	orr.w	r2, r3, #1
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	f003 0304 	and.w	r3, r3, #4
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <HAL_UART_IRQHandler+0xb0>
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d005      	beq.n	800451c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004514:	f043 0202 	orr.w	r2, r3, #2
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00a      	beq.n	800453c <HAL_UART_IRQHandler+0xd0>
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	d005      	beq.n	800453c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004534:	f043 0204 	orr.w	r2, r3, #4
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	f003 0308 	and.w	r3, r3, #8
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00f      	beq.n	8004566 <HAL_UART_IRQHandler+0xfa>
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	f003 0320 	and.w	r3, r3, #32
 800454c:	2b00      	cmp	r3, #0
 800454e:	d104      	bne.n	800455a <HAL_UART_IRQHandler+0xee>
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d005      	beq.n	8004566 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455e:	f043 0208 	orr.w	r2, r3, #8
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800456a:	2b00      	cmp	r3, #0
 800456c:	d077      	beq.n	800465e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	f003 0320 	and.w	r3, r3, #32
 8004574:	2b00      	cmp	r3, #0
 8004576:	d007      	beq.n	8004588 <HAL_UART_IRQHandler+0x11c>
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	f003 0320 	and.w	r3, r3, #32
 800457e:	2b00      	cmp	r3, #0
 8004580:	d002      	beq.n	8004588 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f925 	bl	80047d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004592:	2b00      	cmp	r3, #0
 8004594:	bf14      	ite	ne
 8004596:	2301      	movne	r3, #1
 8004598:	2300      	moveq	r3, #0
 800459a:	b2db      	uxtb	r3, r3
 800459c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a2:	f003 0308 	and.w	r3, r3, #8
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d102      	bne.n	80045b0 <HAL_UART_IRQHandler+0x144>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d031      	beq.n	8004614 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f876 	bl	80046a2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d023      	beq.n	800460c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	695a      	ldr	r2, [r3, #20]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045d2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d013      	beq.n	8004604 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e0:	4a21      	ldr	r2, [pc, #132]	; (8004668 <HAL_UART_IRQHandler+0x1fc>)
 80045e2:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7fd ff35 	bl	8002458 <HAL_DMA_Abort_IT>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d016      	beq.n	8004622 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045fe:	4610      	mov	r0, r2
 8004600:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004602:	e00e      	b.n	8004622 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f843 	bl	8004690 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800460a:	e00a      	b.n	8004622 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 f83f 	bl	8004690 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004612:	e006      	b.n	8004622 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f83b 	bl	8004690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004620:	e01d      	b.n	800465e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004622:	bf00      	nop
    return;
 8004624:	e01b      	b.n	800465e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462c:	2b00      	cmp	r3, #0
 800462e:	d008      	beq.n	8004642 <HAL_UART_IRQHandler+0x1d6>
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004636:	2b00      	cmp	r3, #0
 8004638:	d003      	beq.n	8004642 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f862 	bl	8004704 <UART_Transmit_IT>
    return;
 8004640:	e00e      	b.n	8004660 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004648:	2b00      	cmp	r3, #0
 800464a:	d009      	beq.n	8004660 <HAL_UART_IRQHandler+0x1f4>
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004652:	2b00      	cmp	r3, #0
 8004654:	d004      	beq.n	8004660 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f8a3 	bl	80047a2 <UART_EndTransmit_IT>
    return;
 800465c:	e000      	b.n	8004660 <HAL_UART_IRQHandler+0x1f4>
    return;
 800465e:	bf00      	nop
  }
}
 8004660:	3720      	adds	r7, #32
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	080046dd 	.word	0x080046dd

0800466c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	bc80      	pop	{r7}
 800467c:	4770      	bx	lr

0800467e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	bc80      	pop	{r7}
 800468e:	4770      	bx	lr

08004690 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	bc80      	pop	{r7}
 80046a0:	4770      	bx	lr

080046a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b083      	sub	sp, #12
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68da      	ldr	r2, [r3, #12]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80046b8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	695a      	ldr	r2, [r3, #20]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 0201 	bic.w	r2, r2, #1
 80046c8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2220      	movs	r2, #32
 80046ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr

080046dc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f7ff ffca 	bl	8004690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046fc:	bf00      	nop
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b21      	cmp	r3, #33	; 0x21
 8004716:	d13e      	bne.n	8004796 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004720:	d114      	bne.n	800474c <UART_Transmit_IT+0x48>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d110      	bne.n	800474c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	881b      	ldrh	r3, [r3, #0]
 8004734:	461a      	mov	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800473e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	1c9a      	adds	r2, r3, #2
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	621a      	str	r2, [r3, #32]
 800474a:	e008      	b.n	800475e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	1c59      	adds	r1, r3, #1
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6211      	str	r1, [r2, #32]
 8004756:	781a      	ldrb	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004762:	b29b      	uxth	r3, r3
 8004764:	3b01      	subs	r3, #1
 8004766:	b29b      	uxth	r3, r3
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	4619      	mov	r1, r3
 800476c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10f      	bne.n	8004792 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68da      	ldr	r2, [r3, #12]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004780:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68da      	ldr	r2, [r3, #12]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004790:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004792:	2300      	movs	r3, #0
 8004794:	e000      	b.n	8004798 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004796:	2302      	movs	r3, #2
  }
}
 8004798:	4618      	mov	r0, r3
 800479a:	3714      	adds	r7, #20
 800479c:	46bd      	mov	sp, r7
 800479e:	bc80      	pop	{r7}
 80047a0:	4770      	bx	lr

080047a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b082      	sub	sp, #8
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68da      	ldr	r2, [r3, #12]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2220      	movs	r2, #32
 80047be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7ff ff52 	bl	800466c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b084      	sub	sp, #16
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b22      	cmp	r3, #34	; 0x22
 80047e4:	d170      	bne.n	80048c8 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ee:	d117      	bne.n	8004820 <UART_Receive_IT+0x4e>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d113      	bne.n	8004820 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80047f8:	2300      	movs	r3, #0
 80047fa:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004800:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	b29b      	uxth	r3, r3
 800480a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800480e:	b29a      	uxth	r2, r3
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004818:	1c9a      	adds	r2, r3, #2
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	629a      	str	r2, [r3, #40]	; 0x28
 800481e:	e026      	b.n	800486e <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004824:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004826:	2300      	movs	r3, #0
 8004828:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004832:	d007      	beq.n	8004844 <UART_Receive_IT+0x72>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10a      	bne.n	8004852 <UART_Receive_IT+0x80>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d106      	bne.n	8004852 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	b2da      	uxtb	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	701a      	strb	r2, [r3, #0]
 8004850:	e008      	b.n	8004864 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	b2db      	uxtb	r3, r3
 800485a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800485e:	b2da      	uxtb	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004868:	1c5a      	adds	r2, r3, #1
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004872:	b29b      	uxth	r3, r3
 8004874:	3b01      	subs	r3, #1
 8004876:	b29b      	uxth	r3, r3
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	4619      	mov	r1, r3
 800487c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800487e:	2b00      	cmp	r3, #0
 8004880:	d120      	bne.n	80048c4 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68da      	ldr	r2, [r3, #12]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0220 	bic.w	r2, r2, #32
 8004890:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68da      	ldr	r2, [r3, #12]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	695a      	ldr	r2, [r3, #20]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 0201 	bic.w	r2, r2, #1
 80048b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2220      	movs	r2, #32
 80048b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7ff fedf 	bl	800467e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80048c0:	2300      	movs	r3, #0
 80048c2:	e002      	b.n	80048ca <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80048c4:	2300      	movs	r3, #0
 80048c6:	e000      	b.n	80048ca <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80048c8:	2302      	movs	r3, #2
  }
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
	...

080048d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	4a5f      	ldr	r2, [pc, #380]	; (8004a60 <UART_SetConfig+0x18c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d904      	bls.n	80048f0 <UART_SetConfig+0x1c>
 80048e6:	f640 31f6 	movw	r1, #3062	; 0xbf6
 80048ea:	485e      	ldr	r0, [pc, #376]	; (8004a64 <UART_SetConfig+0x190>)
 80048ec:	f7fd f975 	bl	8001bda <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d009      	beq.n	800490c <UART_SetConfig+0x38>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004900:	d004      	beq.n	800490c <UART_SetConfig+0x38>
 8004902:	f640 31f7 	movw	r1, #3063	; 0xbf7
 8004906:	4857      	ldr	r0, [pc, #348]	; (8004a64 <UART_SetConfig+0x190>)
 8004908:	f7fd f967 	bl	8001bda <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00e      	beq.n	8004932 <UART_SetConfig+0x5e>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800491c:	d009      	beq.n	8004932 <UART_SetConfig+0x5e>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004926:	d004      	beq.n	8004932 <UART_SetConfig+0x5e>
 8004928:	f640 31f8 	movw	r1, #3064	; 0xbf8
 800492c:	484d      	ldr	r0, [pc, #308]	; (8004a64 <UART_SetConfig+0x190>)
 800492e:	f7fd f954 	bl	8001bda <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	695a      	ldr	r2, [r3, #20]
 8004936:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800493a:	4013      	ands	r3, r2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d103      	bne.n	8004948 <UART_SetConfig+0x74>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d104      	bne.n	8004952 <UART_SetConfig+0x7e>
 8004948:	f640 31f9 	movw	r1, #3065	; 0xbf9
 800494c:	4845      	ldr	r0, [pc, #276]	; (8004a64 <UART_SetConfig+0x190>)
 800494e:	f7fd f944 	bl	8001bda <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	431a      	orrs	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	4313      	orrs	r3, r2
 8004978:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004984:	f023 030c 	bic.w	r3, r3, #12
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6812      	ldr	r2, [r2, #0]
 800498c:	68b9      	ldr	r1, [r7, #8]
 800498e:	430b      	orrs	r3, r1
 8004990:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	699a      	ldr	r2, [r3, #24]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a2e      	ldr	r2, [pc, #184]	; (8004a68 <UART_SetConfig+0x194>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d103      	bne.n	80049ba <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80049b2:	f7fe fe0f 	bl	80035d4 <HAL_RCC_GetPCLK2Freq>
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	e002      	b.n	80049c0 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80049ba:	f7fe fdf7 	bl	80035ac <HAL_RCC_GetPCLK1Freq>
 80049be:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	4613      	mov	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	009a      	lsls	r2, r3, #2
 80049ca:	441a      	add	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d6:	4a25      	ldr	r2, [pc, #148]	; (8004a6c <UART_SetConfig+0x198>)
 80049d8:	fba2 2303 	umull	r2, r3, r2, r3
 80049dc:	095b      	lsrs	r3, r3, #5
 80049de:	0119      	lsls	r1, r3, #4
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	4613      	mov	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	009a      	lsls	r2, r3, #2
 80049ea:	441a      	add	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80049f6:	4b1d      	ldr	r3, [pc, #116]	; (8004a6c <UART_SetConfig+0x198>)
 80049f8:	fba3 0302 	umull	r0, r3, r3, r2
 80049fc:	095b      	lsrs	r3, r3, #5
 80049fe:	2064      	movs	r0, #100	; 0x64
 8004a00:	fb00 f303 	mul.w	r3, r0, r3
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	011b      	lsls	r3, r3, #4
 8004a08:	3332      	adds	r3, #50	; 0x32
 8004a0a:	4a18      	ldr	r2, [pc, #96]	; (8004a6c <UART_SetConfig+0x198>)
 8004a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a10:	095b      	lsrs	r3, r3, #5
 8004a12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a16:	4419      	add	r1, r3
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4413      	add	r3, r2
 8004a20:	009a      	lsls	r2, r3, #2
 8004a22:	441a      	add	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a2e:	4b0f      	ldr	r3, [pc, #60]	; (8004a6c <UART_SetConfig+0x198>)
 8004a30:	fba3 0302 	umull	r0, r3, r3, r2
 8004a34:	095b      	lsrs	r3, r3, #5
 8004a36:	2064      	movs	r0, #100	; 0x64
 8004a38:	fb00 f303 	mul.w	r3, r0, r3
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	3332      	adds	r3, #50	; 0x32
 8004a42:	4a0a      	ldr	r2, [pc, #40]	; (8004a6c <UART_SetConfig+0x198>)
 8004a44:	fba2 2303 	umull	r2, r3, r2, r3
 8004a48:	095b      	lsrs	r3, r3, #5
 8004a4a:	f003 020f 	and.w	r2, r3, #15
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	440a      	add	r2, r1
 8004a54:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004a56:	bf00      	nop
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	0044aa20 	.word	0x0044aa20
 8004a64:	0800787c 	.word	0x0800787c
 8004a68:	40013800 	.word	0x40013800
 8004a6c:	51eb851f 	.word	0x51eb851f

08004a70 <calloc>:
 8004a70:	4b02      	ldr	r3, [pc, #8]	; (8004a7c <calloc+0xc>)
 8004a72:	460a      	mov	r2, r1
 8004a74:	4601      	mov	r1, r0
 8004a76:	6818      	ldr	r0, [r3, #0]
 8004a78:	f000 b852 	b.w	8004b20 <_calloc_r>
 8004a7c:	20000010 	.word	0x20000010

08004a80 <__errno>:
 8004a80:	4b01      	ldr	r3, [pc, #4]	; (8004a88 <__errno+0x8>)
 8004a82:	6818      	ldr	r0, [r3, #0]
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	20000010 	.word	0x20000010

08004a8c <__libc_init_array>:
 8004a8c:	b570      	push	{r4, r5, r6, lr}
 8004a8e:	2600      	movs	r6, #0
 8004a90:	4d0c      	ldr	r5, [pc, #48]	; (8004ac4 <__libc_init_array+0x38>)
 8004a92:	4c0d      	ldr	r4, [pc, #52]	; (8004ac8 <__libc_init_array+0x3c>)
 8004a94:	1b64      	subs	r4, r4, r5
 8004a96:	10a4      	asrs	r4, r4, #2
 8004a98:	42a6      	cmp	r6, r4
 8004a9a:	d109      	bne.n	8004ab0 <__libc_init_array+0x24>
 8004a9c:	f001 ff26 	bl	80068ec <_init>
 8004aa0:	2600      	movs	r6, #0
 8004aa2:	4d0a      	ldr	r5, [pc, #40]	; (8004acc <__libc_init_array+0x40>)
 8004aa4:	4c0a      	ldr	r4, [pc, #40]	; (8004ad0 <__libc_init_array+0x44>)
 8004aa6:	1b64      	subs	r4, r4, r5
 8004aa8:	10a4      	asrs	r4, r4, #2
 8004aaa:	42a6      	cmp	r6, r4
 8004aac:	d105      	bne.n	8004aba <__libc_init_array+0x2e>
 8004aae:	bd70      	pop	{r4, r5, r6, pc}
 8004ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ab4:	4798      	blx	r3
 8004ab6:	3601      	adds	r6, #1
 8004ab8:	e7ee      	b.n	8004a98 <__libc_init_array+0xc>
 8004aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8004abe:	4798      	blx	r3
 8004ac0:	3601      	adds	r6, #1
 8004ac2:	e7f2      	b.n	8004aaa <__libc_init_array+0x1e>
 8004ac4:	08007b44 	.word	0x08007b44
 8004ac8:	08007b44 	.word	0x08007b44
 8004acc:	08007b44 	.word	0x08007b44
 8004ad0:	08007b48 	.word	0x08007b48

08004ad4 <malloc>:
 8004ad4:	4b02      	ldr	r3, [pc, #8]	; (8004ae0 <malloc+0xc>)
 8004ad6:	4601      	mov	r1, r0
 8004ad8:	6818      	ldr	r0, [r3, #0]
 8004ada:	f000 b87b 	b.w	8004bd4 <_malloc_r>
 8004ade:	bf00      	nop
 8004ae0:	20000010 	.word	0x20000010

08004ae4 <free>:
 8004ae4:	4b02      	ldr	r3, [pc, #8]	; (8004af0 <free+0xc>)
 8004ae6:	4601      	mov	r1, r0
 8004ae8:	6818      	ldr	r0, [r3, #0]
 8004aea:	f000 b827 	b.w	8004b3c <_free_r>
 8004aee:	bf00      	nop
 8004af0:	20000010 	.word	0x20000010

08004af4 <memcpy>:
 8004af4:	440a      	add	r2, r1
 8004af6:	4291      	cmp	r1, r2
 8004af8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004afc:	d100      	bne.n	8004b00 <memcpy+0xc>
 8004afe:	4770      	bx	lr
 8004b00:	b510      	push	{r4, lr}
 8004b02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b06:	4291      	cmp	r1, r2
 8004b08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b0c:	d1f9      	bne.n	8004b02 <memcpy+0xe>
 8004b0e:	bd10      	pop	{r4, pc}

08004b10 <memset>:
 8004b10:	4603      	mov	r3, r0
 8004b12:	4402      	add	r2, r0
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d100      	bne.n	8004b1a <memset+0xa>
 8004b18:	4770      	bx	lr
 8004b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b1e:	e7f9      	b.n	8004b14 <memset+0x4>

08004b20 <_calloc_r>:
 8004b20:	b538      	push	{r3, r4, r5, lr}
 8004b22:	fb02 f501 	mul.w	r5, r2, r1
 8004b26:	4629      	mov	r1, r5
 8004b28:	f000 f854 	bl	8004bd4 <_malloc_r>
 8004b2c:	4604      	mov	r4, r0
 8004b2e:	b118      	cbz	r0, 8004b38 <_calloc_r+0x18>
 8004b30:	462a      	mov	r2, r5
 8004b32:	2100      	movs	r1, #0
 8004b34:	f7ff ffec 	bl	8004b10 <memset>
 8004b38:	4620      	mov	r0, r4
 8004b3a:	bd38      	pop	{r3, r4, r5, pc}

08004b3c <_free_r>:
 8004b3c:	b538      	push	{r3, r4, r5, lr}
 8004b3e:	4605      	mov	r5, r0
 8004b40:	2900      	cmp	r1, #0
 8004b42:	d043      	beq.n	8004bcc <_free_r+0x90>
 8004b44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b48:	1f0c      	subs	r4, r1, #4
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	bfb8      	it	lt
 8004b4e:	18e4      	addlt	r4, r4, r3
 8004b50:	f000 fab4 	bl	80050bc <__malloc_lock>
 8004b54:	4a1e      	ldr	r2, [pc, #120]	; (8004bd0 <_free_r+0x94>)
 8004b56:	6813      	ldr	r3, [r2, #0]
 8004b58:	4610      	mov	r0, r2
 8004b5a:	b933      	cbnz	r3, 8004b6a <_free_r+0x2e>
 8004b5c:	6063      	str	r3, [r4, #4]
 8004b5e:	6014      	str	r4, [r2, #0]
 8004b60:	4628      	mov	r0, r5
 8004b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b66:	f000 baaf 	b.w	80050c8 <__malloc_unlock>
 8004b6a:	42a3      	cmp	r3, r4
 8004b6c:	d90a      	bls.n	8004b84 <_free_r+0x48>
 8004b6e:	6821      	ldr	r1, [r4, #0]
 8004b70:	1862      	adds	r2, r4, r1
 8004b72:	4293      	cmp	r3, r2
 8004b74:	bf01      	itttt	eq
 8004b76:	681a      	ldreq	r2, [r3, #0]
 8004b78:	685b      	ldreq	r3, [r3, #4]
 8004b7a:	1852      	addeq	r2, r2, r1
 8004b7c:	6022      	streq	r2, [r4, #0]
 8004b7e:	6063      	str	r3, [r4, #4]
 8004b80:	6004      	str	r4, [r0, #0]
 8004b82:	e7ed      	b.n	8004b60 <_free_r+0x24>
 8004b84:	461a      	mov	r2, r3
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	b10b      	cbz	r3, 8004b8e <_free_r+0x52>
 8004b8a:	42a3      	cmp	r3, r4
 8004b8c:	d9fa      	bls.n	8004b84 <_free_r+0x48>
 8004b8e:	6811      	ldr	r1, [r2, #0]
 8004b90:	1850      	adds	r0, r2, r1
 8004b92:	42a0      	cmp	r0, r4
 8004b94:	d10b      	bne.n	8004bae <_free_r+0x72>
 8004b96:	6820      	ldr	r0, [r4, #0]
 8004b98:	4401      	add	r1, r0
 8004b9a:	1850      	adds	r0, r2, r1
 8004b9c:	4283      	cmp	r3, r0
 8004b9e:	6011      	str	r1, [r2, #0]
 8004ba0:	d1de      	bne.n	8004b60 <_free_r+0x24>
 8004ba2:	6818      	ldr	r0, [r3, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	4401      	add	r1, r0
 8004ba8:	6011      	str	r1, [r2, #0]
 8004baa:	6053      	str	r3, [r2, #4]
 8004bac:	e7d8      	b.n	8004b60 <_free_r+0x24>
 8004bae:	d902      	bls.n	8004bb6 <_free_r+0x7a>
 8004bb0:	230c      	movs	r3, #12
 8004bb2:	602b      	str	r3, [r5, #0]
 8004bb4:	e7d4      	b.n	8004b60 <_free_r+0x24>
 8004bb6:	6820      	ldr	r0, [r4, #0]
 8004bb8:	1821      	adds	r1, r4, r0
 8004bba:	428b      	cmp	r3, r1
 8004bbc:	bf01      	itttt	eq
 8004bbe:	6819      	ldreq	r1, [r3, #0]
 8004bc0:	685b      	ldreq	r3, [r3, #4]
 8004bc2:	1809      	addeq	r1, r1, r0
 8004bc4:	6021      	streq	r1, [r4, #0]
 8004bc6:	6063      	str	r3, [r4, #4]
 8004bc8:	6054      	str	r4, [r2, #4]
 8004bca:	e7c9      	b.n	8004b60 <_free_r+0x24>
 8004bcc:	bd38      	pop	{r3, r4, r5, pc}
 8004bce:	bf00      	nop
 8004bd0:	200000ac 	.word	0x200000ac

08004bd4 <_malloc_r>:
 8004bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd6:	1ccd      	adds	r5, r1, #3
 8004bd8:	f025 0503 	bic.w	r5, r5, #3
 8004bdc:	3508      	adds	r5, #8
 8004bde:	2d0c      	cmp	r5, #12
 8004be0:	bf38      	it	cc
 8004be2:	250c      	movcc	r5, #12
 8004be4:	2d00      	cmp	r5, #0
 8004be6:	4606      	mov	r6, r0
 8004be8:	db01      	blt.n	8004bee <_malloc_r+0x1a>
 8004bea:	42a9      	cmp	r1, r5
 8004bec:	d903      	bls.n	8004bf6 <_malloc_r+0x22>
 8004bee:	230c      	movs	r3, #12
 8004bf0:	6033      	str	r3, [r6, #0]
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bf6:	f000 fa61 	bl	80050bc <__malloc_lock>
 8004bfa:	4921      	ldr	r1, [pc, #132]	; (8004c80 <_malloc_r+0xac>)
 8004bfc:	680a      	ldr	r2, [r1, #0]
 8004bfe:	4614      	mov	r4, r2
 8004c00:	b99c      	cbnz	r4, 8004c2a <_malloc_r+0x56>
 8004c02:	4f20      	ldr	r7, [pc, #128]	; (8004c84 <_malloc_r+0xb0>)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	b923      	cbnz	r3, 8004c12 <_malloc_r+0x3e>
 8004c08:	4621      	mov	r1, r4
 8004c0a:	4630      	mov	r0, r6
 8004c0c:	f000 f83c 	bl	8004c88 <_sbrk_r>
 8004c10:	6038      	str	r0, [r7, #0]
 8004c12:	4629      	mov	r1, r5
 8004c14:	4630      	mov	r0, r6
 8004c16:	f000 f837 	bl	8004c88 <_sbrk_r>
 8004c1a:	1c43      	adds	r3, r0, #1
 8004c1c:	d123      	bne.n	8004c66 <_malloc_r+0x92>
 8004c1e:	230c      	movs	r3, #12
 8004c20:	4630      	mov	r0, r6
 8004c22:	6033      	str	r3, [r6, #0]
 8004c24:	f000 fa50 	bl	80050c8 <__malloc_unlock>
 8004c28:	e7e3      	b.n	8004bf2 <_malloc_r+0x1e>
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	1b5b      	subs	r3, r3, r5
 8004c2e:	d417      	bmi.n	8004c60 <_malloc_r+0x8c>
 8004c30:	2b0b      	cmp	r3, #11
 8004c32:	d903      	bls.n	8004c3c <_malloc_r+0x68>
 8004c34:	6023      	str	r3, [r4, #0]
 8004c36:	441c      	add	r4, r3
 8004c38:	6025      	str	r5, [r4, #0]
 8004c3a:	e004      	b.n	8004c46 <_malloc_r+0x72>
 8004c3c:	6863      	ldr	r3, [r4, #4]
 8004c3e:	42a2      	cmp	r2, r4
 8004c40:	bf0c      	ite	eq
 8004c42:	600b      	streq	r3, [r1, #0]
 8004c44:	6053      	strne	r3, [r2, #4]
 8004c46:	4630      	mov	r0, r6
 8004c48:	f000 fa3e 	bl	80050c8 <__malloc_unlock>
 8004c4c:	f104 000b 	add.w	r0, r4, #11
 8004c50:	1d23      	adds	r3, r4, #4
 8004c52:	f020 0007 	bic.w	r0, r0, #7
 8004c56:	1ac2      	subs	r2, r0, r3
 8004c58:	d0cc      	beq.n	8004bf4 <_malloc_r+0x20>
 8004c5a:	1a1b      	subs	r3, r3, r0
 8004c5c:	50a3      	str	r3, [r4, r2]
 8004c5e:	e7c9      	b.n	8004bf4 <_malloc_r+0x20>
 8004c60:	4622      	mov	r2, r4
 8004c62:	6864      	ldr	r4, [r4, #4]
 8004c64:	e7cc      	b.n	8004c00 <_malloc_r+0x2c>
 8004c66:	1cc4      	adds	r4, r0, #3
 8004c68:	f024 0403 	bic.w	r4, r4, #3
 8004c6c:	42a0      	cmp	r0, r4
 8004c6e:	d0e3      	beq.n	8004c38 <_malloc_r+0x64>
 8004c70:	1a21      	subs	r1, r4, r0
 8004c72:	4630      	mov	r0, r6
 8004c74:	f000 f808 	bl	8004c88 <_sbrk_r>
 8004c78:	3001      	adds	r0, #1
 8004c7a:	d1dd      	bne.n	8004c38 <_malloc_r+0x64>
 8004c7c:	e7cf      	b.n	8004c1e <_malloc_r+0x4a>
 8004c7e:	bf00      	nop
 8004c80:	200000ac 	.word	0x200000ac
 8004c84:	200000b0 	.word	0x200000b0

08004c88 <_sbrk_r>:
 8004c88:	b538      	push	{r3, r4, r5, lr}
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	4d05      	ldr	r5, [pc, #20]	; (8004ca4 <_sbrk_r+0x1c>)
 8004c8e:	4604      	mov	r4, r0
 8004c90:	4608      	mov	r0, r1
 8004c92:	602b      	str	r3, [r5, #0]
 8004c94:	f7fd f96a 	bl	8001f6c <_sbrk>
 8004c98:	1c43      	adds	r3, r0, #1
 8004c9a:	d102      	bne.n	8004ca2 <_sbrk_r+0x1a>
 8004c9c:	682b      	ldr	r3, [r5, #0]
 8004c9e:	b103      	cbz	r3, 8004ca2 <_sbrk_r+0x1a>
 8004ca0:	6023      	str	r3, [r4, #0]
 8004ca2:	bd38      	pop	{r3, r4, r5, pc}
 8004ca4:	20000aac 	.word	0x20000aac

08004ca8 <siprintf>:
 8004ca8:	b40e      	push	{r1, r2, r3}
 8004caa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004cae:	b500      	push	{lr}
 8004cb0:	b09c      	sub	sp, #112	; 0x70
 8004cb2:	ab1d      	add	r3, sp, #116	; 0x74
 8004cb4:	9002      	str	r0, [sp, #8]
 8004cb6:	9006      	str	r0, [sp, #24]
 8004cb8:	9107      	str	r1, [sp, #28]
 8004cba:	9104      	str	r1, [sp, #16]
 8004cbc:	4808      	ldr	r0, [pc, #32]	; (8004ce0 <siprintf+0x38>)
 8004cbe:	4909      	ldr	r1, [pc, #36]	; (8004ce4 <siprintf+0x3c>)
 8004cc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cc4:	9105      	str	r1, [sp, #20]
 8004cc6:	6800      	ldr	r0, [r0, #0]
 8004cc8:	a902      	add	r1, sp, #8
 8004cca:	9301      	str	r3, [sp, #4]
 8004ccc:	f000 fa5e 	bl	800518c <_svfiprintf_r>
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	9b02      	ldr	r3, [sp, #8]
 8004cd4:	701a      	strb	r2, [r3, #0]
 8004cd6:	b01c      	add	sp, #112	; 0x70
 8004cd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cdc:	b003      	add	sp, #12
 8004cde:	4770      	bx	lr
 8004ce0:	20000010 	.word	0x20000010
 8004ce4:	ffff0208 	.word	0xffff0208

08004ce8 <siscanf>:
 8004ce8:	b40e      	push	{r1, r2, r3}
 8004cea:	f44f 7201 	mov.w	r2, #516	; 0x204
 8004cee:	b530      	push	{r4, r5, lr}
 8004cf0:	b09c      	sub	sp, #112	; 0x70
 8004cf2:	ac1f      	add	r4, sp, #124	; 0x7c
 8004cf4:	f854 5b04 	ldr.w	r5, [r4], #4
 8004cf8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004cfc:	9002      	str	r0, [sp, #8]
 8004cfe:	9006      	str	r0, [sp, #24]
 8004d00:	f7fb fa2e 	bl	8000160 <strlen>
 8004d04:	4b0b      	ldr	r3, [pc, #44]	; (8004d34 <siscanf+0x4c>)
 8004d06:	9003      	str	r0, [sp, #12]
 8004d08:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d0e:	9314      	str	r3, [sp, #80]	; 0x50
 8004d10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d14:	9007      	str	r0, [sp, #28]
 8004d16:	4808      	ldr	r0, [pc, #32]	; (8004d38 <siscanf+0x50>)
 8004d18:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004d1c:	462a      	mov	r2, r5
 8004d1e:	4623      	mov	r3, r4
 8004d20:	a902      	add	r1, sp, #8
 8004d22:	6800      	ldr	r0, [r0, #0]
 8004d24:	9401      	str	r4, [sp, #4]
 8004d26:	f000 fb8b 	bl	8005440 <__ssvfiscanf_r>
 8004d2a:	b01c      	add	sp, #112	; 0x70
 8004d2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d30:	b003      	add	sp, #12
 8004d32:	4770      	bx	lr
 8004d34:	08004d5f 	.word	0x08004d5f
 8004d38:	20000010 	.word	0x20000010

08004d3c <__sread>:
 8004d3c:	b510      	push	{r4, lr}
 8004d3e:	460c      	mov	r4, r1
 8004d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d44:	f001 f92e 	bl	8005fa4 <_read_r>
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	bfab      	itete	ge
 8004d4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d4e:	89a3      	ldrhlt	r3, [r4, #12]
 8004d50:	181b      	addge	r3, r3, r0
 8004d52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d56:	bfac      	ite	ge
 8004d58:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d5a:	81a3      	strhlt	r3, [r4, #12]
 8004d5c:	bd10      	pop	{r4, pc}

08004d5e <__seofread>:
 8004d5e:	2000      	movs	r0, #0
 8004d60:	4770      	bx	lr

08004d62 <__swrite>:
 8004d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d66:	461f      	mov	r7, r3
 8004d68:	898b      	ldrh	r3, [r1, #12]
 8004d6a:	4605      	mov	r5, r0
 8004d6c:	05db      	lsls	r3, r3, #23
 8004d6e:	460c      	mov	r4, r1
 8004d70:	4616      	mov	r6, r2
 8004d72:	d505      	bpl.n	8004d80 <__swrite+0x1e>
 8004d74:	2302      	movs	r3, #2
 8004d76:	2200      	movs	r2, #0
 8004d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d7c:	f000 f98c 	bl	8005098 <_lseek_r>
 8004d80:	89a3      	ldrh	r3, [r4, #12]
 8004d82:	4632      	mov	r2, r6
 8004d84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d88:	81a3      	strh	r3, [r4, #12]
 8004d8a:	4628      	mov	r0, r5
 8004d8c:	463b      	mov	r3, r7
 8004d8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d96:	f000 b92d 	b.w	8004ff4 <_write_r>

08004d9a <__sseek>:
 8004d9a:	b510      	push	{r4, lr}
 8004d9c:	460c      	mov	r4, r1
 8004d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004da2:	f000 f979 	bl	8005098 <_lseek_r>
 8004da6:	1c43      	adds	r3, r0, #1
 8004da8:	89a3      	ldrh	r3, [r4, #12]
 8004daa:	bf15      	itete	ne
 8004dac:	6560      	strne	r0, [r4, #84]	; 0x54
 8004dae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004db2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004db6:	81a3      	strheq	r3, [r4, #12]
 8004db8:	bf18      	it	ne
 8004dba:	81a3      	strhne	r3, [r4, #12]
 8004dbc:	bd10      	pop	{r4, pc}

08004dbe <__sclose>:
 8004dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dc2:	f000 b947 	b.w	8005054 <_close_r>

08004dc6 <strcpy>:
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dcc:	f803 2b01 	strb.w	r2, [r3], #1
 8004dd0:	2a00      	cmp	r2, #0
 8004dd2:	d1f9      	bne.n	8004dc8 <strcpy+0x2>
 8004dd4:	4770      	bx	lr

08004dd6 <strncpy>:
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	b510      	push	{r4, lr}
 8004dda:	3901      	subs	r1, #1
 8004ddc:	b132      	cbz	r2, 8004dec <strncpy+0x16>
 8004dde:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004de2:	3a01      	subs	r2, #1
 8004de4:	f803 4b01 	strb.w	r4, [r3], #1
 8004de8:	2c00      	cmp	r4, #0
 8004dea:	d1f7      	bne.n	8004ddc <strncpy+0x6>
 8004dec:	2100      	movs	r1, #0
 8004dee:	441a      	add	r2, r3
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d100      	bne.n	8004df6 <strncpy+0x20>
 8004df4:	bd10      	pop	{r4, pc}
 8004df6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dfa:	e7f9      	b.n	8004df0 <strncpy+0x1a>

08004dfc <strstr>:
 8004dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dfe:	780c      	ldrb	r4, [r1, #0]
 8004e00:	b164      	cbz	r4, 8004e1c <strstr+0x20>
 8004e02:	4603      	mov	r3, r0
 8004e04:	781a      	ldrb	r2, [r3, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	1c5e      	adds	r6, r3, #1
 8004e0a:	b90a      	cbnz	r2, 8004e10 <strstr+0x14>
 8004e0c:	4610      	mov	r0, r2
 8004e0e:	e005      	b.n	8004e1c <strstr+0x20>
 8004e10:	4294      	cmp	r4, r2
 8004e12:	d108      	bne.n	8004e26 <strstr+0x2a>
 8004e14:	460d      	mov	r5, r1
 8004e16:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8004e1a:	b902      	cbnz	r2, 8004e1e <strstr+0x22>
 8004e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e1e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8004e22:	4297      	cmp	r7, r2
 8004e24:	d0f7      	beq.n	8004e16 <strstr+0x1a>
 8004e26:	4633      	mov	r3, r6
 8004e28:	e7ec      	b.n	8004e04 <strstr+0x8>
	...

08004e2c <strtok>:
 8004e2c:	4b16      	ldr	r3, [pc, #88]	; (8004e88 <strtok+0x5c>)
 8004e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e32:	681f      	ldr	r7, [r3, #0]
 8004e34:	4605      	mov	r5, r0
 8004e36:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8004e38:	460e      	mov	r6, r1
 8004e3a:	b9ec      	cbnz	r4, 8004e78 <strtok+0x4c>
 8004e3c:	2050      	movs	r0, #80	; 0x50
 8004e3e:	f7ff fe49 	bl	8004ad4 <malloc>
 8004e42:	4602      	mov	r2, r0
 8004e44:	65b8      	str	r0, [r7, #88]	; 0x58
 8004e46:	b920      	cbnz	r0, 8004e52 <strtok+0x26>
 8004e48:	2157      	movs	r1, #87	; 0x57
 8004e4a:	4b10      	ldr	r3, [pc, #64]	; (8004e8c <strtok+0x60>)
 8004e4c:	4810      	ldr	r0, [pc, #64]	; (8004e90 <strtok+0x64>)
 8004e4e:	f000 f8e3 	bl	8005018 <__assert_func>
 8004e52:	e9c0 4400 	strd	r4, r4, [r0]
 8004e56:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004e5a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004e5e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004e62:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004e66:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004e6a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004e6e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004e72:	6184      	str	r4, [r0, #24]
 8004e74:	7704      	strb	r4, [r0, #28]
 8004e76:	6244      	str	r4, [r0, #36]	; 0x24
 8004e78:	4631      	mov	r1, r6
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e84:	f000 b806 	b.w	8004e94 <__strtok_r>
 8004e88:	20000010 	.word	0x20000010
 8004e8c:	080078e0 	.word	0x080078e0
 8004e90:	080078f7 	.word	0x080078f7

08004e94 <__strtok_r>:
 8004e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e96:	b908      	cbnz	r0, 8004e9c <__strtok_r+0x8>
 8004e98:	6810      	ldr	r0, [r2, #0]
 8004e9a:	b188      	cbz	r0, 8004ec0 <__strtok_r+0x2c>
 8004e9c:	4604      	mov	r4, r0
 8004e9e:	460f      	mov	r7, r1
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004ea6:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004eaa:	b91e      	cbnz	r6, 8004eb4 <__strtok_r+0x20>
 8004eac:	b965      	cbnz	r5, 8004ec8 <__strtok_r+0x34>
 8004eae:	4628      	mov	r0, r5
 8004eb0:	6015      	str	r5, [r2, #0]
 8004eb2:	e005      	b.n	8004ec0 <__strtok_r+0x2c>
 8004eb4:	42b5      	cmp	r5, r6
 8004eb6:	d1f6      	bne.n	8004ea6 <__strtok_r+0x12>
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1f0      	bne.n	8004e9e <__strtok_r+0xa>
 8004ebc:	6014      	str	r4, [r2, #0]
 8004ebe:	7003      	strb	r3, [r0, #0]
 8004ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ec2:	461c      	mov	r4, r3
 8004ec4:	e00c      	b.n	8004ee0 <__strtok_r+0x4c>
 8004ec6:	b915      	cbnz	r5, 8004ece <__strtok_r+0x3a>
 8004ec8:	460e      	mov	r6, r1
 8004eca:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004ece:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004ed2:	42ab      	cmp	r3, r5
 8004ed4:	d1f7      	bne.n	8004ec6 <__strtok_r+0x32>
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0f3      	beq.n	8004ec2 <__strtok_r+0x2e>
 8004eda:	2300      	movs	r3, #0
 8004edc:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004ee0:	6014      	str	r4, [r2, #0]
 8004ee2:	e7ed      	b.n	8004ec0 <__strtok_r+0x2c>

08004ee4 <_strtol_l.isra.0>:
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004eea:	4686      	mov	lr, r0
 8004eec:	d001      	beq.n	8004ef2 <_strtol_l.isra.0+0xe>
 8004eee:	2b24      	cmp	r3, #36	; 0x24
 8004ef0:	d906      	bls.n	8004f00 <_strtol_l.isra.0+0x1c>
 8004ef2:	f7ff fdc5 	bl	8004a80 <__errno>
 8004ef6:	2316      	movs	r3, #22
 8004ef8:	6003      	str	r3, [r0, #0]
 8004efa:	2000      	movs	r0, #0
 8004efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f00:	468c      	mov	ip, r1
 8004f02:	4e3a      	ldr	r6, [pc, #232]	; (8004fec <_strtol_l.isra.0+0x108>)
 8004f04:	4660      	mov	r0, ip
 8004f06:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004f0a:	5da5      	ldrb	r5, [r4, r6]
 8004f0c:	f015 0508 	ands.w	r5, r5, #8
 8004f10:	d1f8      	bne.n	8004f04 <_strtol_l.isra.0+0x20>
 8004f12:	2c2d      	cmp	r4, #45	; 0x2d
 8004f14:	d133      	bne.n	8004f7e <_strtol_l.isra.0+0x9a>
 8004f16:	f04f 0801 	mov.w	r8, #1
 8004f1a:	f89c 4000 	ldrb.w	r4, [ip]
 8004f1e:	f100 0c02 	add.w	ip, r0, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d05d      	beq.n	8004fe2 <_strtol_l.isra.0+0xfe>
 8004f26:	2b10      	cmp	r3, #16
 8004f28:	d10c      	bne.n	8004f44 <_strtol_l.isra.0+0x60>
 8004f2a:	2c30      	cmp	r4, #48	; 0x30
 8004f2c:	d10a      	bne.n	8004f44 <_strtol_l.isra.0+0x60>
 8004f2e:	f89c 0000 	ldrb.w	r0, [ip]
 8004f32:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004f36:	2858      	cmp	r0, #88	; 0x58
 8004f38:	d14e      	bne.n	8004fd8 <_strtol_l.isra.0+0xf4>
 8004f3a:	2310      	movs	r3, #16
 8004f3c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8004f40:	f10c 0c02 	add.w	ip, ip, #2
 8004f44:	2500      	movs	r5, #0
 8004f46:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8004f4a:	3f01      	subs	r7, #1
 8004f4c:	fbb7 f9f3 	udiv	r9, r7, r3
 8004f50:	4628      	mov	r0, r5
 8004f52:	fb03 7a19 	mls	sl, r3, r9, r7
 8004f56:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8004f5a:	2e09      	cmp	r6, #9
 8004f5c:	d818      	bhi.n	8004f90 <_strtol_l.isra.0+0xac>
 8004f5e:	4634      	mov	r4, r6
 8004f60:	42a3      	cmp	r3, r4
 8004f62:	dd24      	ble.n	8004fae <_strtol_l.isra.0+0xca>
 8004f64:	2d00      	cmp	r5, #0
 8004f66:	db1f      	blt.n	8004fa8 <_strtol_l.isra.0+0xc4>
 8004f68:	4581      	cmp	r9, r0
 8004f6a:	d31d      	bcc.n	8004fa8 <_strtol_l.isra.0+0xc4>
 8004f6c:	d101      	bne.n	8004f72 <_strtol_l.isra.0+0x8e>
 8004f6e:	45a2      	cmp	sl, r4
 8004f70:	db1a      	blt.n	8004fa8 <_strtol_l.isra.0+0xc4>
 8004f72:	2501      	movs	r5, #1
 8004f74:	fb00 4003 	mla	r0, r0, r3, r4
 8004f78:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004f7c:	e7eb      	b.n	8004f56 <_strtol_l.isra.0+0x72>
 8004f7e:	2c2b      	cmp	r4, #43	; 0x2b
 8004f80:	bf08      	it	eq
 8004f82:	f89c 4000 	ldrbeq.w	r4, [ip]
 8004f86:	46a8      	mov	r8, r5
 8004f88:	bf08      	it	eq
 8004f8a:	f100 0c02 	addeq.w	ip, r0, #2
 8004f8e:	e7c8      	b.n	8004f22 <_strtol_l.isra.0+0x3e>
 8004f90:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8004f94:	2e19      	cmp	r6, #25
 8004f96:	d801      	bhi.n	8004f9c <_strtol_l.isra.0+0xb8>
 8004f98:	3c37      	subs	r4, #55	; 0x37
 8004f9a:	e7e1      	b.n	8004f60 <_strtol_l.isra.0+0x7c>
 8004f9c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8004fa0:	2e19      	cmp	r6, #25
 8004fa2:	d804      	bhi.n	8004fae <_strtol_l.isra.0+0xca>
 8004fa4:	3c57      	subs	r4, #87	; 0x57
 8004fa6:	e7db      	b.n	8004f60 <_strtol_l.isra.0+0x7c>
 8004fa8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004fac:	e7e4      	b.n	8004f78 <_strtol_l.isra.0+0x94>
 8004fae:	2d00      	cmp	r5, #0
 8004fb0:	da08      	bge.n	8004fc4 <_strtol_l.isra.0+0xe0>
 8004fb2:	2322      	movs	r3, #34	; 0x22
 8004fb4:	4638      	mov	r0, r7
 8004fb6:	f8ce 3000 	str.w	r3, [lr]
 8004fba:	2a00      	cmp	r2, #0
 8004fbc:	d09e      	beq.n	8004efc <_strtol_l.isra.0+0x18>
 8004fbe:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8004fc2:	e007      	b.n	8004fd4 <_strtol_l.isra.0+0xf0>
 8004fc4:	f1b8 0f00 	cmp.w	r8, #0
 8004fc8:	d000      	beq.n	8004fcc <_strtol_l.isra.0+0xe8>
 8004fca:	4240      	negs	r0, r0
 8004fcc:	2a00      	cmp	r2, #0
 8004fce:	d095      	beq.n	8004efc <_strtol_l.isra.0+0x18>
 8004fd0:	2d00      	cmp	r5, #0
 8004fd2:	d1f4      	bne.n	8004fbe <_strtol_l.isra.0+0xda>
 8004fd4:	6011      	str	r1, [r2, #0]
 8004fd6:	e791      	b.n	8004efc <_strtol_l.isra.0+0x18>
 8004fd8:	2430      	movs	r4, #48	; 0x30
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1b2      	bne.n	8004f44 <_strtol_l.isra.0+0x60>
 8004fde:	2308      	movs	r3, #8
 8004fe0:	e7b0      	b.n	8004f44 <_strtol_l.isra.0+0x60>
 8004fe2:	2c30      	cmp	r4, #48	; 0x30
 8004fe4:	d0a3      	beq.n	8004f2e <_strtol_l.isra.0+0x4a>
 8004fe6:	230a      	movs	r3, #10
 8004fe8:	e7ac      	b.n	8004f44 <_strtol_l.isra.0+0x60>
 8004fea:	bf00      	nop
 8004fec:	08007995 	.word	0x08007995

08004ff0 <_strtol_r>:
 8004ff0:	f7ff bf78 	b.w	8004ee4 <_strtol_l.isra.0>

08004ff4 <_write_r>:
 8004ff4:	b538      	push	{r3, r4, r5, lr}
 8004ff6:	4604      	mov	r4, r0
 8004ff8:	4608      	mov	r0, r1
 8004ffa:	4611      	mov	r1, r2
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	4d05      	ldr	r5, [pc, #20]	; (8005014 <_write_r+0x20>)
 8005000:	602a      	str	r2, [r5, #0]
 8005002:	461a      	mov	r2, r3
 8005004:	f7fc ff66 	bl	8001ed4 <_write>
 8005008:	1c43      	adds	r3, r0, #1
 800500a:	d102      	bne.n	8005012 <_write_r+0x1e>
 800500c:	682b      	ldr	r3, [r5, #0]
 800500e:	b103      	cbz	r3, 8005012 <_write_r+0x1e>
 8005010:	6023      	str	r3, [r4, #0]
 8005012:	bd38      	pop	{r3, r4, r5, pc}
 8005014:	20000aac 	.word	0x20000aac

08005018 <__assert_func>:
 8005018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800501a:	4614      	mov	r4, r2
 800501c:	461a      	mov	r2, r3
 800501e:	4b09      	ldr	r3, [pc, #36]	; (8005044 <__assert_func+0x2c>)
 8005020:	4605      	mov	r5, r0
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68d8      	ldr	r0, [r3, #12]
 8005026:	b14c      	cbz	r4, 800503c <__assert_func+0x24>
 8005028:	4b07      	ldr	r3, [pc, #28]	; (8005048 <__assert_func+0x30>)
 800502a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800502e:	9100      	str	r1, [sp, #0]
 8005030:	462b      	mov	r3, r5
 8005032:	4906      	ldr	r1, [pc, #24]	; (800504c <__assert_func+0x34>)
 8005034:	f000 f81e 	bl	8005074 <fiprintf>
 8005038:	f001 f976 	bl	8006328 <abort>
 800503c:	4b04      	ldr	r3, [pc, #16]	; (8005050 <__assert_func+0x38>)
 800503e:	461c      	mov	r4, r3
 8005040:	e7f3      	b.n	800502a <__assert_func+0x12>
 8005042:	bf00      	nop
 8005044:	20000010 	.word	0x20000010
 8005048:	08007958 	.word	0x08007958
 800504c:	08007965 	.word	0x08007965
 8005050:	08007993 	.word	0x08007993

08005054 <_close_r>:
 8005054:	b538      	push	{r3, r4, r5, lr}
 8005056:	2300      	movs	r3, #0
 8005058:	4d05      	ldr	r5, [pc, #20]	; (8005070 <_close_r+0x1c>)
 800505a:	4604      	mov	r4, r0
 800505c:	4608      	mov	r0, r1
 800505e:	602b      	str	r3, [r5, #0]
 8005060:	f7fc ff54 	bl	8001f0c <_close>
 8005064:	1c43      	adds	r3, r0, #1
 8005066:	d102      	bne.n	800506e <_close_r+0x1a>
 8005068:	682b      	ldr	r3, [r5, #0]
 800506a:	b103      	cbz	r3, 800506e <_close_r+0x1a>
 800506c:	6023      	str	r3, [r4, #0]
 800506e:	bd38      	pop	{r3, r4, r5, pc}
 8005070:	20000aac 	.word	0x20000aac

08005074 <fiprintf>:
 8005074:	b40e      	push	{r1, r2, r3}
 8005076:	b503      	push	{r0, r1, lr}
 8005078:	4601      	mov	r1, r0
 800507a:	ab03      	add	r3, sp, #12
 800507c:	4805      	ldr	r0, [pc, #20]	; (8005094 <fiprintf+0x20>)
 800507e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005082:	6800      	ldr	r0, [r0, #0]
 8005084:	9301      	str	r3, [sp, #4]
 8005086:	f000 fb7d 	bl	8005784 <_vfiprintf_r>
 800508a:	b002      	add	sp, #8
 800508c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005090:	b003      	add	sp, #12
 8005092:	4770      	bx	lr
 8005094:	20000010 	.word	0x20000010

08005098 <_lseek_r>:
 8005098:	b538      	push	{r3, r4, r5, lr}
 800509a:	4604      	mov	r4, r0
 800509c:	4608      	mov	r0, r1
 800509e:	4611      	mov	r1, r2
 80050a0:	2200      	movs	r2, #0
 80050a2:	4d05      	ldr	r5, [pc, #20]	; (80050b8 <_lseek_r+0x20>)
 80050a4:	602a      	str	r2, [r5, #0]
 80050a6:	461a      	mov	r2, r3
 80050a8:	f7fc ff54 	bl	8001f54 <_lseek>
 80050ac:	1c43      	adds	r3, r0, #1
 80050ae:	d102      	bne.n	80050b6 <_lseek_r+0x1e>
 80050b0:	682b      	ldr	r3, [r5, #0]
 80050b2:	b103      	cbz	r3, 80050b6 <_lseek_r+0x1e>
 80050b4:	6023      	str	r3, [r4, #0]
 80050b6:	bd38      	pop	{r3, r4, r5, pc}
 80050b8:	20000aac 	.word	0x20000aac

080050bc <__malloc_lock>:
 80050bc:	4801      	ldr	r0, [pc, #4]	; (80050c4 <__malloc_lock+0x8>)
 80050be:	f001 baf3 	b.w	80066a8 <__retarget_lock_acquire_recursive>
 80050c2:	bf00      	nop
 80050c4:	20000ab4 	.word	0x20000ab4

080050c8 <__malloc_unlock>:
 80050c8:	4801      	ldr	r0, [pc, #4]	; (80050d0 <__malloc_unlock+0x8>)
 80050ca:	f001 baee 	b.w	80066aa <__retarget_lock_release_recursive>
 80050ce:	bf00      	nop
 80050d0:	20000ab4 	.word	0x20000ab4

080050d4 <__ssputs_r>:
 80050d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050d8:	688e      	ldr	r6, [r1, #8]
 80050da:	4682      	mov	sl, r0
 80050dc:	429e      	cmp	r6, r3
 80050de:	460c      	mov	r4, r1
 80050e0:	4690      	mov	r8, r2
 80050e2:	461f      	mov	r7, r3
 80050e4:	d838      	bhi.n	8005158 <__ssputs_r+0x84>
 80050e6:	898a      	ldrh	r2, [r1, #12]
 80050e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80050ec:	d032      	beq.n	8005154 <__ssputs_r+0x80>
 80050ee:	6825      	ldr	r5, [r4, #0]
 80050f0:	6909      	ldr	r1, [r1, #16]
 80050f2:	3301      	adds	r3, #1
 80050f4:	eba5 0901 	sub.w	r9, r5, r1
 80050f8:	6965      	ldr	r5, [r4, #20]
 80050fa:	444b      	add	r3, r9
 80050fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005100:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005104:	106d      	asrs	r5, r5, #1
 8005106:	429d      	cmp	r5, r3
 8005108:	bf38      	it	cc
 800510a:	461d      	movcc	r5, r3
 800510c:	0553      	lsls	r3, r2, #21
 800510e:	d531      	bpl.n	8005174 <__ssputs_r+0xa0>
 8005110:	4629      	mov	r1, r5
 8005112:	f7ff fd5f 	bl	8004bd4 <_malloc_r>
 8005116:	4606      	mov	r6, r0
 8005118:	b950      	cbnz	r0, 8005130 <__ssputs_r+0x5c>
 800511a:	230c      	movs	r3, #12
 800511c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005120:	f8ca 3000 	str.w	r3, [sl]
 8005124:	89a3      	ldrh	r3, [r4, #12]
 8005126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800512a:	81a3      	strh	r3, [r4, #12]
 800512c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005130:	464a      	mov	r2, r9
 8005132:	6921      	ldr	r1, [r4, #16]
 8005134:	f7ff fcde 	bl	8004af4 <memcpy>
 8005138:	89a3      	ldrh	r3, [r4, #12]
 800513a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800513e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005142:	81a3      	strh	r3, [r4, #12]
 8005144:	6126      	str	r6, [r4, #16]
 8005146:	444e      	add	r6, r9
 8005148:	6026      	str	r6, [r4, #0]
 800514a:	463e      	mov	r6, r7
 800514c:	6165      	str	r5, [r4, #20]
 800514e:	eba5 0509 	sub.w	r5, r5, r9
 8005152:	60a5      	str	r5, [r4, #8]
 8005154:	42be      	cmp	r6, r7
 8005156:	d900      	bls.n	800515a <__ssputs_r+0x86>
 8005158:	463e      	mov	r6, r7
 800515a:	4632      	mov	r2, r6
 800515c:	4641      	mov	r1, r8
 800515e:	6820      	ldr	r0, [r4, #0]
 8005160:	f001 fb16 	bl	8006790 <memmove>
 8005164:	68a3      	ldr	r3, [r4, #8]
 8005166:	6822      	ldr	r2, [r4, #0]
 8005168:	1b9b      	subs	r3, r3, r6
 800516a:	4432      	add	r2, r6
 800516c:	2000      	movs	r0, #0
 800516e:	60a3      	str	r3, [r4, #8]
 8005170:	6022      	str	r2, [r4, #0]
 8005172:	e7db      	b.n	800512c <__ssputs_r+0x58>
 8005174:	462a      	mov	r2, r5
 8005176:	f001 fb25 	bl	80067c4 <_realloc_r>
 800517a:	4606      	mov	r6, r0
 800517c:	2800      	cmp	r0, #0
 800517e:	d1e1      	bne.n	8005144 <__ssputs_r+0x70>
 8005180:	4650      	mov	r0, sl
 8005182:	6921      	ldr	r1, [r4, #16]
 8005184:	f7ff fcda 	bl	8004b3c <_free_r>
 8005188:	e7c7      	b.n	800511a <__ssputs_r+0x46>
	...

0800518c <_svfiprintf_r>:
 800518c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005190:	4698      	mov	r8, r3
 8005192:	898b      	ldrh	r3, [r1, #12]
 8005194:	4607      	mov	r7, r0
 8005196:	061b      	lsls	r3, r3, #24
 8005198:	460d      	mov	r5, r1
 800519a:	4614      	mov	r4, r2
 800519c:	b09d      	sub	sp, #116	; 0x74
 800519e:	d50e      	bpl.n	80051be <_svfiprintf_r+0x32>
 80051a0:	690b      	ldr	r3, [r1, #16]
 80051a2:	b963      	cbnz	r3, 80051be <_svfiprintf_r+0x32>
 80051a4:	2140      	movs	r1, #64	; 0x40
 80051a6:	f7ff fd15 	bl	8004bd4 <_malloc_r>
 80051aa:	6028      	str	r0, [r5, #0]
 80051ac:	6128      	str	r0, [r5, #16]
 80051ae:	b920      	cbnz	r0, 80051ba <_svfiprintf_r+0x2e>
 80051b0:	230c      	movs	r3, #12
 80051b2:	603b      	str	r3, [r7, #0]
 80051b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051b8:	e0d1      	b.n	800535e <_svfiprintf_r+0x1d2>
 80051ba:	2340      	movs	r3, #64	; 0x40
 80051bc:	616b      	str	r3, [r5, #20]
 80051be:	2300      	movs	r3, #0
 80051c0:	9309      	str	r3, [sp, #36]	; 0x24
 80051c2:	2320      	movs	r3, #32
 80051c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051c8:	2330      	movs	r3, #48	; 0x30
 80051ca:	f04f 0901 	mov.w	r9, #1
 80051ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80051d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005378 <_svfiprintf_r+0x1ec>
 80051d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051da:	4623      	mov	r3, r4
 80051dc:	469a      	mov	sl, r3
 80051de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051e2:	b10a      	cbz	r2, 80051e8 <_svfiprintf_r+0x5c>
 80051e4:	2a25      	cmp	r2, #37	; 0x25
 80051e6:	d1f9      	bne.n	80051dc <_svfiprintf_r+0x50>
 80051e8:	ebba 0b04 	subs.w	fp, sl, r4
 80051ec:	d00b      	beq.n	8005206 <_svfiprintf_r+0x7a>
 80051ee:	465b      	mov	r3, fp
 80051f0:	4622      	mov	r2, r4
 80051f2:	4629      	mov	r1, r5
 80051f4:	4638      	mov	r0, r7
 80051f6:	f7ff ff6d 	bl	80050d4 <__ssputs_r>
 80051fa:	3001      	adds	r0, #1
 80051fc:	f000 80aa 	beq.w	8005354 <_svfiprintf_r+0x1c8>
 8005200:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005202:	445a      	add	r2, fp
 8005204:	9209      	str	r2, [sp, #36]	; 0x24
 8005206:	f89a 3000 	ldrb.w	r3, [sl]
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 80a2 	beq.w	8005354 <_svfiprintf_r+0x1c8>
 8005210:	2300      	movs	r3, #0
 8005212:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005216:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800521a:	f10a 0a01 	add.w	sl, sl, #1
 800521e:	9304      	str	r3, [sp, #16]
 8005220:	9307      	str	r3, [sp, #28]
 8005222:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005226:	931a      	str	r3, [sp, #104]	; 0x68
 8005228:	4654      	mov	r4, sl
 800522a:	2205      	movs	r2, #5
 800522c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005230:	4851      	ldr	r0, [pc, #324]	; (8005378 <_svfiprintf_r+0x1ec>)
 8005232:	f001 fa9f 	bl	8006774 <memchr>
 8005236:	9a04      	ldr	r2, [sp, #16]
 8005238:	b9d8      	cbnz	r0, 8005272 <_svfiprintf_r+0xe6>
 800523a:	06d0      	lsls	r0, r2, #27
 800523c:	bf44      	itt	mi
 800523e:	2320      	movmi	r3, #32
 8005240:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005244:	0711      	lsls	r1, r2, #28
 8005246:	bf44      	itt	mi
 8005248:	232b      	movmi	r3, #43	; 0x2b
 800524a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800524e:	f89a 3000 	ldrb.w	r3, [sl]
 8005252:	2b2a      	cmp	r3, #42	; 0x2a
 8005254:	d015      	beq.n	8005282 <_svfiprintf_r+0xf6>
 8005256:	4654      	mov	r4, sl
 8005258:	2000      	movs	r0, #0
 800525a:	f04f 0c0a 	mov.w	ip, #10
 800525e:	9a07      	ldr	r2, [sp, #28]
 8005260:	4621      	mov	r1, r4
 8005262:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005266:	3b30      	subs	r3, #48	; 0x30
 8005268:	2b09      	cmp	r3, #9
 800526a:	d94e      	bls.n	800530a <_svfiprintf_r+0x17e>
 800526c:	b1b0      	cbz	r0, 800529c <_svfiprintf_r+0x110>
 800526e:	9207      	str	r2, [sp, #28]
 8005270:	e014      	b.n	800529c <_svfiprintf_r+0x110>
 8005272:	eba0 0308 	sub.w	r3, r0, r8
 8005276:	fa09 f303 	lsl.w	r3, r9, r3
 800527a:	4313      	orrs	r3, r2
 800527c:	46a2      	mov	sl, r4
 800527e:	9304      	str	r3, [sp, #16]
 8005280:	e7d2      	b.n	8005228 <_svfiprintf_r+0x9c>
 8005282:	9b03      	ldr	r3, [sp, #12]
 8005284:	1d19      	adds	r1, r3, #4
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	9103      	str	r1, [sp, #12]
 800528a:	2b00      	cmp	r3, #0
 800528c:	bfbb      	ittet	lt
 800528e:	425b      	neglt	r3, r3
 8005290:	f042 0202 	orrlt.w	r2, r2, #2
 8005294:	9307      	strge	r3, [sp, #28]
 8005296:	9307      	strlt	r3, [sp, #28]
 8005298:	bfb8      	it	lt
 800529a:	9204      	strlt	r2, [sp, #16]
 800529c:	7823      	ldrb	r3, [r4, #0]
 800529e:	2b2e      	cmp	r3, #46	; 0x2e
 80052a0:	d10c      	bne.n	80052bc <_svfiprintf_r+0x130>
 80052a2:	7863      	ldrb	r3, [r4, #1]
 80052a4:	2b2a      	cmp	r3, #42	; 0x2a
 80052a6:	d135      	bne.n	8005314 <_svfiprintf_r+0x188>
 80052a8:	9b03      	ldr	r3, [sp, #12]
 80052aa:	3402      	adds	r4, #2
 80052ac:	1d1a      	adds	r2, r3, #4
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	9203      	str	r2, [sp, #12]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	bfb8      	it	lt
 80052b6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80052ba:	9305      	str	r3, [sp, #20]
 80052bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005388 <_svfiprintf_r+0x1fc>
 80052c0:	2203      	movs	r2, #3
 80052c2:	4650      	mov	r0, sl
 80052c4:	7821      	ldrb	r1, [r4, #0]
 80052c6:	f001 fa55 	bl	8006774 <memchr>
 80052ca:	b140      	cbz	r0, 80052de <_svfiprintf_r+0x152>
 80052cc:	2340      	movs	r3, #64	; 0x40
 80052ce:	eba0 000a 	sub.w	r0, r0, sl
 80052d2:	fa03 f000 	lsl.w	r0, r3, r0
 80052d6:	9b04      	ldr	r3, [sp, #16]
 80052d8:	3401      	adds	r4, #1
 80052da:	4303      	orrs	r3, r0
 80052dc:	9304      	str	r3, [sp, #16]
 80052de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052e2:	2206      	movs	r2, #6
 80052e4:	4825      	ldr	r0, [pc, #148]	; (800537c <_svfiprintf_r+0x1f0>)
 80052e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052ea:	f001 fa43 	bl	8006774 <memchr>
 80052ee:	2800      	cmp	r0, #0
 80052f0:	d038      	beq.n	8005364 <_svfiprintf_r+0x1d8>
 80052f2:	4b23      	ldr	r3, [pc, #140]	; (8005380 <_svfiprintf_r+0x1f4>)
 80052f4:	bb1b      	cbnz	r3, 800533e <_svfiprintf_r+0x1b2>
 80052f6:	9b03      	ldr	r3, [sp, #12]
 80052f8:	3307      	adds	r3, #7
 80052fa:	f023 0307 	bic.w	r3, r3, #7
 80052fe:	3308      	adds	r3, #8
 8005300:	9303      	str	r3, [sp, #12]
 8005302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005304:	4433      	add	r3, r6
 8005306:	9309      	str	r3, [sp, #36]	; 0x24
 8005308:	e767      	b.n	80051da <_svfiprintf_r+0x4e>
 800530a:	460c      	mov	r4, r1
 800530c:	2001      	movs	r0, #1
 800530e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005312:	e7a5      	b.n	8005260 <_svfiprintf_r+0xd4>
 8005314:	2300      	movs	r3, #0
 8005316:	f04f 0c0a 	mov.w	ip, #10
 800531a:	4619      	mov	r1, r3
 800531c:	3401      	adds	r4, #1
 800531e:	9305      	str	r3, [sp, #20]
 8005320:	4620      	mov	r0, r4
 8005322:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005326:	3a30      	subs	r2, #48	; 0x30
 8005328:	2a09      	cmp	r2, #9
 800532a:	d903      	bls.n	8005334 <_svfiprintf_r+0x1a8>
 800532c:	2b00      	cmp	r3, #0
 800532e:	d0c5      	beq.n	80052bc <_svfiprintf_r+0x130>
 8005330:	9105      	str	r1, [sp, #20]
 8005332:	e7c3      	b.n	80052bc <_svfiprintf_r+0x130>
 8005334:	4604      	mov	r4, r0
 8005336:	2301      	movs	r3, #1
 8005338:	fb0c 2101 	mla	r1, ip, r1, r2
 800533c:	e7f0      	b.n	8005320 <_svfiprintf_r+0x194>
 800533e:	ab03      	add	r3, sp, #12
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	462a      	mov	r2, r5
 8005344:	4638      	mov	r0, r7
 8005346:	4b0f      	ldr	r3, [pc, #60]	; (8005384 <_svfiprintf_r+0x1f8>)
 8005348:	a904      	add	r1, sp, #16
 800534a:	f3af 8000 	nop.w
 800534e:	1c42      	adds	r2, r0, #1
 8005350:	4606      	mov	r6, r0
 8005352:	d1d6      	bne.n	8005302 <_svfiprintf_r+0x176>
 8005354:	89ab      	ldrh	r3, [r5, #12]
 8005356:	065b      	lsls	r3, r3, #25
 8005358:	f53f af2c 	bmi.w	80051b4 <_svfiprintf_r+0x28>
 800535c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800535e:	b01d      	add	sp, #116	; 0x74
 8005360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005364:	ab03      	add	r3, sp, #12
 8005366:	9300      	str	r3, [sp, #0]
 8005368:	462a      	mov	r2, r5
 800536a:	4638      	mov	r0, r7
 800536c:	4b05      	ldr	r3, [pc, #20]	; (8005384 <_svfiprintf_r+0x1f8>)
 800536e:	a904      	add	r1, sp, #16
 8005370:	f000 fba8 	bl	8005ac4 <_printf_i>
 8005374:	e7eb      	b.n	800534e <_svfiprintf_r+0x1c2>
 8005376:	bf00      	nop
 8005378:	08007a95 	.word	0x08007a95
 800537c:	08007a9f 	.word	0x08007a9f
 8005380:	00000000 	.word	0x00000000
 8005384:	080050d5 	.word	0x080050d5
 8005388:	08007a9b 	.word	0x08007a9b

0800538c <_sungetc_r>:
 800538c:	b538      	push	{r3, r4, r5, lr}
 800538e:	1c4b      	adds	r3, r1, #1
 8005390:	4614      	mov	r4, r2
 8005392:	d103      	bne.n	800539c <_sungetc_r+0x10>
 8005394:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005398:	4628      	mov	r0, r5
 800539a:	bd38      	pop	{r3, r4, r5, pc}
 800539c:	8993      	ldrh	r3, [r2, #12]
 800539e:	b2cd      	uxtb	r5, r1
 80053a0:	f023 0320 	bic.w	r3, r3, #32
 80053a4:	8193      	strh	r3, [r2, #12]
 80053a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80053a8:	6852      	ldr	r2, [r2, #4]
 80053aa:	b18b      	cbz	r3, 80053d0 <_sungetc_r+0x44>
 80053ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80053ae:	4293      	cmp	r3, r2
 80053b0:	dd08      	ble.n	80053c4 <_sungetc_r+0x38>
 80053b2:	6823      	ldr	r3, [r4, #0]
 80053b4:	1e5a      	subs	r2, r3, #1
 80053b6:	6022      	str	r2, [r4, #0]
 80053b8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80053bc:	6863      	ldr	r3, [r4, #4]
 80053be:	3301      	adds	r3, #1
 80053c0:	6063      	str	r3, [r4, #4]
 80053c2:	e7e9      	b.n	8005398 <_sungetc_r+0xc>
 80053c4:	4621      	mov	r1, r4
 80053c6:	f000 feb7 	bl	8006138 <__submore>
 80053ca:	2800      	cmp	r0, #0
 80053cc:	d0f1      	beq.n	80053b2 <_sungetc_r+0x26>
 80053ce:	e7e1      	b.n	8005394 <_sungetc_r+0x8>
 80053d0:	6921      	ldr	r1, [r4, #16]
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	b151      	cbz	r1, 80053ec <_sungetc_r+0x60>
 80053d6:	4299      	cmp	r1, r3
 80053d8:	d208      	bcs.n	80053ec <_sungetc_r+0x60>
 80053da:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80053de:	42a9      	cmp	r1, r5
 80053e0:	d104      	bne.n	80053ec <_sungetc_r+0x60>
 80053e2:	3b01      	subs	r3, #1
 80053e4:	3201      	adds	r2, #1
 80053e6:	6023      	str	r3, [r4, #0]
 80053e8:	6062      	str	r2, [r4, #4]
 80053ea:	e7d5      	b.n	8005398 <_sungetc_r+0xc>
 80053ec:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80053f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053f4:	6363      	str	r3, [r4, #52]	; 0x34
 80053f6:	2303      	movs	r3, #3
 80053f8:	63a3      	str	r3, [r4, #56]	; 0x38
 80053fa:	4623      	mov	r3, r4
 80053fc:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005400:	6023      	str	r3, [r4, #0]
 8005402:	2301      	movs	r3, #1
 8005404:	e7dc      	b.n	80053c0 <_sungetc_r+0x34>

08005406 <__ssrefill_r>:
 8005406:	b510      	push	{r4, lr}
 8005408:	460c      	mov	r4, r1
 800540a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800540c:	b169      	cbz	r1, 800542a <__ssrefill_r+0x24>
 800540e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005412:	4299      	cmp	r1, r3
 8005414:	d001      	beq.n	800541a <__ssrefill_r+0x14>
 8005416:	f7ff fb91 	bl	8004b3c <_free_r>
 800541a:	2000      	movs	r0, #0
 800541c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800541e:	6360      	str	r0, [r4, #52]	; 0x34
 8005420:	6063      	str	r3, [r4, #4]
 8005422:	b113      	cbz	r3, 800542a <__ssrefill_r+0x24>
 8005424:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005426:	6023      	str	r3, [r4, #0]
 8005428:	bd10      	pop	{r4, pc}
 800542a:	6923      	ldr	r3, [r4, #16]
 800542c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005430:	6023      	str	r3, [r4, #0]
 8005432:	2300      	movs	r3, #0
 8005434:	6063      	str	r3, [r4, #4]
 8005436:	89a3      	ldrh	r3, [r4, #12]
 8005438:	f043 0320 	orr.w	r3, r3, #32
 800543c:	81a3      	strh	r3, [r4, #12]
 800543e:	e7f3      	b.n	8005428 <__ssrefill_r+0x22>

08005440 <__ssvfiscanf_r>:
 8005440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005444:	460c      	mov	r4, r1
 8005446:	2100      	movs	r1, #0
 8005448:	4606      	mov	r6, r0
 800544a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800544e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8005452:	49b3      	ldr	r1, [pc, #716]	; (8005720 <__ssvfiscanf_r+0x2e0>)
 8005454:	f10d 0804 	add.w	r8, sp, #4
 8005458:	91a0      	str	r1, [sp, #640]	; 0x280
 800545a:	49b2      	ldr	r1, [pc, #712]	; (8005724 <__ssvfiscanf_r+0x2e4>)
 800545c:	4fb2      	ldr	r7, [pc, #712]	; (8005728 <__ssvfiscanf_r+0x2e8>)
 800545e:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 800572c <__ssvfiscanf_r+0x2ec>
 8005462:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005466:	91a1      	str	r1, [sp, #644]	; 0x284
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	f892 a000 	ldrb.w	sl, [r2]
 800546e:	f1ba 0f00 	cmp.w	sl, #0
 8005472:	f000 8153 	beq.w	800571c <__ssvfiscanf_r+0x2dc>
 8005476:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800547a:	1c55      	adds	r5, r2, #1
 800547c:	f013 0308 	ands.w	r3, r3, #8
 8005480:	d019      	beq.n	80054b6 <__ssvfiscanf_r+0x76>
 8005482:	6863      	ldr	r3, [r4, #4]
 8005484:	2b00      	cmp	r3, #0
 8005486:	dd0f      	ble.n	80054a8 <__ssvfiscanf_r+0x68>
 8005488:	6823      	ldr	r3, [r4, #0]
 800548a:	781a      	ldrb	r2, [r3, #0]
 800548c:	5cba      	ldrb	r2, [r7, r2]
 800548e:	0712      	lsls	r2, r2, #28
 8005490:	d401      	bmi.n	8005496 <__ssvfiscanf_r+0x56>
 8005492:	462a      	mov	r2, r5
 8005494:	e7e9      	b.n	800546a <__ssvfiscanf_r+0x2a>
 8005496:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005498:	3301      	adds	r3, #1
 800549a:	3201      	adds	r2, #1
 800549c:	9245      	str	r2, [sp, #276]	; 0x114
 800549e:	6862      	ldr	r2, [r4, #4]
 80054a0:	6023      	str	r3, [r4, #0]
 80054a2:	3a01      	subs	r2, #1
 80054a4:	6062      	str	r2, [r4, #4]
 80054a6:	e7ec      	b.n	8005482 <__ssvfiscanf_r+0x42>
 80054a8:	4621      	mov	r1, r4
 80054aa:	4630      	mov	r0, r6
 80054ac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80054ae:	4798      	blx	r3
 80054b0:	2800      	cmp	r0, #0
 80054b2:	d0e9      	beq.n	8005488 <__ssvfiscanf_r+0x48>
 80054b4:	e7ed      	b.n	8005492 <__ssvfiscanf_r+0x52>
 80054b6:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80054ba:	f040 8086 	bne.w	80055ca <__ssvfiscanf_r+0x18a>
 80054be:	9341      	str	r3, [sp, #260]	; 0x104
 80054c0:	9343      	str	r3, [sp, #268]	; 0x10c
 80054c2:	7853      	ldrb	r3, [r2, #1]
 80054c4:	2b2a      	cmp	r3, #42	; 0x2a
 80054c6:	bf04      	itt	eq
 80054c8:	2310      	moveq	r3, #16
 80054ca:	1c95      	addeq	r5, r2, #2
 80054cc:	f04f 020a 	mov.w	r2, #10
 80054d0:	bf08      	it	eq
 80054d2:	9341      	streq	r3, [sp, #260]	; 0x104
 80054d4:	46ab      	mov	fp, r5
 80054d6:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80054da:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80054de:	2b09      	cmp	r3, #9
 80054e0:	d91d      	bls.n	800551e <__ssvfiscanf_r+0xde>
 80054e2:	2203      	movs	r2, #3
 80054e4:	4891      	ldr	r0, [pc, #580]	; (800572c <__ssvfiscanf_r+0x2ec>)
 80054e6:	f001 f945 	bl	8006774 <memchr>
 80054ea:	b140      	cbz	r0, 80054fe <__ssvfiscanf_r+0xbe>
 80054ec:	2301      	movs	r3, #1
 80054ee:	465d      	mov	r5, fp
 80054f0:	eba0 0009 	sub.w	r0, r0, r9
 80054f4:	fa03 f000 	lsl.w	r0, r3, r0
 80054f8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80054fa:	4318      	orrs	r0, r3
 80054fc:	9041      	str	r0, [sp, #260]	; 0x104
 80054fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005502:	2b78      	cmp	r3, #120	; 0x78
 8005504:	d806      	bhi.n	8005514 <__ssvfiscanf_r+0xd4>
 8005506:	2b57      	cmp	r3, #87	; 0x57
 8005508:	d810      	bhi.n	800552c <__ssvfiscanf_r+0xec>
 800550a:	2b25      	cmp	r3, #37	; 0x25
 800550c:	d05d      	beq.n	80055ca <__ssvfiscanf_r+0x18a>
 800550e:	d857      	bhi.n	80055c0 <__ssvfiscanf_r+0x180>
 8005510:	2b00      	cmp	r3, #0
 8005512:	d075      	beq.n	8005600 <__ssvfiscanf_r+0x1c0>
 8005514:	2303      	movs	r3, #3
 8005516:	9347      	str	r3, [sp, #284]	; 0x11c
 8005518:	230a      	movs	r3, #10
 800551a:	9342      	str	r3, [sp, #264]	; 0x108
 800551c:	e082      	b.n	8005624 <__ssvfiscanf_r+0x1e4>
 800551e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005520:	465d      	mov	r5, fp
 8005522:	fb02 1303 	mla	r3, r2, r3, r1
 8005526:	3b30      	subs	r3, #48	; 0x30
 8005528:	9343      	str	r3, [sp, #268]	; 0x10c
 800552a:	e7d3      	b.n	80054d4 <__ssvfiscanf_r+0x94>
 800552c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005530:	2a20      	cmp	r2, #32
 8005532:	d8ef      	bhi.n	8005514 <__ssvfiscanf_r+0xd4>
 8005534:	a101      	add	r1, pc, #4	; (adr r1, 800553c <__ssvfiscanf_r+0xfc>)
 8005536:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800553a:	bf00      	nop
 800553c:	0800560f 	.word	0x0800560f
 8005540:	08005515 	.word	0x08005515
 8005544:	08005515 	.word	0x08005515
 8005548:	0800566d 	.word	0x0800566d
 800554c:	08005515 	.word	0x08005515
 8005550:	08005515 	.word	0x08005515
 8005554:	08005515 	.word	0x08005515
 8005558:	08005515 	.word	0x08005515
 800555c:	08005515 	.word	0x08005515
 8005560:	08005515 	.word	0x08005515
 8005564:	08005515 	.word	0x08005515
 8005568:	08005683 	.word	0x08005683
 800556c:	08005659 	.word	0x08005659
 8005570:	080055c7 	.word	0x080055c7
 8005574:	080055c7 	.word	0x080055c7
 8005578:	080055c7 	.word	0x080055c7
 800557c:	08005515 	.word	0x08005515
 8005580:	0800565d 	.word	0x0800565d
 8005584:	08005515 	.word	0x08005515
 8005588:	08005515 	.word	0x08005515
 800558c:	08005515 	.word	0x08005515
 8005590:	08005515 	.word	0x08005515
 8005594:	08005693 	.word	0x08005693
 8005598:	08005665 	.word	0x08005665
 800559c:	08005607 	.word	0x08005607
 80055a0:	08005515 	.word	0x08005515
 80055a4:	08005515 	.word	0x08005515
 80055a8:	0800568f 	.word	0x0800568f
 80055ac:	08005515 	.word	0x08005515
 80055b0:	08005659 	.word	0x08005659
 80055b4:	08005515 	.word	0x08005515
 80055b8:	08005515 	.word	0x08005515
 80055bc:	0800560f 	.word	0x0800560f
 80055c0:	3b45      	subs	r3, #69	; 0x45
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d8a6      	bhi.n	8005514 <__ssvfiscanf_r+0xd4>
 80055c6:	2305      	movs	r3, #5
 80055c8:	e02b      	b.n	8005622 <__ssvfiscanf_r+0x1e2>
 80055ca:	6863      	ldr	r3, [r4, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	dd0d      	ble.n	80055ec <__ssvfiscanf_r+0x1ac>
 80055d0:	6823      	ldr	r3, [r4, #0]
 80055d2:	781a      	ldrb	r2, [r3, #0]
 80055d4:	4552      	cmp	r2, sl
 80055d6:	f040 80a1 	bne.w	800571c <__ssvfiscanf_r+0x2dc>
 80055da:	3301      	adds	r3, #1
 80055dc:	6862      	ldr	r2, [r4, #4]
 80055de:	6023      	str	r3, [r4, #0]
 80055e0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80055e2:	3a01      	subs	r2, #1
 80055e4:	3301      	adds	r3, #1
 80055e6:	6062      	str	r2, [r4, #4]
 80055e8:	9345      	str	r3, [sp, #276]	; 0x114
 80055ea:	e752      	b.n	8005492 <__ssvfiscanf_r+0x52>
 80055ec:	4621      	mov	r1, r4
 80055ee:	4630      	mov	r0, r6
 80055f0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80055f2:	4798      	blx	r3
 80055f4:	2800      	cmp	r0, #0
 80055f6:	d0eb      	beq.n	80055d0 <__ssvfiscanf_r+0x190>
 80055f8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80055fa:	2800      	cmp	r0, #0
 80055fc:	f040 8084 	bne.w	8005708 <__ssvfiscanf_r+0x2c8>
 8005600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005604:	e086      	b.n	8005714 <__ssvfiscanf_r+0x2d4>
 8005606:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005608:	f042 0220 	orr.w	r2, r2, #32
 800560c:	9241      	str	r2, [sp, #260]	; 0x104
 800560e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005610:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005614:	9241      	str	r2, [sp, #260]	; 0x104
 8005616:	2210      	movs	r2, #16
 8005618:	2b6f      	cmp	r3, #111	; 0x6f
 800561a:	bf34      	ite	cc
 800561c:	2303      	movcc	r3, #3
 800561e:	2304      	movcs	r3, #4
 8005620:	9242      	str	r2, [sp, #264]	; 0x108
 8005622:	9347      	str	r3, [sp, #284]	; 0x11c
 8005624:	6863      	ldr	r3, [r4, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	dd41      	ble.n	80056ae <__ssvfiscanf_r+0x26e>
 800562a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800562c:	0659      	lsls	r1, r3, #25
 800562e:	d404      	bmi.n	800563a <__ssvfiscanf_r+0x1fa>
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	781a      	ldrb	r2, [r3, #0]
 8005634:	5cba      	ldrb	r2, [r7, r2]
 8005636:	0712      	lsls	r2, r2, #28
 8005638:	d440      	bmi.n	80056bc <__ssvfiscanf_r+0x27c>
 800563a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800563c:	2b02      	cmp	r3, #2
 800563e:	dc4f      	bgt.n	80056e0 <__ssvfiscanf_r+0x2a0>
 8005640:	466b      	mov	r3, sp
 8005642:	4622      	mov	r2, r4
 8005644:	4630      	mov	r0, r6
 8005646:	a941      	add	r1, sp, #260	; 0x104
 8005648:	f000 fb62 	bl	8005d10 <_scanf_chars>
 800564c:	2801      	cmp	r0, #1
 800564e:	d065      	beq.n	800571c <__ssvfiscanf_r+0x2dc>
 8005650:	2802      	cmp	r0, #2
 8005652:	f47f af1e 	bne.w	8005492 <__ssvfiscanf_r+0x52>
 8005656:	e7cf      	b.n	80055f8 <__ssvfiscanf_r+0x1b8>
 8005658:	220a      	movs	r2, #10
 800565a:	e7dd      	b.n	8005618 <__ssvfiscanf_r+0x1d8>
 800565c:	2300      	movs	r3, #0
 800565e:	9342      	str	r3, [sp, #264]	; 0x108
 8005660:	2303      	movs	r3, #3
 8005662:	e7de      	b.n	8005622 <__ssvfiscanf_r+0x1e2>
 8005664:	2308      	movs	r3, #8
 8005666:	9342      	str	r3, [sp, #264]	; 0x108
 8005668:	2304      	movs	r3, #4
 800566a:	e7da      	b.n	8005622 <__ssvfiscanf_r+0x1e2>
 800566c:	4629      	mov	r1, r5
 800566e:	4640      	mov	r0, r8
 8005670:	f000 fcaa 	bl	8005fc8 <__sccl>
 8005674:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005676:	4605      	mov	r5, r0
 8005678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800567c:	9341      	str	r3, [sp, #260]	; 0x104
 800567e:	2301      	movs	r3, #1
 8005680:	e7cf      	b.n	8005622 <__ssvfiscanf_r+0x1e2>
 8005682:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005688:	9341      	str	r3, [sp, #260]	; 0x104
 800568a:	2300      	movs	r3, #0
 800568c:	e7c9      	b.n	8005622 <__ssvfiscanf_r+0x1e2>
 800568e:	2302      	movs	r3, #2
 8005690:	e7c7      	b.n	8005622 <__ssvfiscanf_r+0x1e2>
 8005692:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005694:	06c3      	lsls	r3, r0, #27
 8005696:	f53f aefc 	bmi.w	8005492 <__ssvfiscanf_r+0x52>
 800569a:	9b00      	ldr	r3, [sp, #0]
 800569c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800569e:	1d19      	adds	r1, r3, #4
 80056a0:	9100      	str	r1, [sp, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	07c0      	lsls	r0, r0, #31
 80056a6:	bf4c      	ite	mi
 80056a8:	801a      	strhmi	r2, [r3, #0]
 80056aa:	601a      	strpl	r2, [r3, #0]
 80056ac:	e6f1      	b.n	8005492 <__ssvfiscanf_r+0x52>
 80056ae:	4621      	mov	r1, r4
 80056b0:	4630      	mov	r0, r6
 80056b2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80056b4:	4798      	blx	r3
 80056b6:	2800      	cmp	r0, #0
 80056b8:	d0b7      	beq.n	800562a <__ssvfiscanf_r+0x1ea>
 80056ba:	e79d      	b.n	80055f8 <__ssvfiscanf_r+0x1b8>
 80056bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80056be:	3201      	adds	r2, #1
 80056c0:	9245      	str	r2, [sp, #276]	; 0x114
 80056c2:	6862      	ldr	r2, [r4, #4]
 80056c4:	3a01      	subs	r2, #1
 80056c6:	2a00      	cmp	r2, #0
 80056c8:	6062      	str	r2, [r4, #4]
 80056ca:	dd02      	ble.n	80056d2 <__ssvfiscanf_r+0x292>
 80056cc:	3301      	adds	r3, #1
 80056ce:	6023      	str	r3, [r4, #0]
 80056d0:	e7ae      	b.n	8005630 <__ssvfiscanf_r+0x1f0>
 80056d2:	4621      	mov	r1, r4
 80056d4:	4630      	mov	r0, r6
 80056d6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80056d8:	4798      	blx	r3
 80056da:	2800      	cmp	r0, #0
 80056dc:	d0a8      	beq.n	8005630 <__ssvfiscanf_r+0x1f0>
 80056de:	e78b      	b.n	80055f8 <__ssvfiscanf_r+0x1b8>
 80056e0:	2b04      	cmp	r3, #4
 80056e2:	dc06      	bgt.n	80056f2 <__ssvfiscanf_r+0x2b2>
 80056e4:	466b      	mov	r3, sp
 80056e6:	4622      	mov	r2, r4
 80056e8:	4630      	mov	r0, r6
 80056ea:	a941      	add	r1, sp, #260	; 0x104
 80056ec:	f000 fb68 	bl	8005dc0 <_scanf_i>
 80056f0:	e7ac      	b.n	800564c <__ssvfiscanf_r+0x20c>
 80056f2:	4b0f      	ldr	r3, [pc, #60]	; (8005730 <__ssvfiscanf_r+0x2f0>)
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f43f aecc 	beq.w	8005492 <__ssvfiscanf_r+0x52>
 80056fa:	466b      	mov	r3, sp
 80056fc:	4622      	mov	r2, r4
 80056fe:	4630      	mov	r0, r6
 8005700:	a941      	add	r1, sp, #260	; 0x104
 8005702:	f3af 8000 	nop.w
 8005706:	e7a1      	b.n	800564c <__ssvfiscanf_r+0x20c>
 8005708:	89a3      	ldrh	r3, [r4, #12]
 800570a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800570e:	bf18      	it	ne
 8005710:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8005714:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8005718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800571c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800571e:	e7f9      	b.n	8005714 <__ssvfiscanf_r+0x2d4>
 8005720:	0800538d 	.word	0x0800538d
 8005724:	08005407 	.word	0x08005407
 8005728:	08007995 	.word	0x08007995
 800572c:	08007a9b 	.word	0x08007a9b
 8005730:	00000000 	.word	0x00000000

08005734 <__sfputc_r>:
 8005734:	6893      	ldr	r3, [r2, #8]
 8005736:	b410      	push	{r4}
 8005738:	3b01      	subs	r3, #1
 800573a:	2b00      	cmp	r3, #0
 800573c:	6093      	str	r3, [r2, #8]
 800573e:	da07      	bge.n	8005750 <__sfputc_r+0x1c>
 8005740:	6994      	ldr	r4, [r2, #24]
 8005742:	42a3      	cmp	r3, r4
 8005744:	db01      	blt.n	800574a <__sfputc_r+0x16>
 8005746:	290a      	cmp	r1, #10
 8005748:	d102      	bne.n	8005750 <__sfputc_r+0x1c>
 800574a:	bc10      	pop	{r4}
 800574c:	f000 bd2c 	b.w	80061a8 <__swbuf_r>
 8005750:	6813      	ldr	r3, [r2, #0]
 8005752:	1c58      	adds	r0, r3, #1
 8005754:	6010      	str	r0, [r2, #0]
 8005756:	7019      	strb	r1, [r3, #0]
 8005758:	4608      	mov	r0, r1
 800575a:	bc10      	pop	{r4}
 800575c:	4770      	bx	lr

0800575e <__sfputs_r>:
 800575e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005760:	4606      	mov	r6, r0
 8005762:	460f      	mov	r7, r1
 8005764:	4614      	mov	r4, r2
 8005766:	18d5      	adds	r5, r2, r3
 8005768:	42ac      	cmp	r4, r5
 800576a:	d101      	bne.n	8005770 <__sfputs_r+0x12>
 800576c:	2000      	movs	r0, #0
 800576e:	e007      	b.n	8005780 <__sfputs_r+0x22>
 8005770:	463a      	mov	r2, r7
 8005772:	4630      	mov	r0, r6
 8005774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005778:	f7ff ffdc 	bl	8005734 <__sfputc_r>
 800577c:	1c43      	adds	r3, r0, #1
 800577e:	d1f3      	bne.n	8005768 <__sfputs_r+0xa>
 8005780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005784 <_vfiprintf_r>:
 8005784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005788:	460d      	mov	r5, r1
 800578a:	4614      	mov	r4, r2
 800578c:	4698      	mov	r8, r3
 800578e:	4606      	mov	r6, r0
 8005790:	b09d      	sub	sp, #116	; 0x74
 8005792:	b118      	cbz	r0, 800579c <_vfiprintf_r+0x18>
 8005794:	6983      	ldr	r3, [r0, #24]
 8005796:	b90b      	cbnz	r3, 800579c <_vfiprintf_r+0x18>
 8005798:	f000 fee8 	bl	800656c <__sinit>
 800579c:	4b89      	ldr	r3, [pc, #548]	; (80059c4 <_vfiprintf_r+0x240>)
 800579e:	429d      	cmp	r5, r3
 80057a0:	d11b      	bne.n	80057da <_vfiprintf_r+0x56>
 80057a2:	6875      	ldr	r5, [r6, #4]
 80057a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057a6:	07d9      	lsls	r1, r3, #31
 80057a8:	d405      	bmi.n	80057b6 <_vfiprintf_r+0x32>
 80057aa:	89ab      	ldrh	r3, [r5, #12]
 80057ac:	059a      	lsls	r2, r3, #22
 80057ae:	d402      	bmi.n	80057b6 <_vfiprintf_r+0x32>
 80057b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057b2:	f000 ff79 	bl	80066a8 <__retarget_lock_acquire_recursive>
 80057b6:	89ab      	ldrh	r3, [r5, #12]
 80057b8:	071b      	lsls	r3, r3, #28
 80057ba:	d501      	bpl.n	80057c0 <_vfiprintf_r+0x3c>
 80057bc:	692b      	ldr	r3, [r5, #16]
 80057be:	b9eb      	cbnz	r3, 80057fc <_vfiprintf_r+0x78>
 80057c0:	4629      	mov	r1, r5
 80057c2:	4630      	mov	r0, r6
 80057c4:	f000 fd42 	bl	800624c <__swsetup_r>
 80057c8:	b1c0      	cbz	r0, 80057fc <_vfiprintf_r+0x78>
 80057ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057cc:	07dc      	lsls	r4, r3, #31
 80057ce:	d50e      	bpl.n	80057ee <_vfiprintf_r+0x6a>
 80057d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057d4:	b01d      	add	sp, #116	; 0x74
 80057d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057da:	4b7b      	ldr	r3, [pc, #492]	; (80059c8 <_vfiprintf_r+0x244>)
 80057dc:	429d      	cmp	r5, r3
 80057de:	d101      	bne.n	80057e4 <_vfiprintf_r+0x60>
 80057e0:	68b5      	ldr	r5, [r6, #8]
 80057e2:	e7df      	b.n	80057a4 <_vfiprintf_r+0x20>
 80057e4:	4b79      	ldr	r3, [pc, #484]	; (80059cc <_vfiprintf_r+0x248>)
 80057e6:	429d      	cmp	r5, r3
 80057e8:	bf08      	it	eq
 80057ea:	68f5      	ldreq	r5, [r6, #12]
 80057ec:	e7da      	b.n	80057a4 <_vfiprintf_r+0x20>
 80057ee:	89ab      	ldrh	r3, [r5, #12]
 80057f0:	0598      	lsls	r0, r3, #22
 80057f2:	d4ed      	bmi.n	80057d0 <_vfiprintf_r+0x4c>
 80057f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057f6:	f000 ff58 	bl	80066aa <__retarget_lock_release_recursive>
 80057fa:	e7e9      	b.n	80057d0 <_vfiprintf_r+0x4c>
 80057fc:	2300      	movs	r3, #0
 80057fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005800:	2320      	movs	r3, #32
 8005802:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005806:	2330      	movs	r3, #48	; 0x30
 8005808:	f04f 0901 	mov.w	r9, #1
 800580c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005810:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80059d0 <_vfiprintf_r+0x24c>
 8005814:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005818:	4623      	mov	r3, r4
 800581a:	469a      	mov	sl, r3
 800581c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005820:	b10a      	cbz	r2, 8005826 <_vfiprintf_r+0xa2>
 8005822:	2a25      	cmp	r2, #37	; 0x25
 8005824:	d1f9      	bne.n	800581a <_vfiprintf_r+0x96>
 8005826:	ebba 0b04 	subs.w	fp, sl, r4
 800582a:	d00b      	beq.n	8005844 <_vfiprintf_r+0xc0>
 800582c:	465b      	mov	r3, fp
 800582e:	4622      	mov	r2, r4
 8005830:	4629      	mov	r1, r5
 8005832:	4630      	mov	r0, r6
 8005834:	f7ff ff93 	bl	800575e <__sfputs_r>
 8005838:	3001      	adds	r0, #1
 800583a:	f000 80aa 	beq.w	8005992 <_vfiprintf_r+0x20e>
 800583e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005840:	445a      	add	r2, fp
 8005842:	9209      	str	r2, [sp, #36]	; 0x24
 8005844:	f89a 3000 	ldrb.w	r3, [sl]
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 80a2 	beq.w	8005992 <_vfiprintf_r+0x20e>
 800584e:	2300      	movs	r3, #0
 8005850:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005854:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005858:	f10a 0a01 	add.w	sl, sl, #1
 800585c:	9304      	str	r3, [sp, #16]
 800585e:	9307      	str	r3, [sp, #28]
 8005860:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005864:	931a      	str	r3, [sp, #104]	; 0x68
 8005866:	4654      	mov	r4, sl
 8005868:	2205      	movs	r2, #5
 800586a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800586e:	4858      	ldr	r0, [pc, #352]	; (80059d0 <_vfiprintf_r+0x24c>)
 8005870:	f000 ff80 	bl	8006774 <memchr>
 8005874:	9a04      	ldr	r2, [sp, #16]
 8005876:	b9d8      	cbnz	r0, 80058b0 <_vfiprintf_r+0x12c>
 8005878:	06d1      	lsls	r1, r2, #27
 800587a:	bf44      	itt	mi
 800587c:	2320      	movmi	r3, #32
 800587e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005882:	0713      	lsls	r3, r2, #28
 8005884:	bf44      	itt	mi
 8005886:	232b      	movmi	r3, #43	; 0x2b
 8005888:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800588c:	f89a 3000 	ldrb.w	r3, [sl]
 8005890:	2b2a      	cmp	r3, #42	; 0x2a
 8005892:	d015      	beq.n	80058c0 <_vfiprintf_r+0x13c>
 8005894:	4654      	mov	r4, sl
 8005896:	2000      	movs	r0, #0
 8005898:	f04f 0c0a 	mov.w	ip, #10
 800589c:	9a07      	ldr	r2, [sp, #28]
 800589e:	4621      	mov	r1, r4
 80058a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058a4:	3b30      	subs	r3, #48	; 0x30
 80058a6:	2b09      	cmp	r3, #9
 80058a8:	d94e      	bls.n	8005948 <_vfiprintf_r+0x1c4>
 80058aa:	b1b0      	cbz	r0, 80058da <_vfiprintf_r+0x156>
 80058ac:	9207      	str	r2, [sp, #28]
 80058ae:	e014      	b.n	80058da <_vfiprintf_r+0x156>
 80058b0:	eba0 0308 	sub.w	r3, r0, r8
 80058b4:	fa09 f303 	lsl.w	r3, r9, r3
 80058b8:	4313      	orrs	r3, r2
 80058ba:	46a2      	mov	sl, r4
 80058bc:	9304      	str	r3, [sp, #16]
 80058be:	e7d2      	b.n	8005866 <_vfiprintf_r+0xe2>
 80058c0:	9b03      	ldr	r3, [sp, #12]
 80058c2:	1d19      	adds	r1, r3, #4
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	9103      	str	r1, [sp, #12]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	bfbb      	ittet	lt
 80058cc:	425b      	neglt	r3, r3
 80058ce:	f042 0202 	orrlt.w	r2, r2, #2
 80058d2:	9307      	strge	r3, [sp, #28]
 80058d4:	9307      	strlt	r3, [sp, #28]
 80058d6:	bfb8      	it	lt
 80058d8:	9204      	strlt	r2, [sp, #16]
 80058da:	7823      	ldrb	r3, [r4, #0]
 80058dc:	2b2e      	cmp	r3, #46	; 0x2e
 80058de:	d10c      	bne.n	80058fa <_vfiprintf_r+0x176>
 80058e0:	7863      	ldrb	r3, [r4, #1]
 80058e2:	2b2a      	cmp	r3, #42	; 0x2a
 80058e4:	d135      	bne.n	8005952 <_vfiprintf_r+0x1ce>
 80058e6:	9b03      	ldr	r3, [sp, #12]
 80058e8:	3402      	adds	r4, #2
 80058ea:	1d1a      	adds	r2, r3, #4
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	9203      	str	r2, [sp, #12]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	bfb8      	it	lt
 80058f4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80058f8:	9305      	str	r3, [sp, #20]
 80058fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80059e0 <_vfiprintf_r+0x25c>
 80058fe:	2203      	movs	r2, #3
 8005900:	4650      	mov	r0, sl
 8005902:	7821      	ldrb	r1, [r4, #0]
 8005904:	f000 ff36 	bl	8006774 <memchr>
 8005908:	b140      	cbz	r0, 800591c <_vfiprintf_r+0x198>
 800590a:	2340      	movs	r3, #64	; 0x40
 800590c:	eba0 000a 	sub.w	r0, r0, sl
 8005910:	fa03 f000 	lsl.w	r0, r3, r0
 8005914:	9b04      	ldr	r3, [sp, #16]
 8005916:	3401      	adds	r4, #1
 8005918:	4303      	orrs	r3, r0
 800591a:	9304      	str	r3, [sp, #16]
 800591c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005920:	2206      	movs	r2, #6
 8005922:	482c      	ldr	r0, [pc, #176]	; (80059d4 <_vfiprintf_r+0x250>)
 8005924:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005928:	f000 ff24 	bl	8006774 <memchr>
 800592c:	2800      	cmp	r0, #0
 800592e:	d03f      	beq.n	80059b0 <_vfiprintf_r+0x22c>
 8005930:	4b29      	ldr	r3, [pc, #164]	; (80059d8 <_vfiprintf_r+0x254>)
 8005932:	bb1b      	cbnz	r3, 800597c <_vfiprintf_r+0x1f8>
 8005934:	9b03      	ldr	r3, [sp, #12]
 8005936:	3307      	adds	r3, #7
 8005938:	f023 0307 	bic.w	r3, r3, #7
 800593c:	3308      	adds	r3, #8
 800593e:	9303      	str	r3, [sp, #12]
 8005940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005942:	443b      	add	r3, r7
 8005944:	9309      	str	r3, [sp, #36]	; 0x24
 8005946:	e767      	b.n	8005818 <_vfiprintf_r+0x94>
 8005948:	460c      	mov	r4, r1
 800594a:	2001      	movs	r0, #1
 800594c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005950:	e7a5      	b.n	800589e <_vfiprintf_r+0x11a>
 8005952:	2300      	movs	r3, #0
 8005954:	f04f 0c0a 	mov.w	ip, #10
 8005958:	4619      	mov	r1, r3
 800595a:	3401      	adds	r4, #1
 800595c:	9305      	str	r3, [sp, #20]
 800595e:	4620      	mov	r0, r4
 8005960:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005964:	3a30      	subs	r2, #48	; 0x30
 8005966:	2a09      	cmp	r2, #9
 8005968:	d903      	bls.n	8005972 <_vfiprintf_r+0x1ee>
 800596a:	2b00      	cmp	r3, #0
 800596c:	d0c5      	beq.n	80058fa <_vfiprintf_r+0x176>
 800596e:	9105      	str	r1, [sp, #20]
 8005970:	e7c3      	b.n	80058fa <_vfiprintf_r+0x176>
 8005972:	4604      	mov	r4, r0
 8005974:	2301      	movs	r3, #1
 8005976:	fb0c 2101 	mla	r1, ip, r1, r2
 800597a:	e7f0      	b.n	800595e <_vfiprintf_r+0x1da>
 800597c:	ab03      	add	r3, sp, #12
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	462a      	mov	r2, r5
 8005982:	4630      	mov	r0, r6
 8005984:	4b15      	ldr	r3, [pc, #84]	; (80059dc <_vfiprintf_r+0x258>)
 8005986:	a904      	add	r1, sp, #16
 8005988:	f3af 8000 	nop.w
 800598c:	4607      	mov	r7, r0
 800598e:	1c78      	adds	r0, r7, #1
 8005990:	d1d6      	bne.n	8005940 <_vfiprintf_r+0x1bc>
 8005992:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005994:	07d9      	lsls	r1, r3, #31
 8005996:	d405      	bmi.n	80059a4 <_vfiprintf_r+0x220>
 8005998:	89ab      	ldrh	r3, [r5, #12]
 800599a:	059a      	lsls	r2, r3, #22
 800599c:	d402      	bmi.n	80059a4 <_vfiprintf_r+0x220>
 800599e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059a0:	f000 fe83 	bl	80066aa <__retarget_lock_release_recursive>
 80059a4:	89ab      	ldrh	r3, [r5, #12]
 80059a6:	065b      	lsls	r3, r3, #25
 80059a8:	f53f af12 	bmi.w	80057d0 <_vfiprintf_r+0x4c>
 80059ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059ae:	e711      	b.n	80057d4 <_vfiprintf_r+0x50>
 80059b0:	ab03      	add	r3, sp, #12
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	462a      	mov	r2, r5
 80059b6:	4630      	mov	r0, r6
 80059b8:	4b08      	ldr	r3, [pc, #32]	; (80059dc <_vfiprintf_r+0x258>)
 80059ba:	a904      	add	r1, sp, #16
 80059bc:	f000 f882 	bl	8005ac4 <_printf_i>
 80059c0:	e7e4      	b.n	800598c <_vfiprintf_r+0x208>
 80059c2:	bf00      	nop
 80059c4:	08007b04 	.word	0x08007b04
 80059c8:	08007b24 	.word	0x08007b24
 80059cc:	08007ae4 	.word	0x08007ae4
 80059d0:	08007a95 	.word	0x08007a95
 80059d4:	08007a9f 	.word	0x08007a9f
 80059d8:	00000000 	.word	0x00000000
 80059dc:	0800575f 	.word	0x0800575f
 80059e0:	08007a9b 	.word	0x08007a9b

080059e4 <_printf_common>:
 80059e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059e8:	4616      	mov	r6, r2
 80059ea:	4699      	mov	r9, r3
 80059ec:	688a      	ldr	r2, [r1, #8]
 80059ee:	690b      	ldr	r3, [r1, #16]
 80059f0:	4607      	mov	r7, r0
 80059f2:	4293      	cmp	r3, r2
 80059f4:	bfb8      	it	lt
 80059f6:	4613      	movlt	r3, r2
 80059f8:	6033      	str	r3, [r6, #0]
 80059fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059fe:	460c      	mov	r4, r1
 8005a00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a04:	b10a      	cbz	r2, 8005a0a <_printf_common+0x26>
 8005a06:	3301      	adds	r3, #1
 8005a08:	6033      	str	r3, [r6, #0]
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	0699      	lsls	r1, r3, #26
 8005a0e:	bf42      	ittt	mi
 8005a10:	6833      	ldrmi	r3, [r6, #0]
 8005a12:	3302      	addmi	r3, #2
 8005a14:	6033      	strmi	r3, [r6, #0]
 8005a16:	6825      	ldr	r5, [r4, #0]
 8005a18:	f015 0506 	ands.w	r5, r5, #6
 8005a1c:	d106      	bne.n	8005a2c <_printf_common+0x48>
 8005a1e:	f104 0a19 	add.w	sl, r4, #25
 8005a22:	68e3      	ldr	r3, [r4, #12]
 8005a24:	6832      	ldr	r2, [r6, #0]
 8005a26:	1a9b      	subs	r3, r3, r2
 8005a28:	42ab      	cmp	r3, r5
 8005a2a:	dc28      	bgt.n	8005a7e <_printf_common+0x9a>
 8005a2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a30:	1e13      	subs	r3, r2, #0
 8005a32:	6822      	ldr	r2, [r4, #0]
 8005a34:	bf18      	it	ne
 8005a36:	2301      	movne	r3, #1
 8005a38:	0692      	lsls	r2, r2, #26
 8005a3a:	d42d      	bmi.n	8005a98 <_printf_common+0xb4>
 8005a3c:	4649      	mov	r1, r9
 8005a3e:	4638      	mov	r0, r7
 8005a40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a44:	47c0      	blx	r8
 8005a46:	3001      	adds	r0, #1
 8005a48:	d020      	beq.n	8005a8c <_printf_common+0xa8>
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	68e5      	ldr	r5, [r4, #12]
 8005a4e:	f003 0306 	and.w	r3, r3, #6
 8005a52:	2b04      	cmp	r3, #4
 8005a54:	bf18      	it	ne
 8005a56:	2500      	movne	r5, #0
 8005a58:	6832      	ldr	r2, [r6, #0]
 8005a5a:	f04f 0600 	mov.w	r6, #0
 8005a5e:	68a3      	ldr	r3, [r4, #8]
 8005a60:	bf08      	it	eq
 8005a62:	1aad      	subeq	r5, r5, r2
 8005a64:	6922      	ldr	r2, [r4, #16]
 8005a66:	bf08      	it	eq
 8005a68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	bfc4      	itt	gt
 8005a70:	1a9b      	subgt	r3, r3, r2
 8005a72:	18ed      	addgt	r5, r5, r3
 8005a74:	341a      	adds	r4, #26
 8005a76:	42b5      	cmp	r5, r6
 8005a78:	d11a      	bne.n	8005ab0 <_printf_common+0xcc>
 8005a7a:	2000      	movs	r0, #0
 8005a7c:	e008      	b.n	8005a90 <_printf_common+0xac>
 8005a7e:	2301      	movs	r3, #1
 8005a80:	4652      	mov	r2, sl
 8005a82:	4649      	mov	r1, r9
 8005a84:	4638      	mov	r0, r7
 8005a86:	47c0      	blx	r8
 8005a88:	3001      	adds	r0, #1
 8005a8a:	d103      	bne.n	8005a94 <_printf_common+0xb0>
 8005a8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a94:	3501      	adds	r5, #1
 8005a96:	e7c4      	b.n	8005a22 <_printf_common+0x3e>
 8005a98:	2030      	movs	r0, #48	; 0x30
 8005a9a:	18e1      	adds	r1, r4, r3
 8005a9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005aa0:	1c5a      	adds	r2, r3, #1
 8005aa2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005aa6:	4422      	add	r2, r4
 8005aa8:	3302      	adds	r3, #2
 8005aaa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005aae:	e7c5      	b.n	8005a3c <_printf_common+0x58>
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	4622      	mov	r2, r4
 8005ab4:	4649      	mov	r1, r9
 8005ab6:	4638      	mov	r0, r7
 8005ab8:	47c0      	blx	r8
 8005aba:	3001      	adds	r0, #1
 8005abc:	d0e6      	beq.n	8005a8c <_printf_common+0xa8>
 8005abe:	3601      	adds	r6, #1
 8005ac0:	e7d9      	b.n	8005a76 <_printf_common+0x92>
	...

08005ac4 <_printf_i>:
 8005ac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ac8:	460c      	mov	r4, r1
 8005aca:	7e27      	ldrb	r7, [r4, #24]
 8005acc:	4691      	mov	r9, r2
 8005ace:	2f78      	cmp	r7, #120	; 0x78
 8005ad0:	4680      	mov	r8, r0
 8005ad2:	469a      	mov	sl, r3
 8005ad4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005ad6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ada:	d807      	bhi.n	8005aec <_printf_i+0x28>
 8005adc:	2f62      	cmp	r7, #98	; 0x62
 8005ade:	d80a      	bhi.n	8005af6 <_printf_i+0x32>
 8005ae0:	2f00      	cmp	r7, #0
 8005ae2:	f000 80d9 	beq.w	8005c98 <_printf_i+0x1d4>
 8005ae6:	2f58      	cmp	r7, #88	; 0x58
 8005ae8:	f000 80a4 	beq.w	8005c34 <_printf_i+0x170>
 8005aec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005af0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005af4:	e03a      	b.n	8005b6c <_printf_i+0xa8>
 8005af6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005afa:	2b15      	cmp	r3, #21
 8005afc:	d8f6      	bhi.n	8005aec <_printf_i+0x28>
 8005afe:	a001      	add	r0, pc, #4	; (adr r0, 8005b04 <_printf_i+0x40>)
 8005b00:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005b04:	08005b5d 	.word	0x08005b5d
 8005b08:	08005b71 	.word	0x08005b71
 8005b0c:	08005aed 	.word	0x08005aed
 8005b10:	08005aed 	.word	0x08005aed
 8005b14:	08005aed 	.word	0x08005aed
 8005b18:	08005aed 	.word	0x08005aed
 8005b1c:	08005b71 	.word	0x08005b71
 8005b20:	08005aed 	.word	0x08005aed
 8005b24:	08005aed 	.word	0x08005aed
 8005b28:	08005aed 	.word	0x08005aed
 8005b2c:	08005aed 	.word	0x08005aed
 8005b30:	08005c7f 	.word	0x08005c7f
 8005b34:	08005ba1 	.word	0x08005ba1
 8005b38:	08005c61 	.word	0x08005c61
 8005b3c:	08005aed 	.word	0x08005aed
 8005b40:	08005aed 	.word	0x08005aed
 8005b44:	08005ca1 	.word	0x08005ca1
 8005b48:	08005aed 	.word	0x08005aed
 8005b4c:	08005ba1 	.word	0x08005ba1
 8005b50:	08005aed 	.word	0x08005aed
 8005b54:	08005aed 	.word	0x08005aed
 8005b58:	08005c69 	.word	0x08005c69
 8005b5c:	680b      	ldr	r3, [r1, #0]
 8005b5e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b62:	1d1a      	adds	r2, r3, #4
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	600a      	str	r2, [r1, #0]
 8005b68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e0a4      	b.n	8005cba <_printf_i+0x1f6>
 8005b70:	6825      	ldr	r5, [r4, #0]
 8005b72:	6808      	ldr	r0, [r1, #0]
 8005b74:	062e      	lsls	r6, r5, #24
 8005b76:	f100 0304 	add.w	r3, r0, #4
 8005b7a:	d50a      	bpl.n	8005b92 <_printf_i+0xce>
 8005b7c:	6805      	ldr	r5, [r0, #0]
 8005b7e:	600b      	str	r3, [r1, #0]
 8005b80:	2d00      	cmp	r5, #0
 8005b82:	da03      	bge.n	8005b8c <_printf_i+0xc8>
 8005b84:	232d      	movs	r3, #45	; 0x2d
 8005b86:	426d      	negs	r5, r5
 8005b88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b8c:	230a      	movs	r3, #10
 8005b8e:	485e      	ldr	r0, [pc, #376]	; (8005d08 <_printf_i+0x244>)
 8005b90:	e019      	b.n	8005bc6 <_printf_i+0x102>
 8005b92:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005b96:	6805      	ldr	r5, [r0, #0]
 8005b98:	600b      	str	r3, [r1, #0]
 8005b9a:	bf18      	it	ne
 8005b9c:	b22d      	sxthne	r5, r5
 8005b9e:	e7ef      	b.n	8005b80 <_printf_i+0xbc>
 8005ba0:	680b      	ldr	r3, [r1, #0]
 8005ba2:	6825      	ldr	r5, [r4, #0]
 8005ba4:	1d18      	adds	r0, r3, #4
 8005ba6:	6008      	str	r0, [r1, #0]
 8005ba8:	0628      	lsls	r0, r5, #24
 8005baa:	d501      	bpl.n	8005bb0 <_printf_i+0xec>
 8005bac:	681d      	ldr	r5, [r3, #0]
 8005bae:	e002      	b.n	8005bb6 <_printf_i+0xf2>
 8005bb0:	0669      	lsls	r1, r5, #25
 8005bb2:	d5fb      	bpl.n	8005bac <_printf_i+0xe8>
 8005bb4:	881d      	ldrh	r5, [r3, #0]
 8005bb6:	2f6f      	cmp	r7, #111	; 0x6f
 8005bb8:	bf0c      	ite	eq
 8005bba:	2308      	moveq	r3, #8
 8005bbc:	230a      	movne	r3, #10
 8005bbe:	4852      	ldr	r0, [pc, #328]	; (8005d08 <_printf_i+0x244>)
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bc6:	6866      	ldr	r6, [r4, #4]
 8005bc8:	2e00      	cmp	r6, #0
 8005bca:	bfa8      	it	ge
 8005bcc:	6821      	ldrge	r1, [r4, #0]
 8005bce:	60a6      	str	r6, [r4, #8]
 8005bd0:	bfa4      	itt	ge
 8005bd2:	f021 0104 	bicge.w	r1, r1, #4
 8005bd6:	6021      	strge	r1, [r4, #0]
 8005bd8:	b90d      	cbnz	r5, 8005bde <_printf_i+0x11a>
 8005bda:	2e00      	cmp	r6, #0
 8005bdc:	d04d      	beq.n	8005c7a <_printf_i+0x1b6>
 8005bde:	4616      	mov	r6, r2
 8005be0:	fbb5 f1f3 	udiv	r1, r5, r3
 8005be4:	fb03 5711 	mls	r7, r3, r1, r5
 8005be8:	5dc7      	ldrb	r7, [r0, r7]
 8005bea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005bee:	462f      	mov	r7, r5
 8005bf0:	42bb      	cmp	r3, r7
 8005bf2:	460d      	mov	r5, r1
 8005bf4:	d9f4      	bls.n	8005be0 <_printf_i+0x11c>
 8005bf6:	2b08      	cmp	r3, #8
 8005bf8:	d10b      	bne.n	8005c12 <_printf_i+0x14e>
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	07df      	lsls	r7, r3, #31
 8005bfe:	d508      	bpl.n	8005c12 <_printf_i+0x14e>
 8005c00:	6923      	ldr	r3, [r4, #16]
 8005c02:	6861      	ldr	r1, [r4, #4]
 8005c04:	4299      	cmp	r1, r3
 8005c06:	bfde      	ittt	le
 8005c08:	2330      	movle	r3, #48	; 0x30
 8005c0a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c0e:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005c12:	1b92      	subs	r2, r2, r6
 8005c14:	6122      	str	r2, [r4, #16]
 8005c16:	464b      	mov	r3, r9
 8005c18:	4621      	mov	r1, r4
 8005c1a:	4640      	mov	r0, r8
 8005c1c:	f8cd a000 	str.w	sl, [sp]
 8005c20:	aa03      	add	r2, sp, #12
 8005c22:	f7ff fedf 	bl	80059e4 <_printf_common>
 8005c26:	3001      	adds	r0, #1
 8005c28:	d14c      	bne.n	8005cc4 <_printf_i+0x200>
 8005c2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c2e:	b004      	add	sp, #16
 8005c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c34:	4834      	ldr	r0, [pc, #208]	; (8005d08 <_printf_i+0x244>)
 8005c36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c3a:	680e      	ldr	r6, [r1, #0]
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005c42:	061f      	lsls	r7, r3, #24
 8005c44:	600e      	str	r6, [r1, #0]
 8005c46:	d514      	bpl.n	8005c72 <_printf_i+0x1ae>
 8005c48:	07d9      	lsls	r1, r3, #31
 8005c4a:	bf44      	itt	mi
 8005c4c:	f043 0320 	orrmi.w	r3, r3, #32
 8005c50:	6023      	strmi	r3, [r4, #0]
 8005c52:	b91d      	cbnz	r5, 8005c5c <_printf_i+0x198>
 8005c54:	6823      	ldr	r3, [r4, #0]
 8005c56:	f023 0320 	bic.w	r3, r3, #32
 8005c5a:	6023      	str	r3, [r4, #0]
 8005c5c:	2310      	movs	r3, #16
 8005c5e:	e7af      	b.n	8005bc0 <_printf_i+0xfc>
 8005c60:	6823      	ldr	r3, [r4, #0]
 8005c62:	f043 0320 	orr.w	r3, r3, #32
 8005c66:	6023      	str	r3, [r4, #0]
 8005c68:	2378      	movs	r3, #120	; 0x78
 8005c6a:	4828      	ldr	r0, [pc, #160]	; (8005d0c <_printf_i+0x248>)
 8005c6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c70:	e7e3      	b.n	8005c3a <_printf_i+0x176>
 8005c72:	065e      	lsls	r6, r3, #25
 8005c74:	bf48      	it	mi
 8005c76:	b2ad      	uxthmi	r5, r5
 8005c78:	e7e6      	b.n	8005c48 <_printf_i+0x184>
 8005c7a:	4616      	mov	r6, r2
 8005c7c:	e7bb      	b.n	8005bf6 <_printf_i+0x132>
 8005c7e:	680b      	ldr	r3, [r1, #0]
 8005c80:	6826      	ldr	r6, [r4, #0]
 8005c82:	1d1d      	adds	r5, r3, #4
 8005c84:	6960      	ldr	r0, [r4, #20]
 8005c86:	600d      	str	r5, [r1, #0]
 8005c88:	0635      	lsls	r5, r6, #24
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	d501      	bpl.n	8005c92 <_printf_i+0x1ce>
 8005c8e:	6018      	str	r0, [r3, #0]
 8005c90:	e002      	b.n	8005c98 <_printf_i+0x1d4>
 8005c92:	0671      	lsls	r1, r6, #25
 8005c94:	d5fb      	bpl.n	8005c8e <_printf_i+0x1ca>
 8005c96:	8018      	strh	r0, [r3, #0]
 8005c98:	2300      	movs	r3, #0
 8005c9a:	4616      	mov	r6, r2
 8005c9c:	6123      	str	r3, [r4, #16]
 8005c9e:	e7ba      	b.n	8005c16 <_printf_i+0x152>
 8005ca0:	680b      	ldr	r3, [r1, #0]
 8005ca2:	1d1a      	adds	r2, r3, #4
 8005ca4:	600a      	str	r2, [r1, #0]
 8005ca6:	681e      	ldr	r6, [r3, #0]
 8005ca8:	2100      	movs	r1, #0
 8005caa:	4630      	mov	r0, r6
 8005cac:	6862      	ldr	r2, [r4, #4]
 8005cae:	f000 fd61 	bl	8006774 <memchr>
 8005cb2:	b108      	cbz	r0, 8005cb8 <_printf_i+0x1f4>
 8005cb4:	1b80      	subs	r0, r0, r6
 8005cb6:	6060      	str	r0, [r4, #4]
 8005cb8:	6863      	ldr	r3, [r4, #4]
 8005cba:	6123      	str	r3, [r4, #16]
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cc2:	e7a8      	b.n	8005c16 <_printf_i+0x152>
 8005cc4:	4632      	mov	r2, r6
 8005cc6:	4649      	mov	r1, r9
 8005cc8:	4640      	mov	r0, r8
 8005cca:	6923      	ldr	r3, [r4, #16]
 8005ccc:	47d0      	blx	sl
 8005cce:	3001      	adds	r0, #1
 8005cd0:	d0ab      	beq.n	8005c2a <_printf_i+0x166>
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	079b      	lsls	r3, r3, #30
 8005cd6:	d413      	bmi.n	8005d00 <_printf_i+0x23c>
 8005cd8:	68e0      	ldr	r0, [r4, #12]
 8005cda:	9b03      	ldr	r3, [sp, #12]
 8005cdc:	4298      	cmp	r0, r3
 8005cde:	bfb8      	it	lt
 8005ce0:	4618      	movlt	r0, r3
 8005ce2:	e7a4      	b.n	8005c2e <_printf_i+0x16a>
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	4632      	mov	r2, r6
 8005ce8:	4649      	mov	r1, r9
 8005cea:	4640      	mov	r0, r8
 8005cec:	47d0      	blx	sl
 8005cee:	3001      	adds	r0, #1
 8005cf0:	d09b      	beq.n	8005c2a <_printf_i+0x166>
 8005cf2:	3501      	adds	r5, #1
 8005cf4:	68e3      	ldr	r3, [r4, #12]
 8005cf6:	9903      	ldr	r1, [sp, #12]
 8005cf8:	1a5b      	subs	r3, r3, r1
 8005cfa:	42ab      	cmp	r3, r5
 8005cfc:	dcf2      	bgt.n	8005ce4 <_printf_i+0x220>
 8005cfe:	e7eb      	b.n	8005cd8 <_printf_i+0x214>
 8005d00:	2500      	movs	r5, #0
 8005d02:	f104 0619 	add.w	r6, r4, #25
 8005d06:	e7f5      	b.n	8005cf4 <_printf_i+0x230>
 8005d08:	08007aa6 	.word	0x08007aa6
 8005d0c:	08007ab7 	.word	0x08007ab7

08005d10 <_scanf_chars>:
 8005d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d14:	4615      	mov	r5, r2
 8005d16:	688a      	ldr	r2, [r1, #8]
 8005d18:	4680      	mov	r8, r0
 8005d1a:	460c      	mov	r4, r1
 8005d1c:	b932      	cbnz	r2, 8005d2c <_scanf_chars+0x1c>
 8005d1e:	698a      	ldr	r2, [r1, #24]
 8005d20:	2a00      	cmp	r2, #0
 8005d22:	bf0c      	ite	eq
 8005d24:	2201      	moveq	r2, #1
 8005d26:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8005d2a:	608a      	str	r2, [r1, #8]
 8005d2c:	2700      	movs	r7, #0
 8005d2e:	6822      	ldr	r2, [r4, #0]
 8005d30:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8005dbc <_scanf_chars+0xac>
 8005d34:	06d1      	lsls	r1, r2, #27
 8005d36:	bf5f      	itttt	pl
 8005d38:	681a      	ldrpl	r2, [r3, #0]
 8005d3a:	1d11      	addpl	r1, r2, #4
 8005d3c:	6019      	strpl	r1, [r3, #0]
 8005d3e:	6816      	ldrpl	r6, [r2, #0]
 8005d40:	69a0      	ldr	r0, [r4, #24]
 8005d42:	b188      	cbz	r0, 8005d68 <_scanf_chars+0x58>
 8005d44:	2801      	cmp	r0, #1
 8005d46:	d107      	bne.n	8005d58 <_scanf_chars+0x48>
 8005d48:	682b      	ldr	r3, [r5, #0]
 8005d4a:	781a      	ldrb	r2, [r3, #0]
 8005d4c:	6963      	ldr	r3, [r4, #20]
 8005d4e:	5c9b      	ldrb	r3, [r3, r2]
 8005d50:	b953      	cbnz	r3, 8005d68 <_scanf_chars+0x58>
 8005d52:	bb27      	cbnz	r7, 8005d9e <_scanf_chars+0x8e>
 8005d54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d58:	2802      	cmp	r0, #2
 8005d5a:	d120      	bne.n	8005d9e <_scanf_chars+0x8e>
 8005d5c:	682b      	ldr	r3, [r5, #0]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	f813 3009 	ldrb.w	r3, [r3, r9]
 8005d64:	071b      	lsls	r3, r3, #28
 8005d66:	d41a      	bmi.n	8005d9e <_scanf_chars+0x8e>
 8005d68:	6823      	ldr	r3, [r4, #0]
 8005d6a:	3701      	adds	r7, #1
 8005d6c:	06da      	lsls	r2, r3, #27
 8005d6e:	bf5e      	ittt	pl
 8005d70:	682b      	ldrpl	r3, [r5, #0]
 8005d72:	781b      	ldrbpl	r3, [r3, #0]
 8005d74:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005d78:	682a      	ldr	r2, [r5, #0]
 8005d7a:	686b      	ldr	r3, [r5, #4]
 8005d7c:	3201      	adds	r2, #1
 8005d7e:	602a      	str	r2, [r5, #0]
 8005d80:	68a2      	ldr	r2, [r4, #8]
 8005d82:	3b01      	subs	r3, #1
 8005d84:	3a01      	subs	r2, #1
 8005d86:	606b      	str	r3, [r5, #4]
 8005d88:	60a2      	str	r2, [r4, #8]
 8005d8a:	b142      	cbz	r2, 8005d9e <_scanf_chars+0x8e>
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	dcd7      	bgt.n	8005d40 <_scanf_chars+0x30>
 8005d90:	4629      	mov	r1, r5
 8005d92:	4640      	mov	r0, r8
 8005d94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005d98:	4798      	blx	r3
 8005d9a:	2800      	cmp	r0, #0
 8005d9c:	d0d0      	beq.n	8005d40 <_scanf_chars+0x30>
 8005d9e:	6823      	ldr	r3, [r4, #0]
 8005da0:	f013 0310 	ands.w	r3, r3, #16
 8005da4:	d105      	bne.n	8005db2 <_scanf_chars+0xa2>
 8005da6:	68e2      	ldr	r2, [r4, #12]
 8005da8:	3201      	adds	r2, #1
 8005daa:	60e2      	str	r2, [r4, #12]
 8005dac:	69a2      	ldr	r2, [r4, #24]
 8005dae:	b102      	cbz	r2, 8005db2 <_scanf_chars+0xa2>
 8005db0:	7033      	strb	r3, [r6, #0]
 8005db2:	6923      	ldr	r3, [r4, #16]
 8005db4:	2000      	movs	r0, #0
 8005db6:	441f      	add	r7, r3
 8005db8:	6127      	str	r7, [r4, #16]
 8005dba:	e7cb      	b.n	8005d54 <_scanf_chars+0x44>
 8005dbc:	08007995 	.word	0x08007995

08005dc0 <_scanf_i>:
 8005dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc4:	460c      	mov	r4, r1
 8005dc6:	4698      	mov	r8, r3
 8005dc8:	4b72      	ldr	r3, [pc, #456]	; (8005f94 <_scanf_i+0x1d4>)
 8005dca:	b087      	sub	sp, #28
 8005dcc:	4682      	mov	sl, r0
 8005dce:	4616      	mov	r6, r2
 8005dd0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005dd4:	ab03      	add	r3, sp, #12
 8005dd6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005dda:	4b6f      	ldr	r3, [pc, #444]	; (8005f98 <_scanf_i+0x1d8>)
 8005ddc:	69a1      	ldr	r1, [r4, #24]
 8005dde:	4a6f      	ldr	r2, [pc, #444]	; (8005f9c <_scanf_i+0x1dc>)
 8005de0:	4627      	mov	r7, r4
 8005de2:	2903      	cmp	r1, #3
 8005de4:	bf18      	it	ne
 8005de6:	461a      	movne	r2, r3
 8005de8:	68a3      	ldr	r3, [r4, #8]
 8005dea:	9201      	str	r2, [sp, #4]
 8005dec:	1e5a      	subs	r2, r3, #1
 8005dee:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005df2:	bf81      	itttt	hi
 8005df4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005df8:	eb03 0905 	addhi.w	r9, r3, r5
 8005dfc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005e00:	60a3      	strhi	r3, [r4, #8]
 8005e02:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005e06:	bf98      	it	ls
 8005e08:	f04f 0900 	movls.w	r9, #0
 8005e0c:	463d      	mov	r5, r7
 8005e0e:	f04f 0b00 	mov.w	fp, #0
 8005e12:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005e16:	6023      	str	r3, [r4, #0]
 8005e18:	6831      	ldr	r1, [r6, #0]
 8005e1a:	ab03      	add	r3, sp, #12
 8005e1c:	2202      	movs	r2, #2
 8005e1e:	7809      	ldrb	r1, [r1, #0]
 8005e20:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005e24:	f000 fca6 	bl	8006774 <memchr>
 8005e28:	b328      	cbz	r0, 8005e76 <_scanf_i+0xb6>
 8005e2a:	f1bb 0f01 	cmp.w	fp, #1
 8005e2e:	d159      	bne.n	8005ee4 <_scanf_i+0x124>
 8005e30:	6862      	ldr	r2, [r4, #4]
 8005e32:	b92a      	cbnz	r2, 8005e40 <_scanf_i+0x80>
 8005e34:	2308      	movs	r3, #8
 8005e36:	6822      	ldr	r2, [r4, #0]
 8005e38:	6063      	str	r3, [r4, #4]
 8005e3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e3e:	6022      	str	r2, [r4, #0]
 8005e40:	6822      	ldr	r2, [r4, #0]
 8005e42:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005e46:	6022      	str	r2, [r4, #0]
 8005e48:	68a2      	ldr	r2, [r4, #8]
 8005e4a:	1e51      	subs	r1, r2, #1
 8005e4c:	60a1      	str	r1, [r4, #8]
 8005e4e:	b192      	cbz	r2, 8005e76 <_scanf_i+0xb6>
 8005e50:	6832      	ldr	r2, [r6, #0]
 8005e52:	1c51      	adds	r1, r2, #1
 8005e54:	6031      	str	r1, [r6, #0]
 8005e56:	7812      	ldrb	r2, [r2, #0]
 8005e58:	f805 2b01 	strb.w	r2, [r5], #1
 8005e5c:	6872      	ldr	r2, [r6, #4]
 8005e5e:	3a01      	subs	r2, #1
 8005e60:	2a00      	cmp	r2, #0
 8005e62:	6072      	str	r2, [r6, #4]
 8005e64:	dc07      	bgt.n	8005e76 <_scanf_i+0xb6>
 8005e66:	4631      	mov	r1, r6
 8005e68:	4650      	mov	r0, sl
 8005e6a:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8005e6e:	4790      	blx	r2
 8005e70:	2800      	cmp	r0, #0
 8005e72:	f040 8085 	bne.w	8005f80 <_scanf_i+0x1c0>
 8005e76:	f10b 0b01 	add.w	fp, fp, #1
 8005e7a:	f1bb 0f03 	cmp.w	fp, #3
 8005e7e:	d1cb      	bne.n	8005e18 <_scanf_i+0x58>
 8005e80:	6863      	ldr	r3, [r4, #4]
 8005e82:	b90b      	cbnz	r3, 8005e88 <_scanf_i+0xc8>
 8005e84:	230a      	movs	r3, #10
 8005e86:	6063      	str	r3, [r4, #4]
 8005e88:	6863      	ldr	r3, [r4, #4]
 8005e8a:	4945      	ldr	r1, [pc, #276]	; (8005fa0 <_scanf_i+0x1e0>)
 8005e8c:	6960      	ldr	r0, [r4, #20]
 8005e8e:	1ac9      	subs	r1, r1, r3
 8005e90:	f000 f89a 	bl	8005fc8 <__sccl>
 8005e94:	f04f 0b00 	mov.w	fp, #0
 8005e98:	68a3      	ldr	r3, [r4, #8]
 8005e9a:	6822      	ldr	r2, [r4, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d03d      	beq.n	8005f1c <_scanf_i+0x15c>
 8005ea0:	6831      	ldr	r1, [r6, #0]
 8005ea2:	6960      	ldr	r0, [r4, #20]
 8005ea4:	f891 c000 	ldrb.w	ip, [r1]
 8005ea8:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005eac:	2800      	cmp	r0, #0
 8005eae:	d035      	beq.n	8005f1c <_scanf_i+0x15c>
 8005eb0:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005eb4:	d124      	bne.n	8005f00 <_scanf_i+0x140>
 8005eb6:	0510      	lsls	r0, r2, #20
 8005eb8:	d522      	bpl.n	8005f00 <_scanf_i+0x140>
 8005eba:	f10b 0b01 	add.w	fp, fp, #1
 8005ebe:	f1b9 0f00 	cmp.w	r9, #0
 8005ec2:	d003      	beq.n	8005ecc <_scanf_i+0x10c>
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005eca:	60a3      	str	r3, [r4, #8]
 8005ecc:	6873      	ldr	r3, [r6, #4]
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	6073      	str	r3, [r6, #4]
 8005ed4:	dd1b      	ble.n	8005f0e <_scanf_i+0x14e>
 8005ed6:	6833      	ldr	r3, [r6, #0]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	6033      	str	r3, [r6, #0]
 8005edc:	68a3      	ldr	r3, [r4, #8]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	60a3      	str	r3, [r4, #8]
 8005ee2:	e7d9      	b.n	8005e98 <_scanf_i+0xd8>
 8005ee4:	f1bb 0f02 	cmp.w	fp, #2
 8005ee8:	d1ae      	bne.n	8005e48 <_scanf_i+0x88>
 8005eea:	6822      	ldr	r2, [r4, #0]
 8005eec:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005ef0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005ef4:	d1bf      	bne.n	8005e76 <_scanf_i+0xb6>
 8005ef6:	2310      	movs	r3, #16
 8005ef8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005efc:	6063      	str	r3, [r4, #4]
 8005efe:	e7a2      	b.n	8005e46 <_scanf_i+0x86>
 8005f00:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005f04:	6022      	str	r2, [r4, #0]
 8005f06:	780b      	ldrb	r3, [r1, #0]
 8005f08:	f805 3b01 	strb.w	r3, [r5], #1
 8005f0c:	e7de      	b.n	8005ecc <_scanf_i+0x10c>
 8005f0e:	4631      	mov	r1, r6
 8005f10:	4650      	mov	r0, sl
 8005f12:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005f16:	4798      	blx	r3
 8005f18:	2800      	cmp	r0, #0
 8005f1a:	d0df      	beq.n	8005edc <_scanf_i+0x11c>
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	05d9      	lsls	r1, r3, #23
 8005f20:	d50d      	bpl.n	8005f3e <_scanf_i+0x17e>
 8005f22:	42bd      	cmp	r5, r7
 8005f24:	d909      	bls.n	8005f3a <_scanf_i+0x17a>
 8005f26:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005f2a:	4632      	mov	r2, r6
 8005f2c:	4650      	mov	r0, sl
 8005f2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f32:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8005f36:	4798      	blx	r3
 8005f38:	464d      	mov	r5, r9
 8005f3a:	42bd      	cmp	r5, r7
 8005f3c:	d028      	beq.n	8005f90 <_scanf_i+0x1d0>
 8005f3e:	6822      	ldr	r2, [r4, #0]
 8005f40:	f012 0210 	ands.w	r2, r2, #16
 8005f44:	d113      	bne.n	8005f6e <_scanf_i+0x1ae>
 8005f46:	702a      	strb	r2, [r5, #0]
 8005f48:	4639      	mov	r1, r7
 8005f4a:	6863      	ldr	r3, [r4, #4]
 8005f4c:	4650      	mov	r0, sl
 8005f4e:	9e01      	ldr	r6, [sp, #4]
 8005f50:	47b0      	blx	r6
 8005f52:	f8d8 3000 	ldr.w	r3, [r8]
 8005f56:	6821      	ldr	r1, [r4, #0]
 8005f58:	1d1a      	adds	r2, r3, #4
 8005f5a:	f8c8 2000 	str.w	r2, [r8]
 8005f5e:	f011 0f20 	tst.w	r1, #32
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	d00f      	beq.n	8005f86 <_scanf_i+0x1c6>
 8005f66:	6018      	str	r0, [r3, #0]
 8005f68:	68e3      	ldr	r3, [r4, #12]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	60e3      	str	r3, [r4, #12]
 8005f6e:	2000      	movs	r0, #0
 8005f70:	1bed      	subs	r5, r5, r7
 8005f72:	44ab      	add	fp, r5
 8005f74:	6925      	ldr	r5, [r4, #16]
 8005f76:	445d      	add	r5, fp
 8005f78:	6125      	str	r5, [r4, #16]
 8005f7a:	b007      	add	sp, #28
 8005f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f80:	f04f 0b00 	mov.w	fp, #0
 8005f84:	e7ca      	b.n	8005f1c <_scanf_i+0x15c>
 8005f86:	07ca      	lsls	r2, r1, #31
 8005f88:	bf4c      	ite	mi
 8005f8a:	8018      	strhmi	r0, [r3, #0]
 8005f8c:	6018      	strpl	r0, [r3, #0]
 8005f8e:	e7eb      	b.n	8005f68 <_scanf_i+0x1a8>
 8005f90:	2001      	movs	r0, #1
 8005f92:	e7f2      	b.n	8005f7a <_scanf_i+0x1ba>
 8005f94:	080078b8 	.word	0x080078b8
 8005f98:	08006135 	.word	0x08006135
 8005f9c:	08004ff1 	.word	0x08004ff1
 8005fa0:	08007ae1 	.word	0x08007ae1

08005fa4 <_read_r>:
 8005fa4:	b538      	push	{r3, r4, r5, lr}
 8005fa6:	4604      	mov	r4, r0
 8005fa8:	4608      	mov	r0, r1
 8005faa:	4611      	mov	r1, r2
 8005fac:	2200      	movs	r2, #0
 8005fae:	4d05      	ldr	r5, [pc, #20]	; (8005fc4 <_read_r+0x20>)
 8005fb0:	602a      	str	r2, [r5, #0]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	f7fb ff71 	bl	8001e9a <_read>
 8005fb8:	1c43      	adds	r3, r0, #1
 8005fba:	d102      	bne.n	8005fc2 <_read_r+0x1e>
 8005fbc:	682b      	ldr	r3, [r5, #0]
 8005fbe:	b103      	cbz	r3, 8005fc2 <_read_r+0x1e>
 8005fc0:	6023      	str	r3, [r4, #0]
 8005fc2:	bd38      	pop	{r3, r4, r5, pc}
 8005fc4:	20000aac 	.word	0x20000aac

08005fc8 <__sccl>:
 8005fc8:	b570      	push	{r4, r5, r6, lr}
 8005fca:	780b      	ldrb	r3, [r1, #0]
 8005fcc:	4604      	mov	r4, r0
 8005fce:	2b5e      	cmp	r3, #94	; 0x5e
 8005fd0:	bf13      	iteet	ne
 8005fd2:	2200      	movne	r2, #0
 8005fd4:	2201      	moveq	r2, #1
 8005fd6:	784b      	ldrbeq	r3, [r1, #1]
 8005fd8:	1c48      	addne	r0, r1, #1
 8005fda:	bf08      	it	eq
 8005fdc:	1c88      	addeq	r0, r1, #2
 8005fde:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8005fe2:	1e61      	subs	r1, r4, #1
 8005fe4:	f801 2f01 	strb.w	r2, [r1, #1]!
 8005fe8:	42a9      	cmp	r1, r5
 8005fea:	d1fb      	bne.n	8005fe4 <__sccl+0x1c>
 8005fec:	b90b      	cbnz	r3, 8005ff2 <__sccl+0x2a>
 8005fee:	3801      	subs	r0, #1
 8005ff0:	bd70      	pop	{r4, r5, r6, pc}
 8005ff2:	f082 0101 	eor.w	r1, r2, #1
 8005ff6:	54e1      	strb	r1, [r4, r3]
 8005ff8:	1c42      	adds	r2, r0, #1
 8005ffa:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8005ffe:	4610      	mov	r0, r2
 8006000:	2d2d      	cmp	r5, #45	; 0x2d
 8006002:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 8006006:	d006      	beq.n	8006016 <__sccl+0x4e>
 8006008:	2d5d      	cmp	r5, #93	; 0x5d
 800600a:	d0f1      	beq.n	8005ff0 <__sccl+0x28>
 800600c:	b90d      	cbnz	r5, 8006012 <__sccl+0x4a>
 800600e:	4630      	mov	r0, r6
 8006010:	e7ee      	b.n	8005ff0 <__sccl+0x28>
 8006012:	462b      	mov	r3, r5
 8006014:	e7ef      	b.n	8005ff6 <__sccl+0x2e>
 8006016:	7816      	ldrb	r6, [r2, #0]
 8006018:	2e5d      	cmp	r6, #93	; 0x5d
 800601a:	d0fa      	beq.n	8006012 <__sccl+0x4a>
 800601c:	42b3      	cmp	r3, r6
 800601e:	dcf8      	bgt.n	8006012 <__sccl+0x4a>
 8006020:	4618      	mov	r0, r3
 8006022:	3001      	adds	r0, #1
 8006024:	4286      	cmp	r6, r0
 8006026:	5421      	strb	r1, [r4, r0]
 8006028:	dcfb      	bgt.n	8006022 <__sccl+0x5a>
 800602a:	43d8      	mvns	r0, r3
 800602c:	4430      	add	r0, r6
 800602e:	42b3      	cmp	r3, r6
 8006030:	bfa8      	it	ge
 8006032:	2000      	movge	r0, #0
 8006034:	1c5d      	adds	r5, r3, #1
 8006036:	182b      	adds	r3, r5, r0
 8006038:	3202      	adds	r2, #2
 800603a:	e7de      	b.n	8005ffa <__sccl+0x32>

0800603c <_strtoul_l.isra.0>:
 800603c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006040:	468c      	mov	ip, r1
 8006042:	4686      	mov	lr, r0
 8006044:	4e3a      	ldr	r6, [pc, #232]	; (8006130 <_strtoul_l.isra.0+0xf4>)
 8006046:	4660      	mov	r0, ip
 8006048:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800604c:	5da5      	ldrb	r5, [r4, r6]
 800604e:	f015 0508 	ands.w	r5, r5, #8
 8006052:	d1f8      	bne.n	8006046 <_strtoul_l.isra.0+0xa>
 8006054:	2c2d      	cmp	r4, #45	; 0x2d
 8006056:	d134      	bne.n	80060c2 <_strtoul_l.isra.0+0x86>
 8006058:	f04f 0801 	mov.w	r8, #1
 800605c:	f89c 4000 	ldrb.w	r4, [ip]
 8006060:	f100 0c02 	add.w	ip, r0, #2
 8006064:	2b00      	cmp	r3, #0
 8006066:	d05e      	beq.n	8006126 <_strtoul_l.isra.0+0xea>
 8006068:	2b10      	cmp	r3, #16
 800606a:	d10c      	bne.n	8006086 <_strtoul_l.isra.0+0x4a>
 800606c:	2c30      	cmp	r4, #48	; 0x30
 800606e:	d10a      	bne.n	8006086 <_strtoul_l.isra.0+0x4a>
 8006070:	f89c 0000 	ldrb.w	r0, [ip]
 8006074:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006078:	2858      	cmp	r0, #88	; 0x58
 800607a:	d14f      	bne.n	800611c <_strtoul_l.isra.0+0xe0>
 800607c:	2310      	movs	r3, #16
 800607e:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8006082:	f10c 0c02 	add.w	ip, ip, #2
 8006086:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800608a:	fbb7 f7f3 	udiv	r7, r7, r3
 800608e:	2500      	movs	r5, #0
 8006090:	fb03 f907 	mul.w	r9, r3, r7
 8006094:	4628      	mov	r0, r5
 8006096:	ea6f 0909 	mvn.w	r9, r9
 800609a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800609e:	2e09      	cmp	r6, #9
 80060a0:	d818      	bhi.n	80060d4 <_strtoul_l.isra.0+0x98>
 80060a2:	4634      	mov	r4, r6
 80060a4:	42a3      	cmp	r3, r4
 80060a6:	dd24      	ble.n	80060f2 <_strtoul_l.isra.0+0xb6>
 80060a8:	2d00      	cmp	r5, #0
 80060aa:	db1f      	blt.n	80060ec <_strtoul_l.isra.0+0xb0>
 80060ac:	4287      	cmp	r7, r0
 80060ae:	d31d      	bcc.n	80060ec <_strtoul_l.isra.0+0xb0>
 80060b0:	d101      	bne.n	80060b6 <_strtoul_l.isra.0+0x7a>
 80060b2:	45a1      	cmp	r9, r4
 80060b4:	db1a      	blt.n	80060ec <_strtoul_l.isra.0+0xb0>
 80060b6:	2501      	movs	r5, #1
 80060b8:	fb00 4003 	mla	r0, r0, r3, r4
 80060bc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80060c0:	e7eb      	b.n	800609a <_strtoul_l.isra.0+0x5e>
 80060c2:	2c2b      	cmp	r4, #43	; 0x2b
 80060c4:	bf08      	it	eq
 80060c6:	f89c 4000 	ldrbeq.w	r4, [ip]
 80060ca:	46a8      	mov	r8, r5
 80060cc:	bf08      	it	eq
 80060ce:	f100 0c02 	addeq.w	ip, r0, #2
 80060d2:	e7c7      	b.n	8006064 <_strtoul_l.isra.0+0x28>
 80060d4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80060d8:	2e19      	cmp	r6, #25
 80060da:	d801      	bhi.n	80060e0 <_strtoul_l.isra.0+0xa4>
 80060dc:	3c37      	subs	r4, #55	; 0x37
 80060de:	e7e1      	b.n	80060a4 <_strtoul_l.isra.0+0x68>
 80060e0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80060e4:	2e19      	cmp	r6, #25
 80060e6:	d804      	bhi.n	80060f2 <_strtoul_l.isra.0+0xb6>
 80060e8:	3c57      	subs	r4, #87	; 0x57
 80060ea:	e7db      	b.n	80060a4 <_strtoul_l.isra.0+0x68>
 80060ec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80060f0:	e7e4      	b.n	80060bc <_strtoul_l.isra.0+0x80>
 80060f2:	2d00      	cmp	r5, #0
 80060f4:	da07      	bge.n	8006106 <_strtoul_l.isra.0+0xca>
 80060f6:	2322      	movs	r3, #34	; 0x22
 80060f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060fc:	f8ce 3000 	str.w	r3, [lr]
 8006100:	b942      	cbnz	r2, 8006114 <_strtoul_l.isra.0+0xd8>
 8006102:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006106:	f1b8 0f00 	cmp.w	r8, #0
 800610a:	d000      	beq.n	800610e <_strtoul_l.isra.0+0xd2>
 800610c:	4240      	negs	r0, r0
 800610e:	2a00      	cmp	r2, #0
 8006110:	d0f7      	beq.n	8006102 <_strtoul_l.isra.0+0xc6>
 8006112:	b10d      	cbz	r5, 8006118 <_strtoul_l.isra.0+0xdc>
 8006114:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8006118:	6011      	str	r1, [r2, #0]
 800611a:	e7f2      	b.n	8006102 <_strtoul_l.isra.0+0xc6>
 800611c:	2430      	movs	r4, #48	; 0x30
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1b1      	bne.n	8006086 <_strtoul_l.isra.0+0x4a>
 8006122:	2308      	movs	r3, #8
 8006124:	e7af      	b.n	8006086 <_strtoul_l.isra.0+0x4a>
 8006126:	2c30      	cmp	r4, #48	; 0x30
 8006128:	d0a2      	beq.n	8006070 <_strtoul_l.isra.0+0x34>
 800612a:	230a      	movs	r3, #10
 800612c:	e7ab      	b.n	8006086 <_strtoul_l.isra.0+0x4a>
 800612e:	bf00      	nop
 8006130:	08007995 	.word	0x08007995

08006134 <_strtoul_r>:
 8006134:	f7ff bf82 	b.w	800603c <_strtoul_l.isra.0>

08006138 <__submore>:
 8006138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800613c:	460c      	mov	r4, r1
 800613e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006140:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006144:	4299      	cmp	r1, r3
 8006146:	d11b      	bne.n	8006180 <__submore+0x48>
 8006148:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800614c:	f7fe fd42 	bl	8004bd4 <_malloc_r>
 8006150:	b918      	cbnz	r0, 800615a <__submore+0x22>
 8006152:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800615a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800615e:	63a3      	str	r3, [r4, #56]	; 0x38
 8006160:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006164:	6360      	str	r0, [r4, #52]	; 0x34
 8006166:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800616a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800616e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006172:	7043      	strb	r3, [r0, #1]
 8006174:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006178:	7003      	strb	r3, [r0, #0]
 800617a:	6020      	str	r0, [r4, #0]
 800617c:	2000      	movs	r0, #0
 800617e:	e7ea      	b.n	8006156 <__submore+0x1e>
 8006180:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006182:	0077      	lsls	r7, r6, #1
 8006184:	463a      	mov	r2, r7
 8006186:	f000 fb1d 	bl	80067c4 <_realloc_r>
 800618a:	4605      	mov	r5, r0
 800618c:	2800      	cmp	r0, #0
 800618e:	d0e0      	beq.n	8006152 <__submore+0x1a>
 8006190:	eb00 0806 	add.w	r8, r0, r6
 8006194:	4601      	mov	r1, r0
 8006196:	4632      	mov	r2, r6
 8006198:	4640      	mov	r0, r8
 800619a:	f7fe fcab 	bl	8004af4 <memcpy>
 800619e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80061a2:	f8c4 8000 	str.w	r8, [r4]
 80061a6:	e7e9      	b.n	800617c <__submore+0x44>

080061a8 <__swbuf_r>:
 80061a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061aa:	460e      	mov	r6, r1
 80061ac:	4614      	mov	r4, r2
 80061ae:	4605      	mov	r5, r0
 80061b0:	b118      	cbz	r0, 80061ba <__swbuf_r+0x12>
 80061b2:	6983      	ldr	r3, [r0, #24]
 80061b4:	b90b      	cbnz	r3, 80061ba <__swbuf_r+0x12>
 80061b6:	f000 f9d9 	bl	800656c <__sinit>
 80061ba:	4b21      	ldr	r3, [pc, #132]	; (8006240 <__swbuf_r+0x98>)
 80061bc:	429c      	cmp	r4, r3
 80061be:	d12b      	bne.n	8006218 <__swbuf_r+0x70>
 80061c0:	686c      	ldr	r4, [r5, #4]
 80061c2:	69a3      	ldr	r3, [r4, #24]
 80061c4:	60a3      	str	r3, [r4, #8]
 80061c6:	89a3      	ldrh	r3, [r4, #12]
 80061c8:	071a      	lsls	r2, r3, #28
 80061ca:	d52f      	bpl.n	800622c <__swbuf_r+0x84>
 80061cc:	6923      	ldr	r3, [r4, #16]
 80061ce:	b36b      	cbz	r3, 800622c <__swbuf_r+0x84>
 80061d0:	6923      	ldr	r3, [r4, #16]
 80061d2:	6820      	ldr	r0, [r4, #0]
 80061d4:	b2f6      	uxtb	r6, r6
 80061d6:	1ac0      	subs	r0, r0, r3
 80061d8:	6963      	ldr	r3, [r4, #20]
 80061da:	4637      	mov	r7, r6
 80061dc:	4283      	cmp	r3, r0
 80061de:	dc04      	bgt.n	80061ea <__swbuf_r+0x42>
 80061e0:	4621      	mov	r1, r4
 80061e2:	4628      	mov	r0, r5
 80061e4:	f000 f92e 	bl	8006444 <_fflush_r>
 80061e8:	bb30      	cbnz	r0, 8006238 <__swbuf_r+0x90>
 80061ea:	68a3      	ldr	r3, [r4, #8]
 80061ec:	3001      	adds	r0, #1
 80061ee:	3b01      	subs	r3, #1
 80061f0:	60a3      	str	r3, [r4, #8]
 80061f2:	6823      	ldr	r3, [r4, #0]
 80061f4:	1c5a      	adds	r2, r3, #1
 80061f6:	6022      	str	r2, [r4, #0]
 80061f8:	701e      	strb	r6, [r3, #0]
 80061fa:	6963      	ldr	r3, [r4, #20]
 80061fc:	4283      	cmp	r3, r0
 80061fe:	d004      	beq.n	800620a <__swbuf_r+0x62>
 8006200:	89a3      	ldrh	r3, [r4, #12]
 8006202:	07db      	lsls	r3, r3, #31
 8006204:	d506      	bpl.n	8006214 <__swbuf_r+0x6c>
 8006206:	2e0a      	cmp	r6, #10
 8006208:	d104      	bne.n	8006214 <__swbuf_r+0x6c>
 800620a:	4621      	mov	r1, r4
 800620c:	4628      	mov	r0, r5
 800620e:	f000 f919 	bl	8006444 <_fflush_r>
 8006212:	b988      	cbnz	r0, 8006238 <__swbuf_r+0x90>
 8006214:	4638      	mov	r0, r7
 8006216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006218:	4b0a      	ldr	r3, [pc, #40]	; (8006244 <__swbuf_r+0x9c>)
 800621a:	429c      	cmp	r4, r3
 800621c:	d101      	bne.n	8006222 <__swbuf_r+0x7a>
 800621e:	68ac      	ldr	r4, [r5, #8]
 8006220:	e7cf      	b.n	80061c2 <__swbuf_r+0x1a>
 8006222:	4b09      	ldr	r3, [pc, #36]	; (8006248 <__swbuf_r+0xa0>)
 8006224:	429c      	cmp	r4, r3
 8006226:	bf08      	it	eq
 8006228:	68ec      	ldreq	r4, [r5, #12]
 800622a:	e7ca      	b.n	80061c2 <__swbuf_r+0x1a>
 800622c:	4621      	mov	r1, r4
 800622e:	4628      	mov	r0, r5
 8006230:	f000 f80c 	bl	800624c <__swsetup_r>
 8006234:	2800      	cmp	r0, #0
 8006236:	d0cb      	beq.n	80061d0 <__swbuf_r+0x28>
 8006238:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800623c:	e7ea      	b.n	8006214 <__swbuf_r+0x6c>
 800623e:	bf00      	nop
 8006240:	08007b04 	.word	0x08007b04
 8006244:	08007b24 	.word	0x08007b24
 8006248:	08007ae4 	.word	0x08007ae4

0800624c <__swsetup_r>:
 800624c:	4b32      	ldr	r3, [pc, #200]	; (8006318 <__swsetup_r+0xcc>)
 800624e:	b570      	push	{r4, r5, r6, lr}
 8006250:	681d      	ldr	r5, [r3, #0]
 8006252:	4606      	mov	r6, r0
 8006254:	460c      	mov	r4, r1
 8006256:	b125      	cbz	r5, 8006262 <__swsetup_r+0x16>
 8006258:	69ab      	ldr	r3, [r5, #24]
 800625a:	b913      	cbnz	r3, 8006262 <__swsetup_r+0x16>
 800625c:	4628      	mov	r0, r5
 800625e:	f000 f985 	bl	800656c <__sinit>
 8006262:	4b2e      	ldr	r3, [pc, #184]	; (800631c <__swsetup_r+0xd0>)
 8006264:	429c      	cmp	r4, r3
 8006266:	d10f      	bne.n	8006288 <__swsetup_r+0x3c>
 8006268:	686c      	ldr	r4, [r5, #4]
 800626a:	89a3      	ldrh	r3, [r4, #12]
 800626c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006270:	0719      	lsls	r1, r3, #28
 8006272:	d42c      	bmi.n	80062ce <__swsetup_r+0x82>
 8006274:	06dd      	lsls	r5, r3, #27
 8006276:	d411      	bmi.n	800629c <__swsetup_r+0x50>
 8006278:	2309      	movs	r3, #9
 800627a:	6033      	str	r3, [r6, #0]
 800627c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006284:	81a3      	strh	r3, [r4, #12]
 8006286:	e03e      	b.n	8006306 <__swsetup_r+0xba>
 8006288:	4b25      	ldr	r3, [pc, #148]	; (8006320 <__swsetup_r+0xd4>)
 800628a:	429c      	cmp	r4, r3
 800628c:	d101      	bne.n	8006292 <__swsetup_r+0x46>
 800628e:	68ac      	ldr	r4, [r5, #8]
 8006290:	e7eb      	b.n	800626a <__swsetup_r+0x1e>
 8006292:	4b24      	ldr	r3, [pc, #144]	; (8006324 <__swsetup_r+0xd8>)
 8006294:	429c      	cmp	r4, r3
 8006296:	bf08      	it	eq
 8006298:	68ec      	ldreq	r4, [r5, #12]
 800629a:	e7e6      	b.n	800626a <__swsetup_r+0x1e>
 800629c:	0758      	lsls	r0, r3, #29
 800629e:	d512      	bpl.n	80062c6 <__swsetup_r+0x7a>
 80062a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062a2:	b141      	cbz	r1, 80062b6 <__swsetup_r+0x6a>
 80062a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062a8:	4299      	cmp	r1, r3
 80062aa:	d002      	beq.n	80062b2 <__swsetup_r+0x66>
 80062ac:	4630      	mov	r0, r6
 80062ae:	f7fe fc45 	bl	8004b3c <_free_r>
 80062b2:	2300      	movs	r3, #0
 80062b4:	6363      	str	r3, [r4, #52]	; 0x34
 80062b6:	89a3      	ldrh	r3, [r4, #12]
 80062b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80062bc:	81a3      	strh	r3, [r4, #12]
 80062be:	2300      	movs	r3, #0
 80062c0:	6063      	str	r3, [r4, #4]
 80062c2:	6923      	ldr	r3, [r4, #16]
 80062c4:	6023      	str	r3, [r4, #0]
 80062c6:	89a3      	ldrh	r3, [r4, #12]
 80062c8:	f043 0308 	orr.w	r3, r3, #8
 80062cc:	81a3      	strh	r3, [r4, #12]
 80062ce:	6923      	ldr	r3, [r4, #16]
 80062d0:	b94b      	cbnz	r3, 80062e6 <__swsetup_r+0x9a>
 80062d2:	89a3      	ldrh	r3, [r4, #12]
 80062d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80062d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062dc:	d003      	beq.n	80062e6 <__swsetup_r+0x9a>
 80062de:	4621      	mov	r1, r4
 80062e0:	4630      	mov	r0, r6
 80062e2:	f000 fa07 	bl	80066f4 <__smakebuf_r>
 80062e6:	89a0      	ldrh	r0, [r4, #12]
 80062e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062ec:	f010 0301 	ands.w	r3, r0, #1
 80062f0:	d00a      	beq.n	8006308 <__swsetup_r+0xbc>
 80062f2:	2300      	movs	r3, #0
 80062f4:	60a3      	str	r3, [r4, #8]
 80062f6:	6963      	ldr	r3, [r4, #20]
 80062f8:	425b      	negs	r3, r3
 80062fa:	61a3      	str	r3, [r4, #24]
 80062fc:	6923      	ldr	r3, [r4, #16]
 80062fe:	b943      	cbnz	r3, 8006312 <__swsetup_r+0xc6>
 8006300:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006304:	d1ba      	bne.n	800627c <__swsetup_r+0x30>
 8006306:	bd70      	pop	{r4, r5, r6, pc}
 8006308:	0781      	lsls	r1, r0, #30
 800630a:	bf58      	it	pl
 800630c:	6963      	ldrpl	r3, [r4, #20]
 800630e:	60a3      	str	r3, [r4, #8]
 8006310:	e7f4      	b.n	80062fc <__swsetup_r+0xb0>
 8006312:	2000      	movs	r0, #0
 8006314:	e7f7      	b.n	8006306 <__swsetup_r+0xba>
 8006316:	bf00      	nop
 8006318:	20000010 	.word	0x20000010
 800631c:	08007b04 	.word	0x08007b04
 8006320:	08007b24 	.word	0x08007b24
 8006324:	08007ae4 	.word	0x08007ae4

08006328 <abort>:
 8006328:	2006      	movs	r0, #6
 800632a:	b508      	push	{r3, lr}
 800632c:	f000 fa98 	bl	8006860 <raise>
 8006330:	2001      	movs	r0, #1
 8006332:	f7fb fda8 	bl	8001e86 <_exit>
	...

08006338 <__sflush_r>:
 8006338:	898a      	ldrh	r2, [r1, #12]
 800633a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800633e:	4605      	mov	r5, r0
 8006340:	0710      	lsls	r0, r2, #28
 8006342:	460c      	mov	r4, r1
 8006344:	d458      	bmi.n	80063f8 <__sflush_r+0xc0>
 8006346:	684b      	ldr	r3, [r1, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	dc05      	bgt.n	8006358 <__sflush_r+0x20>
 800634c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800634e:	2b00      	cmp	r3, #0
 8006350:	dc02      	bgt.n	8006358 <__sflush_r+0x20>
 8006352:	2000      	movs	r0, #0
 8006354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006358:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800635a:	2e00      	cmp	r6, #0
 800635c:	d0f9      	beq.n	8006352 <__sflush_r+0x1a>
 800635e:	2300      	movs	r3, #0
 8006360:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006364:	682f      	ldr	r7, [r5, #0]
 8006366:	602b      	str	r3, [r5, #0]
 8006368:	d032      	beq.n	80063d0 <__sflush_r+0x98>
 800636a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800636c:	89a3      	ldrh	r3, [r4, #12]
 800636e:	075a      	lsls	r2, r3, #29
 8006370:	d505      	bpl.n	800637e <__sflush_r+0x46>
 8006372:	6863      	ldr	r3, [r4, #4]
 8006374:	1ac0      	subs	r0, r0, r3
 8006376:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006378:	b10b      	cbz	r3, 800637e <__sflush_r+0x46>
 800637a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800637c:	1ac0      	subs	r0, r0, r3
 800637e:	2300      	movs	r3, #0
 8006380:	4602      	mov	r2, r0
 8006382:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006384:	4628      	mov	r0, r5
 8006386:	6a21      	ldr	r1, [r4, #32]
 8006388:	47b0      	blx	r6
 800638a:	1c43      	adds	r3, r0, #1
 800638c:	89a3      	ldrh	r3, [r4, #12]
 800638e:	d106      	bne.n	800639e <__sflush_r+0x66>
 8006390:	6829      	ldr	r1, [r5, #0]
 8006392:	291d      	cmp	r1, #29
 8006394:	d82c      	bhi.n	80063f0 <__sflush_r+0xb8>
 8006396:	4a2a      	ldr	r2, [pc, #168]	; (8006440 <__sflush_r+0x108>)
 8006398:	40ca      	lsrs	r2, r1
 800639a:	07d6      	lsls	r6, r2, #31
 800639c:	d528      	bpl.n	80063f0 <__sflush_r+0xb8>
 800639e:	2200      	movs	r2, #0
 80063a0:	6062      	str	r2, [r4, #4]
 80063a2:	6922      	ldr	r2, [r4, #16]
 80063a4:	04d9      	lsls	r1, r3, #19
 80063a6:	6022      	str	r2, [r4, #0]
 80063a8:	d504      	bpl.n	80063b4 <__sflush_r+0x7c>
 80063aa:	1c42      	adds	r2, r0, #1
 80063ac:	d101      	bne.n	80063b2 <__sflush_r+0x7a>
 80063ae:	682b      	ldr	r3, [r5, #0]
 80063b0:	b903      	cbnz	r3, 80063b4 <__sflush_r+0x7c>
 80063b2:	6560      	str	r0, [r4, #84]	; 0x54
 80063b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063b6:	602f      	str	r7, [r5, #0]
 80063b8:	2900      	cmp	r1, #0
 80063ba:	d0ca      	beq.n	8006352 <__sflush_r+0x1a>
 80063bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063c0:	4299      	cmp	r1, r3
 80063c2:	d002      	beq.n	80063ca <__sflush_r+0x92>
 80063c4:	4628      	mov	r0, r5
 80063c6:	f7fe fbb9 	bl	8004b3c <_free_r>
 80063ca:	2000      	movs	r0, #0
 80063cc:	6360      	str	r0, [r4, #52]	; 0x34
 80063ce:	e7c1      	b.n	8006354 <__sflush_r+0x1c>
 80063d0:	6a21      	ldr	r1, [r4, #32]
 80063d2:	2301      	movs	r3, #1
 80063d4:	4628      	mov	r0, r5
 80063d6:	47b0      	blx	r6
 80063d8:	1c41      	adds	r1, r0, #1
 80063da:	d1c7      	bne.n	800636c <__sflush_r+0x34>
 80063dc:	682b      	ldr	r3, [r5, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d0c4      	beq.n	800636c <__sflush_r+0x34>
 80063e2:	2b1d      	cmp	r3, #29
 80063e4:	d001      	beq.n	80063ea <__sflush_r+0xb2>
 80063e6:	2b16      	cmp	r3, #22
 80063e8:	d101      	bne.n	80063ee <__sflush_r+0xb6>
 80063ea:	602f      	str	r7, [r5, #0]
 80063ec:	e7b1      	b.n	8006352 <__sflush_r+0x1a>
 80063ee:	89a3      	ldrh	r3, [r4, #12]
 80063f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063f4:	81a3      	strh	r3, [r4, #12]
 80063f6:	e7ad      	b.n	8006354 <__sflush_r+0x1c>
 80063f8:	690f      	ldr	r7, [r1, #16]
 80063fa:	2f00      	cmp	r7, #0
 80063fc:	d0a9      	beq.n	8006352 <__sflush_r+0x1a>
 80063fe:	0793      	lsls	r3, r2, #30
 8006400:	bf18      	it	ne
 8006402:	2300      	movne	r3, #0
 8006404:	680e      	ldr	r6, [r1, #0]
 8006406:	bf08      	it	eq
 8006408:	694b      	ldreq	r3, [r1, #20]
 800640a:	eba6 0807 	sub.w	r8, r6, r7
 800640e:	600f      	str	r7, [r1, #0]
 8006410:	608b      	str	r3, [r1, #8]
 8006412:	f1b8 0f00 	cmp.w	r8, #0
 8006416:	dd9c      	ble.n	8006352 <__sflush_r+0x1a>
 8006418:	4643      	mov	r3, r8
 800641a:	463a      	mov	r2, r7
 800641c:	4628      	mov	r0, r5
 800641e:	6a21      	ldr	r1, [r4, #32]
 8006420:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006422:	47b0      	blx	r6
 8006424:	2800      	cmp	r0, #0
 8006426:	dc06      	bgt.n	8006436 <__sflush_r+0xfe>
 8006428:	89a3      	ldrh	r3, [r4, #12]
 800642a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800642e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006432:	81a3      	strh	r3, [r4, #12]
 8006434:	e78e      	b.n	8006354 <__sflush_r+0x1c>
 8006436:	4407      	add	r7, r0
 8006438:	eba8 0800 	sub.w	r8, r8, r0
 800643c:	e7e9      	b.n	8006412 <__sflush_r+0xda>
 800643e:	bf00      	nop
 8006440:	20400001 	.word	0x20400001

08006444 <_fflush_r>:
 8006444:	b538      	push	{r3, r4, r5, lr}
 8006446:	690b      	ldr	r3, [r1, #16]
 8006448:	4605      	mov	r5, r0
 800644a:	460c      	mov	r4, r1
 800644c:	b913      	cbnz	r3, 8006454 <_fflush_r+0x10>
 800644e:	2500      	movs	r5, #0
 8006450:	4628      	mov	r0, r5
 8006452:	bd38      	pop	{r3, r4, r5, pc}
 8006454:	b118      	cbz	r0, 800645e <_fflush_r+0x1a>
 8006456:	6983      	ldr	r3, [r0, #24]
 8006458:	b90b      	cbnz	r3, 800645e <_fflush_r+0x1a>
 800645a:	f000 f887 	bl	800656c <__sinit>
 800645e:	4b14      	ldr	r3, [pc, #80]	; (80064b0 <_fflush_r+0x6c>)
 8006460:	429c      	cmp	r4, r3
 8006462:	d11b      	bne.n	800649c <_fflush_r+0x58>
 8006464:	686c      	ldr	r4, [r5, #4]
 8006466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d0ef      	beq.n	800644e <_fflush_r+0xa>
 800646e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006470:	07d0      	lsls	r0, r2, #31
 8006472:	d404      	bmi.n	800647e <_fflush_r+0x3a>
 8006474:	0599      	lsls	r1, r3, #22
 8006476:	d402      	bmi.n	800647e <_fflush_r+0x3a>
 8006478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800647a:	f000 f915 	bl	80066a8 <__retarget_lock_acquire_recursive>
 800647e:	4628      	mov	r0, r5
 8006480:	4621      	mov	r1, r4
 8006482:	f7ff ff59 	bl	8006338 <__sflush_r>
 8006486:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006488:	4605      	mov	r5, r0
 800648a:	07da      	lsls	r2, r3, #31
 800648c:	d4e0      	bmi.n	8006450 <_fflush_r+0xc>
 800648e:	89a3      	ldrh	r3, [r4, #12]
 8006490:	059b      	lsls	r3, r3, #22
 8006492:	d4dd      	bmi.n	8006450 <_fflush_r+0xc>
 8006494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006496:	f000 f908 	bl	80066aa <__retarget_lock_release_recursive>
 800649a:	e7d9      	b.n	8006450 <_fflush_r+0xc>
 800649c:	4b05      	ldr	r3, [pc, #20]	; (80064b4 <_fflush_r+0x70>)
 800649e:	429c      	cmp	r4, r3
 80064a0:	d101      	bne.n	80064a6 <_fflush_r+0x62>
 80064a2:	68ac      	ldr	r4, [r5, #8]
 80064a4:	e7df      	b.n	8006466 <_fflush_r+0x22>
 80064a6:	4b04      	ldr	r3, [pc, #16]	; (80064b8 <_fflush_r+0x74>)
 80064a8:	429c      	cmp	r4, r3
 80064aa:	bf08      	it	eq
 80064ac:	68ec      	ldreq	r4, [r5, #12]
 80064ae:	e7da      	b.n	8006466 <_fflush_r+0x22>
 80064b0:	08007b04 	.word	0x08007b04
 80064b4:	08007b24 	.word	0x08007b24
 80064b8:	08007ae4 	.word	0x08007ae4

080064bc <std>:
 80064bc:	2300      	movs	r3, #0
 80064be:	b510      	push	{r4, lr}
 80064c0:	4604      	mov	r4, r0
 80064c2:	e9c0 3300 	strd	r3, r3, [r0]
 80064c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064ca:	6083      	str	r3, [r0, #8]
 80064cc:	8181      	strh	r1, [r0, #12]
 80064ce:	6643      	str	r3, [r0, #100]	; 0x64
 80064d0:	81c2      	strh	r2, [r0, #14]
 80064d2:	6183      	str	r3, [r0, #24]
 80064d4:	4619      	mov	r1, r3
 80064d6:	2208      	movs	r2, #8
 80064d8:	305c      	adds	r0, #92	; 0x5c
 80064da:	f7fe fb19 	bl	8004b10 <memset>
 80064de:	4b05      	ldr	r3, [pc, #20]	; (80064f4 <std+0x38>)
 80064e0:	6224      	str	r4, [r4, #32]
 80064e2:	6263      	str	r3, [r4, #36]	; 0x24
 80064e4:	4b04      	ldr	r3, [pc, #16]	; (80064f8 <std+0x3c>)
 80064e6:	62a3      	str	r3, [r4, #40]	; 0x28
 80064e8:	4b04      	ldr	r3, [pc, #16]	; (80064fc <std+0x40>)
 80064ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 80064ec:	4b04      	ldr	r3, [pc, #16]	; (8006500 <std+0x44>)
 80064ee:	6323      	str	r3, [r4, #48]	; 0x30
 80064f0:	bd10      	pop	{r4, pc}
 80064f2:	bf00      	nop
 80064f4:	08004d3d 	.word	0x08004d3d
 80064f8:	08004d63 	.word	0x08004d63
 80064fc:	08004d9b 	.word	0x08004d9b
 8006500:	08004dbf 	.word	0x08004dbf

08006504 <_cleanup_r>:
 8006504:	4901      	ldr	r1, [pc, #4]	; (800650c <_cleanup_r+0x8>)
 8006506:	f000 b8af 	b.w	8006668 <_fwalk_reent>
 800650a:	bf00      	nop
 800650c:	08006445 	.word	0x08006445

08006510 <__sfmoreglue>:
 8006510:	b570      	push	{r4, r5, r6, lr}
 8006512:	2568      	movs	r5, #104	; 0x68
 8006514:	1e4a      	subs	r2, r1, #1
 8006516:	4355      	muls	r5, r2
 8006518:	460e      	mov	r6, r1
 800651a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800651e:	f7fe fb59 	bl	8004bd4 <_malloc_r>
 8006522:	4604      	mov	r4, r0
 8006524:	b140      	cbz	r0, 8006538 <__sfmoreglue+0x28>
 8006526:	2100      	movs	r1, #0
 8006528:	e9c0 1600 	strd	r1, r6, [r0]
 800652c:	300c      	adds	r0, #12
 800652e:	60a0      	str	r0, [r4, #8]
 8006530:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006534:	f7fe faec 	bl	8004b10 <memset>
 8006538:	4620      	mov	r0, r4
 800653a:	bd70      	pop	{r4, r5, r6, pc}

0800653c <__sfp_lock_acquire>:
 800653c:	4801      	ldr	r0, [pc, #4]	; (8006544 <__sfp_lock_acquire+0x8>)
 800653e:	f000 b8b3 	b.w	80066a8 <__retarget_lock_acquire_recursive>
 8006542:	bf00      	nop
 8006544:	20000ab8 	.word	0x20000ab8

08006548 <__sfp_lock_release>:
 8006548:	4801      	ldr	r0, [pc, #4]	; (8006550 <__sfp_lock_release+0x8>)
 800654a:	f000 b8ae 	b.w	80066aa <__retarget_lock_release_recursive>
 800654e:	bf00      	nop
 8006550:	20000ab8 	.word	0x20000ab8

08006554 <__sinit_lock_acquire>:
 8006554:	4801      	ldr	r0, [pc, #4]	; (800655c <__sinit_lock_acquire+0x8>)
 8006556:	f000 b8a7 	b.w	80066a8 <__retarget_lock_acquire_recursive>
 800655a:	bf00      	nop
 800655c:	20000ab3 	.word	0x20000ab3

08006560 <__sinit_lock_release>:
 8006560:	4801      	ldr	r0, [pc, #4]	; (8006568 <__sinit_lock_release+0x8>)
 8006562:	f000 b8a2 	b.w	80066aa <__retarget_lock_release_recursive>
 8006566:	bf00      	nop
 8006568:	20000ab3 	.word	0x20000ab3

0800656c <__sinit>:
 800656c:	b510      	push	{r4, lr}
 800656e:	4604      	mov	r4, r0
 8006570:	f7ff fff0 	bl	8006554 <__sinit_lock_acquire>
 8006574:	69a3      	ldr	r3, [r4, #24]
 8006576:	b11b      	cbz	r3, 8006580 <__sinit+0x14>
 8006578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800657c:	f7ff bff0 	b.w	8006560 <__sinit_lock_release>
 8006580:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006584:	6523      	str	r3, [r4, #80]	; 0x50
 8006586:	4b13      	ldr	r3, [pc, #76]	; (80065d4 <__sinit+0x68>)
 8006588:	4a13      	ldr	r2, [pc, #76]	; (80065d8 <__sinit+0x6c>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	62a2      	str	r2, [r4, #40]	; 0x28
 800658e:	42a3      	cmp	r3, r4
 8006590:	bf08      	it	eq
 8006592:	2301      	moveq	r3, #1
 8006594:	4620      	mov	r0, r4
 8006596:	bf08      	it	eq
 8006598:	61a3      	streq	r3, [r4, #24]
 800659a:	f000 f81f 	bl	80065dc <__sfp>
 800659e:	6060      	str	r0, [r4, #4]
 80065a0:	4620      	mov	r0, r4
 80065a2:	f000 f81b 	bl	80065dc <__sfp>
 80065a6:	60a0      	str	r0, [r4, #8]
 80065a8:	4620      	mov	r0, r4
 80065aa:	f000 f817 	bl	80065dc <__sfp>
 80065ae:	2200      	movs	r2, #0
 80065b0:	2104      	movs	r1, #4
 80065b2:	60e0      	str	r0, [r4, #12]
 80065b4:	6860      	ldr	r0, [r4, #4]
 80065b6:	f7ff ff81 	bl	80064bc <std>
 80065ba:	2201      	movs	r2, #1
 80065bc:	2109      	movs	r1, #9
 80065be:	68a0      	ldr	r0, [r4, #8]
 80065c0:	f7ff ff7c 	bl	80064bc <std>
 80065c4:	2202      	movs	r2, #2
 80065c6:	2112      	movs	r1, #18
 80065c8:	68e0      	ldr	r0, [r4, #12]
 80065ca:	f7ff ff77 	bl	80064bc <std>
 80065ce:	2301      	movs	r3, #1
 80065d0:	61a3      	str	r3, [r4, #24]
 80065d2:	e7d1      	b.n	8006578 <__sinit+0xc>
 80065d4:	080078dc 	.word	0x080078dc
 80065d8:	08006505 	.word	0x08006505

080065dc <__sfp>:
 80065dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065de:	4607      	mov	r7, r0
 80065e0:	f7ff ffac 	bl	800653c <__sfp_lock_acquire>
 80065e4:	4b1e      	ldr	r3, [pc, #120]	; (8006660 <__sfp+0x84>)
 80065e6:	681e      	ldr	r6, [r3, #0]
 80065e8:	69b3      	ldr	r3, [r6, #24]
 80065ea:	b913      	cbnz	r3, 80065f2 <__sfp+0x16>
 80065ec:	4630      	mov	r0, r6
 80065ee:	f7ff ffbd 	bl	800656c <__sinit>
 80065f2:	3648      	adds	r6, #72	; 0x48
 80065f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80065f8:	3b01      	subs	r3, #1
 80065fa:	d503      	bpl.n	8006604 <__sfp+0x28>
 80065fc:	6833      	ldr	r3, [r6, #0]
 80065fe:	b30b      	cbz	r3, 8006644 <__sfp+0x68>
 8006600:	6836      	ldr	r6, [r6, #0]
 8006602:	e7f7      	b.n	80065f4 <__sfp+0x18>
 8006604:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006608:	b9d5      	cbnz	r5, 8006640 <__sfp+0x64>
 800660a:	4b16      	ldr	r3, [pc, #88]	; (8006664 <__sfp+0x88>)
 800660c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006610:	60e3      	str	r3, [r4, #12]
 8006612:	6665      	str	r5, [r4, #100]	; 0x64
 8006614:	f000 f847 	bl	80066a6 <__retarget_lock_init_recursive>
 8006618:	f7ff ff96 	bl	8006548 <__sfp_lock_release>
 800661c:	2208      	movs	r2, #8
 800661e:	4629      	mov	r1, r5
 8006620:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006624:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006628:	6025      	str	r5, [r4, #0]
 800662a:	61a5      	str	r5, [r4, #24]
 800662c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006630:	f7fe fa6e 	bl	8004b10 <memset>
 8006634:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006638:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800663c:	4620      	mov	r0, r4
 800663e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006640:	3468      	adds	r4, #104	; 0x68
 8006642:	e7d9      	b.n	80065f8 <__sfp+0x1c>
 8006644:	2104      	movs	r1, #4
 8006646:	4638      	mov	r0, r7
 8006648:	f7ff ff62 	bl	8006510 <__sfmoreglue>
 800664c:	4604      	mov	r4, r0
 800664e:	6030      	str	r0, [r6, #0]
 8006650:	2800      	cmp	r0, #0
 8006652:	d1d5      	bne.n	8006600 <__sfp+0x24>
 8006654:	f7ff ff78 	bl	8006548 <__sfp_lock_release>
 8006658:	230c      	movs	r3, #12
 800665a:	603b      	str	r3, [r7, #0]
 800665c:	e7ee      	b.n	800663c <__sfp+0x60>
 800665e:	bf00      	nop
 8006660:	080078dc 	.word	0x080078dc
 8006664:	ffff0001 	.word	0xffff0001

08006668 <_fwalk_reent>:
 8006668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800666c:	4606      	mov	r6, r0
 800666e:	4688      	mov	r8, r1
 8006670:	2700      	movs	r7, #0
 8006672:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006676:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800667a:	f1b9 0901 	subs.w	r9, r9, #1
 800667e:	d505      	bpl.n	800668c <_fwalk_reent+0x24>
 8006680:	6824      	ldr	r4, [r4, #0]
 8006682:	2c00      	cmp	r4, #0
 8006684:	d1f7      	bne.n	8006676 <_fwalk_reent+0xe>
 8006686:	4638      	mov	r0, r7
 8006688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800668c:	89ab      	ldrh	r3, [r5, #12]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d907      	bls.n	80066a2 <_fwalk_reent+0x3a>
 8006692:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006696:	3301      	adds	r3, #1
 8006698:	d003      	beq.n	80066a2 <_fwalk_reent+0x3a>
 800669a:	4629      	mov	r1, r5
 800669c:	4630      	mov	r0, r6
 800669e:	47c0      	blx	r8
 80066a0:	4307      	orrs	r7, r0
 80066a2:	3568      	adds	r5, #104	; 0x68
 80066a4:	e7e9      	b.n	800667a <_fwalk_reent+0x12>

080066a6 <__retarget_lock_init_recursive>:
 80066a6:	4770      	bx	lr

080066a8 <__retarget_lock_acquire_recursive>:
 80066a8:	4770      	bx	lr

080066aa <__retarget_lock_release_recursive>:
 80066aa:	4770      	bx	lr

080066ac <__swhatbuf_r>:
 80066ac:	b570      	push	{r4, r5, r6, lr}
 80066ae:	460e      	mov	r6, r1
 80066b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066b4:	4614      	mov	r4, r2
 80066b6:	2900      	cmp	r1, #0
 80066b8:	461d      	mov	r5, r3
 80066ba:	b096      	sub	sp, #88	; 0x58
 80066bc:	da07      	bge.n	80066ce <__swhatbuf_r+0x22>
 80066be:	2300      	movs	r3, #0
 80066c0:	602b      	str	r3, [r5, #0]
 80066c2:	89b3      	ldrh	r3, [r6, #12]
 80066c4:	061a      	lsls	r2, r3, #24
 80066c6:	d410      	bmi.n	80066ea <__swhatbuf_r+0x3e>
 80066c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066cc:	e00e      	b.n	80066ec <__swhatbuf_r+0x40>
 80066ce:	466a      	mov	r2, sp
 80066d0:	f000 f8e2 	bl	8006898 <_fstat_r>
 80066d4:	2800      	cmp	r0, #0
 80066d6:	dbf2      	blt.n	80066be <__swhatbuf_r+0x12>
 80066d8:	9a01      	ldr	r2, [sp, #4]
 80066da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80066de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80066e2:	425a      	negs	r2, r3
 80066e4:	415a      	adcs	r2, r3
 80066e6:	602a      	str	r2, [r5, #0]
 80066e8:	e7ee      	b.n	80066c8 <__swhatbuf_r+0x1c>
 80066ea:	2340      	movs	r3, #64	; 0x40
 80066ec:	2000      	movs	r0, #0
 80066ee:	6023      	str	r3, [r4, #0]
 80066f0:	b016      	add	sp, #88	; 0x58
 80066f2:	bd70      	pop	{r4, r5, r6, pc}

080066f4 <__smakebuf_r>:
 80066f4:	898b      	ldrh	r3, [r1, #12]
 80066f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80066f8:	079d      	lsls	r5, r3, #30
 80066fa:	4606      	mov	r6, r0
 80066fc:	460c      	mov	r4, r1
 80066fe:	d507      	bpl.n	8006710 <__smakebuf_r+0x1c>
 8006700:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006704:	6023      	str	r3, [r4, #0]
 8006706:	6123      	str	r3, [r4, #16]
 8006708:	2301      	movs	r3, #1
 800670a:	6163      	str	r3, [r4, #20]
 800670c:	b002      	add	sp, #8
 800670e:	bd70      	pop	{r4, r5, r6, pc}
 8006710:	466a      	mov	r2, sp
 8006712:	ab01      	add	r3, sp, #4
 8006714:	f7ff ffca 	bl	80066ac <__swhatbuf_r>
 8006718:	9900      	ldr	r1, [sp, #0]
 800671a:	4605      	mov	r5, r0
 800671c:	4630      	mov	r0, r6
 800671e:	f7fe fa59 	bl	8004bd4 <_malloc_r>
 8006722:	b948      	cbnz	r0, 8006738 <__smakebuf_r+0x44>
 8006724:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006728:	059a      	lsls	r2, r3, #22
 800672a:	d4ef      	bmi.n	800670c <__smakebuf_r+0x18>
 800672c:	f023 0303 	bic.w	r3, r3, #3
 8006730:	f043 0302 	orr.w	r3, r3, #2
 8006734:	81a3      	strh	r3, [r4, #12]
 8006736:	e7e3      	b.n	8006700 <__smakebuf_r+0xc>
 8006738:	4b0d      	ldr	r3, [pc, #52]	; (8006770 <__smakebuf_r+0x7c>)
 800673a:	62b3      	str	r3, [r6, #40]	; 0x28
 800673c:	89a3      	ldrh	r3, [r4, #12]
 800673e:	6020      	str	r0, [r4, #0]
 8006740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006744:	81a3      	strh	r3, [r4, #12]
 8006746:	9b00      	ldr	r3, [sp, #0]
 8006748:	6120      	str	r0, [r4, #16]
 800674a:	6163      	str	r3, [r4, #20]
 800674c:	9b01      	ldr	r3, [sp, #4]
 800674e:	b15b      	cbz	r3, 8006768 <__smakebuf_r+0x74>
 8006750:	4630      	mov	r0, r6
 8006752:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006756:	f000 f8b1 	bl	80068bc <_isatty_r>
 800675a:	b128      	cbz	r0, 8006768 <__smakebuf_r+0x74>
 800675c:	89a3      	ldrh	r3, [r4, #12]
 800675e:	f023 0303 	bic.w	r3, r3, #3
 8006762:	f043 0301 	orr.w	r3, r3, #1
 8006766:	81a3      	strh	r3, [r4, #12]
 8006768:	89a0      	ldrh	r0, [r4, #12]
 800676a:	4305      	orrs	r5, r0
 800676c:	81a5      	strh	r5, [r4, #12]
 800676e:	e7cd      	b.n	800670c <__smakebuf_r+0x18>
 8006770:	08006505 	.word	0x08006505

08006774 <memchr>:
 8006774:	4603      	mov	r3, r0
 8006776:	b510      	push	{r4, lr}
 8006778:	b2c9      	uxtb	r1, r1
 800677a:	4402      	add	r2, r0
 800677c:	4293      	cmp	r3, r2
 800677e:	4618      	mov	r0, r3
 8006780:	d101      	bne.n	8006786 <memchr+0x12>
 8006782:	2000      	movs	r0, #0
 8006784:	e003      	b.n	800678e <memchr+0x1a>
 8006786:	7804      	ldrb	r4, [r0, #0]
 8006788:	3301      	adds	r3, #1
 800678a:	428c      	cmp	r4, r1
 800678c:	d1f6      	bne.n	800677c <memchr+0x8>
 800678e:	bd10      	pop	{r4, pc}

08006790 <memmove>:
 8006790:	4288      	cmp	r0, r1
 8006792:	b510      	push	{r4, lr}
 8006794:	eb01 0402 	add.w	r4, r1, r2
 8006798:	d902      	bls.n	80067a0 <memmove+0x10>
 800679a:	4284      	cmp	r4, r0
 800679c:	4623      	mov	r3, r4
 800679e:	d807      	bhi.n	80067b0 <memmove+0x20>
 80067a0:	1e43      	subs	r3, r0, #1
 80067a2:	42a1      	cmp	r1, r4
 80067a4:	d008      	beq.n	80067b8 <memmove+0x28>
 80067a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80067ae:	e7f8      	b.n	80067a2 <memmove+0x12>
 80067b0:	4601      	mov	r1, r0
 80067b2:	4402      	add	r2, r0
 80067b4:	428a      	cmp	r2, r1
 80067b6:	d100      	bne.n	80067ba <memmove+0x2a>
 80067b8:	bd10      	pop	{r4, pc}
 80067ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80067c2:	e7f7      	b.n	80067b4 <memmove+0x24>

080067c4 <_realloc_r>:
 80067c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c6:	4607      	mov	r7, r0
 80067c8:	4614      	mov	r4, r2
 80067ca:	460e      	mov	r6, r1
 80067cc:	b921      	cbnz	r1, 80067d8 <_realloc_r+0x14>
 80067ce:	4611      	mov	r1, r2
 80067d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80067d4:	f7fe b9fe 	b.w	8004bd4 <_malloc_r>
 80067d8:	b922      	cbnz	r2, 80067e4 <_realloc_r+0x20>
 80067da:	f7fe f9af 	bl	8004b3c <_free_r>
 80067de:	4625      	mov	r5, r4
 80067e0:	4628      	mov	r0, r5
 80067e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067e4:	f000 f87a 	bl	80068dc <_malloc_usable_size_r>
 80067e8:	42a0      	cmp	r0, r4
 80067ea:	d20f      	bcs.n	800680c <_realloc_r+0x48>
 80067ec:	4621      	mov	r1, r4
 80067ee:	4638      	mov	r0, r7
 80067f0:	f7fe f9f0 	bl	8004bd4 <_malloc_r>
 80067f4:	4605      	mov	r5, r0
 80067f6:	2800      	cmp	r0, #0
 80067f8:	d0f2      	beq.n	80067e0 <_realloc_r+0x1c>
 80067fa:	4631      	mov	r1, r6
 80067fc:	4622      	mov	r2, r4
 80067fe:	f7fe f979 	bl	8004af4 <memcpy>
 8006802:	4631      	mov	r1, r6
 8006804:	4638      	mov	r0, r7
 8006806:	f7fe f999 	bl	8004b3c <_free_r>
 800680a:	e7e9      	b.n	80067e0 <_realloc_r+0x1c>
 800680c:	4635      	mov	r5, r6
 800680e:	e7e7      	b.n	80067e0 <_realloc_r+0x1c>

08006810 <_raise_r>:
 8006810:	291f      	cmp	r1, #31
 8006812:	b538      	push	{r3, r4, r5, lr}
 8006814:	4604      	mov	r4, r0
 8006816:	460d      	mov	r5, r1
 8006818:	d904      	bls.n	8006824 <_raise_r+0x14>
 800681a:	2316      	movs	r3, #22
 800681c:	6003      	str	r3, [r0, #0]
 800681e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006822:	bd38      	pop	{r3, r4, r5, pc}
 8006824:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006826:	b112      	cbz	r2, 800682e <_raise_r+0x1e>
 8006828:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800682c:	b94b      	cbnz	r3, 8006842 <_raise_r+0x32>
 800682e:	4620      	mov	r0, r4
 8006830:	f000 f830 	bl	8006894 <_getpid_r>
 8006834:	462a      	mov	r2, r5
 8006836:	4601      	mov	r1, r0
 8006838:	4620      	mov	r0, r4
 800683a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800683e:	f000 b817 	b.w	8006870 <_kill_r>
 8006842:	2b01      	cmp	r3, #1
 8006844:	d00a      	beq.n	800685c <_raise_r+0x4c>
 8006846:	1c59      	adds	r1, r3, #1
 8006848:	d103      	bne.n	8006852 <_raise_r+0x42>
 800684a:	2316      	movs	r3, #22
 800684c:	6003      	str	r3, [r0, #0]
 800684e:	2001      	movs	r0, #1
 8006850:	e7e7      	b.n	8006822 <_raise_r+0x12>
 8006852:	2400      	movs	r4, #0
 8006854:	4628      	mov	r0, r5
 8006856:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800685a:	4798      	blx	r3
 800685c:	2000      	movs	r0, #0
 800685e:	e7e0      	b.n	8006822 <_raise_r+0x12>

08006860 <raise>:
 8006860:	4b02      	ldr	r3, [pc, #8]	; (800686c <raise+0xc>)
 8006862:	4601      	mov	r1, r0
 8006864:	6818      	ldr	r0, [r3, #0]
 8006866:	f7ff bfd3 	b.w	8006810 <_raise_r>
 800686a:	bf00      	nop
 800686c:	20000010 	.word	0x20000010

08006870 <_kill_r>:
 8006870:	b538      	push	{r3, r4, r5, lr}
 8006872:	2300      	movs	r3, #0
 8006874:	4d06      	ldr	r5, [pc, #24]	; (8006890 <_kill_r+0x20>)
 8006876:	4604      	mov	r4, r0
 8006878:	4608      	mov	r0, r1
 800687a:	4611      	mov	r1, r2
 800687c:	602b      	str	r3, [r5, #0]
 800687e:	f7fb faf2 	bl	8001e66 <_kill>
 8006882:	1c43      	adds	r3, r0, #1
 8006884:	d102      	bne.n	800688c <_kill_r+0x1c>
 8006886:	682b      	ldr	r3, [r5, #0]
 8006888:	b103      	cbz	r3, 800688c <_kill_r+0x1c>
 800688a:	6023      	str	r3, [r4, #0]
 800688c:	bd38      	pop	{r3, r4, r5, pc}
 800688e:	bf00      	nop
 8006890:	20000aac 	.word	0x20000aac

08006894 <_getpid_r>:
 8006894:	f7fb bae0 	b.w	8001e58 <_getpid>

08006898 <_fstat_r>:
 8006898:	b538      	push	{r3, r4, r5, lr}
 800689a:	2300      	movs	r3, #0
 800689c:	4d06      	ldr	r5, [pc, #24]	; (80068b8 <_fstat_r+0x20>)
 800689e:	4604      	mov	r4, r0
 80068a0:	4608      	mov	r0, r1
 80068a2:	4611      	mov	r1, r2
 80068a4:	602b      	str	r3, [r5, #0]
 80068a6:	f7fb fb3c 	bl	8001f22 <_fstat>
 80068aa:	1c43      	adds	r3, r0, #1
 80068ac:	d102      	bne.n	80068b4 <_fstat_r+0x1c>
 80068ae:	682b      	ldr	r3, [r5, #0]
 80068b0:	b103      	cbz	r3, 80068b4 <_fstat_r+0x1c>
 80068b2:	6023      	str	r3, [r4, #0]
 80068b4:	bd38      	pop	{r3, r4, r5, pc}
 80068b6:	bf00      	nop
 80068b8:	20000aac 	.word	0x20000aac

080068bc <_isatty_r>:
 80068bc:	b538      	push	{r3, r4, r5, lr}
 80068be:	2300      	movs	r3, #0
 80068c0:	4d05      	ldr	r5, [pc, #20]	; (80068d8 <_isatty_r+0x1c>)
 80068c2:	4604      	mov	r4, r0
 80068c4:	4608      	mov	r0, r1
 80068c6:	602b      	str	r3, [r5, #0]
 80068c8:	f7fb fb3a 	bl	8001f40 <_isatty>
 80068cc:	1c43      	adds	r3, r0, #1
 80068ce:	d102      	bne.n	80068d6 <_isatty_r+0x1a>
 80068d0:	682b      	ldr	r3, [r5, #0]
 80068d2:	b103      	cbz	r3, 80068d6 <_isatty_r+0x1a>
 80068d4:	6023      	str	r3, [r4, #0]
 80068d6:	bd38      	pop	{r3, r4, r5, pc}
 80068d8:	20000aac 	.word	0x20000aac

080068dc <_malloc_usable_size_r>:
 80068dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068e0:	1f18      	subs	r0, r3, #4
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	bfbc      	itt	lt
 80068e6:	580b      	ldrlt	r3, [r1, r0]
 80068e8:	18c0      	addlt	r0, r0, r3
 80068ea:	4770      	bx	lr

080068ec <_init>:
 80068ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ee:	bf00      	nop
 80068f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068f2:	bc08      	pop	{r3}
 80068f4:	469e      	mov	lr, r3
 80068f6:	4770      	bx	lr

080068f8 <_fini>:
 80068f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068fa:	bf00      	nop
 80068fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068fe:	bc08      	pop	{r3}
 8006900:	469e      	mov	lr, r3
 8006902:	4770      	bx	lr
