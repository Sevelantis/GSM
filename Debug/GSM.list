
GSM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a7c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08003b88  08003b88  00013b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003df8  08003df8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003df8  08003df8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003df8  08003df8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003df8  08003df8  00013df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dfc  08003dfc  00013dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003e00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000078  08003e78  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08003e78  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3a8  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001db2  00000000  00000000  0002c449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  0002e200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  0002ee08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001c36  00000000  00000000  0002f928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e62b  00000000  00000000  0003155e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a631  00000000  00000000  0003fb89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ca1ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000372c  00000000  00000000  000ca210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b70 	.word	0x08003b70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08003b70 	.word	0x08003b70

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 fb66 	bl	8000830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f80b 	bl	800017e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f8f0 	bl	800034c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800016c:	f000 f89a 	bl	80002a4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000170:	f000 f8c2 	bl	80002f8 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8000174:	f000 f848 	bl	8000208 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
userMain();
 8000178:	f000 fac0 	bl	80006fc <userMain>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800017c:	e7fe      	b.n	800017c <main+0x20>

0800017e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017e:	b580      	push	{r7, lr}
 8000180:	b090      	sub	sp, #64	; 0x40
 8000182:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000184:	f107 0318 	add.w	r3, r7, #24
 8000188:	2228      	movs	r2, #40	; 0x28
 800018a:	2100      	movs	r1, #0
 800018c:	4618      	mov	r0, r3
 800018e:	f003 f8ad 	bl	80032ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000192:	1d3b      	adds	r3, r7, #4
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
 8000198:	605a      	str	r2, [r3, #4]
 800019a:	609a      	str	r2, [r3, #8]
 800019c:	60da      	str	r2, [r3, #12]
 800019e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001a0:	2301      	movs	r3, #1
 80001a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001aa:	2300      	movs	r3, #0
 80001ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ae:	2301      	movs	r3, #1
 80001b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b2:	2302      	movs	r3, #2
 80001b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001bc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c2:	f107 0318 	add.w	r3, r7, #24
 80001c6:	4618      	mov	r0, r3
 80001c8:	f001 f810 	bl	80011ec <HAL_RCC_OscConfig>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d001      	beq.n	80001d6 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001d2:	f000 f913 	bl	80003fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d6:	230f      	movs	r3, #15
 80001d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001da:	2302      	movs	r3, #2
 80001dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001de:	2300      	movs	r3, #0
 80001e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e8:	2300      	movs	r3, #0
 80001ea:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001ec:	1d3b      	adds	r3, r7, #4
 80001ee:	2102      	movs	r1, #2
 80001f0:	4618      	mov	r0, r3
 80001f2:	f001 fb6b 	bl	80018cc <HAL_RCC_ClockConfig>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d001      	beq.n	8000200 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001fc:	f000 f8fe 	bl	80003fc <Error_Handler>
  }
}
 8000200:	bf00      	nop
 8000202:	3740      	adds	r7, #64	; 0x40
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}

08000208 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b086      	sub	sp, #24
 800020c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800020e:	f107 0308 	add.w	r3, r7, #8
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800021c:	463b      	mov	r3, r7
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000224:	4b1d      	ldr	r3, [pc, #116]	; (800029c <MX_TIM4_Init+0x94>)
 8000226:	4a1e      	ldr	r2, [pc, #120]	; (80002a0 <MX_TIM4_Init+0x98>)
 8000228:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4999;
 800022a:	4b1c      	ldr	r3, [pc, #112]	; (800029c <MX_TIM4_Init+0x94>)
 800022c:	f241 3287 	movw	r2, #4999	; 0x1387
 8000230:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000232:	4b1a      	ldr	r3, [pc, #104]	; (800029c <MX_TIM4_Init+0x94>)
 8000234:	2200      	movs	r2, #0
 8000236:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1439;
 8000238:	4b18      	ldr	r3, [pc, #96]	; (800029c <MX_TIM4_Init+0x94>)
 800023a:	f240 529f 	movw	r2, #1439	; 0x59f
 800023e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000240:	4b16      	ldr	r3, [pc, #88]	; (800029c <MX_TIM4_Init+0x94>)
 8000242:	2200      	movs	r2, #0
 8000244:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000246:	4b15      	ldr	r3, [pc, #84]	; (800029c <MX_TIM4_Init+0x94>)
 8000248:	2200      	movs	r2, #0
 800024a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800024c:	4813      	ldr	r0, [pc, #76]	; (800029c <MX_TIM4_Init+0x94>)
 800024e:	f001 fd7d 	bl	8001d4c <HAL_TIM_Base_Init>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000258:	f000 f8d0 	bl	80003fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800025c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000260:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000262:	f107 0308 	add.w	r3, r7, #8
 8000266:	4619      	mov	r1, r3
 8000268:	480c      	ldr	r0, [pc, #48]	; (800029c <MX_TIM4_Init+0x94>)
 800026a:	f001 ff8d 	bl	8002188 <HAL_TIM_ConfigClockSource>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000274:	f000 f8c2 	bl	80003fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000278:	2300      	movs	r3, #0
 800027a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800027c:	2300      	movs	r3, #0
 800027e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000280:	463b      	mov	r3, r7
 8000282:	4619      	mov	r1, r3
 8000284:	4805      	ldr	r0, [pc, #20]	; (800029c <MX_TIM4_Init+0x94>)
 8000286:	f002 fb3f 	bl	8002908 <HAL_TIMEx_MasterConfigSynchronization>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000290:	f000 f8b4 	bl	80003fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000294:	bf00      	nop
 8000296:	3718      	adds	r7, #24
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	200000a8 	.word	0x200000a8
 80002a0:	40000800 	.word	0x40000800

080002a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002a8:	4b11      	ldr	r3, [pc, #68]	; (80002f0 <MX_USART2_UART_Init+0x4c>)
 80002aa:	4a12      	ldr	r2, [pc, #72]	; (80002f4 <MX_USART2_UART_Init+0x50>)
 80002ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002ae:	4b10      	ldr	r3, [pc, #64]	; (80002f0 <MX_USART2_UART_Init+0x4c>)
 80002b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002b6:	4b0e      	ldr	r3, [pc, #56]	; (80002f0 <MX_USART2_UART_Init+0x4c>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002bc:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <MX_USART2_UART_Init+0x4c>)
 80002be:	2200      	movs	r2, #0
 80002c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002c2:	4b0b      	ldr	r3, [pc, #44]	; (80002f0 <MX_USART2_UART_Init+0x4c>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002c8:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <MX_USART2_UART_Init+0x4c>)
 80002ca:	220c      	movs	r2, #12
 80002cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ce:	4b08      	ldr	r3, [pc, #32]	; (80002f0 <MX_USART2_UART_Init+0x4c>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002d4:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <MX_USART2_UART_Init+0x4c>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002da:	4805      	ldr	r0, [pc, #20]	; (80002f0 <MX_USART2_UART_Init+0x4c>)
 80002dc:	f002 fbd0 	bl	8002a80 <HAL_UART_Init>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002e6:	f000 f889 	bl	80003fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002ea:	bf00      	nop
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	20000130 	.word	0x20000130
 80002f4:	40004400 	.word	0x40004400

080002f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80002fc:	4b11      	ldr	r3, [pc, #68]	; (8000344 <MX_USART3_UART_Init+0x4c>)
 80002fe:	4a12      	ldr	r2, [pc, #72]	; (8000348 <MX_USART3_UART_Init+0x50>)
 8000300:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000302:	4b10      	ldr	r3, [pc, #64]	; (8000344 <MX_USART3_UART_Init+0x4c>)
 8000304:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000308:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800030a:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <MX_USART3_UART_Init+0x4c>)
 800030c:	2200      	movs	r2, #0
 800030e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <MX_USART3_UART_Init+0x4c>)
 8000312:	2200      	movs	r2, #0
 8000314:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000316:	4b0b      	ldr	r3, [pc, #44]	; (8000344 <MX_USART3_UART_Init+0x4c>)
 8000318:	2200      	movs	r2, #0
 800031a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800031c:	4b09      	ldr	r3, [pc, #36]	; (8000344 <MX_USART3_UART_Init+0x4c>)
 800031e:	220c      	movs	r2, #12
 8000320:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000322:	4b08      	ldr	r3, [pc, #32]	; (8000344 <MX_USART3_UART_Init+0x4c>)
 8000324:	2200      	movs	r2, #0
 8000326:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <MX_USART3_UART_Init+0x4c>)
 800032a:	2200      	movs	r2, #0
 800032c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800032e:	4805      	ldr	r0, [pc, #20]	; (8000344 <MX_USART3_UART_Init+0x4c>)
 8000330:	f002 fba6 	bl	8002a80 <HAL_UART_Init>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800033a:	f000 f85f 	bl	80003fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	200000f0 	.word	0x200000f0
 8000348:	40004800 	.word	0x40004800

0800034c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b088      	sub	sp, #32
 8000350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000352:	f107 0310 	add.w	r3, r7, #16
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	609a      	str	r2, [r3, #8]
 800035e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000360:	4b24      	ldr	r3, [pc, #144]	; (80003f4 <MX_GPIO_Init+0xa8>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	4a23      	ldr	r2, [pc, #140]	; (80003f4 <MX_GPIO_Init+0xa8>)
 8000366:	f043 0310 	orr.w	r3, r3, #16
 800036a:	6193      	str	r3, [r2, #24]
 800036c:	4b21      	ldr	r3, [pc, #132]	; (80003f4 <MX_GPIO_Init+0xa8>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f003 0310 	and.w	r3, r3, #16
 8000374:	60fb      	str	r3, [r7, #12]
 8000376:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000378:	4b1e      	ldr	r3, [pc, #120]	; (80003f4 <MX_GPIO_Init+0xa8>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a1d      	ldr	r2, [pc, #116]	; (80003f4 <MX_GPIO_Init+0xa8>)
 800037e:	f043 0320 	orr.w	r3, r3, #32
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b1b      	ldr	r3, [pc, #108]	; (80003f4 <MX_GPIO_Init+0xa8>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0320 	and.w	r3, r3, #32
 800038c:	60bb      	str	r3, [r7, #8]
 800038e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000390:	4b18      	ldr	r3, [pc, #96]	; (80003f4 <MX_GPIO_Init+0xa8>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a17      	ldr	r2, [pc, #92]	; (80003f4 <MX_GPIO_Init+0xa8>)
 8000396:	f043 0304 	orr.w	r3, r3, #4
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b15      	ldr	r3, [pc, #84]	; (80003f4 <MX_GPIO_Init+0xa8>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0304 	and.w	r3, r3, #4
 80003a4:	607b      	str	r3, [r7, #4]
 80003a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a8:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <MX_GPIO_Init+0xa8>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a11      	ldr	r2, [pc, #68]	; (80003f4 <MX_GPIO_Init+0xa8>)
 80003ae:	f043 0308 	orr.w	r3, r3, #8
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <MX_GPIO_Init+0xa8>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0308 	and.w	r3, r3, #8
 80003bc:	603b      	str	r3, [r7, #0]
 80003be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003c0:	2200      	movs	r2, #0
 80003c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003c6:	480c      	ldr	r0, [pc, #48]	; (80003f8 <MX_GPIO_Init+0xac>)
 80003c8:	f000 feb6 	bl	8001138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d2:	2301      	movs	r3, #1
 80003d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d6:	2300      	movs	r3, #0
 80003d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003da:	2302      	movs	r3, #2
 80003dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003de:	f107 0310 	add.w	r3, r7, #16
 80003e2:	4619      	mov	r1, r3
 80003e4:	4804      	ldr	r0, [pc, #16]	; (80003f8 <MX_GPIO_Init+0xac>)
 80003e6:	f000 fc37 	bl	8000c58 <HAL_GPIO_Init>

}
 80003ea:	bf00      	nop
 80003ec:	3720      	adds	r7, #32
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	40021000 	.word	0x40021000
 80003f8:	40011000 	.word	0x40011000

080003fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000400:	b672      	cpsid	i
}
 8000402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000404:	e7fe      	b.n	8000404 <Error_Handler+0x8>

08000406 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000406:	b480      	push	{r7}
 8000408:	b083      	sub	sp, #12
 800040a:	af00      	add	r7, sp, #0
 800040c:	6078      	str	r0, [r7, #4]
 800040e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000410:	bf00      	nop
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	bc80      	pop	{r7}
 8000418:	4770      	bx	lr
	...

0800041c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000422:	4b15      	ldr	r3, [pc, #84]	; (8000478 <HAL_MspInit+0x5c>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	4a14      	ldr	r2, [pc, #80]	; (8000478 <HAL_MspInit+0x5c>)
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	6193      	str	r3, [r2, #24]
 800042e:	4b12      	ldr	r3, [pc, #72]	; (8000478 <HAL_MspInit+0x5c>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	60bb      	str	r3, [r7, #8]
 8000438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800043a:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <HAL_MspInit+0x5c>)
 800043c:	69db      	ldr	r3, [r3, #28]
 800043e:	4a0e      	ldr	r2, [pc, #56]	; (8000478 <HAL_MspInit+0x5c>)
 8000440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000444:	61d3      	str	r3, [r2, #28]
 8000446:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <HAL_MspInit+0x5c>)
 8000448:	69db      	ldr	r3, [r3, #28]
 800044a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000452:	4b0a      	ldr	r3, [pc, #40]	; (800047c <HAL_MspInit+0x60>)
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	4a04      	ldr	r2, [pc, #16]	; (800047c <HAL_MspInit+0x60>)
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046e:	bf00      	nop
 8000470:	3714      	adds	r7, #20
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr
 8000478:	40021000 	.word	0x40021000
 800047c:	40010000 	.word	0x40010000

08000480 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a0d      	ldr	r2, [pc, #52]	; (80004c4 <HAL_TIM_Base_MspInit+0x44>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d113      	bne.n	80004ba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000492:	4b0d      	ldr	r3, [pc, #52]	; (80004c8 <HAL_TIM_Base_MspInit+0x48>)
 8000494:	69db      	ldr	r3, [r3, #28]
 8000496:	4a0c      	ldr	r2, [pc, #48]	; (80004c8 <HAL_TIM_Base_MspInit+0x48>)
 8000498:	f043 0304 	orr.w	r3, r3, #4
 800049c:	61d3      	str	r3, [r2, #28]
 800049e:	4b0a      	ldr	r3, [pc, #40]	; (80004c8 <HAL_TIM_Base_MspInit+0x48>)
 80004a0:	69db      	ldr	r3, [r3, #28]
 80004a2:	f003 0304 	and.w	r3, r3, #4
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80004aa:	2200      	movs	r2, #0
 80004ac:	2100      	movs	r1, #0
 80004ae:	201e      	movs	r0, #30
 80004b0:	f000 fb0c 	bl	8000acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80004b4:	201e      	movs	r0, #30
 80004b6:	f000 fb35 	bl	8000b24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80004ba:	bf00      	nop
 80004bc:	3710      	adds	r7, #16
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	40000800 	.word	0x40000800
 80004c8:	40021000 	.word	0x40021000

080004cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	; 0x28
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	f107 0318 	add.w	r3, r7, #24
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a3f      	ldr	r2, [pc, #252]	; (80005e4 <HAL_UART_MspInit+0x118>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d138      	bne.n	800055e <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004ec:	4b3e      	ldr	r3, [pc, #248]	; (80005e8 <HAL_UART_MspInit+0x11c>)
 80004ee:	69db      	ldr	r3, [r3, #28]
 80004f0:	4a3d      	ldr	r2, [pc, #244]	; (80005e8 <HAL_UART_MspInit+0x11c>)
 80004f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004f6:	61d3      	str	r3, [r2, #28]
 80004f8:	4b3b      	ldr	r3, [pc, #236]	; (80005e8 <HAL_UART_MspInit+0x11c>)
 80004fa:	69db      	ldr	r3, [r3, #28]
 80004fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000500:	617b      	str	r3, [r7, #20]
 8000502:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000504:	4b38      	ldr	r3, [pc, #224]	; (80005e8 <HAL_UART_MspInit+0x11c>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	4a37      	ldr	r2, [pc, #220]	; (80005e8 <HAL_UART_MspInit+0x11c>)
 800050a:	f043 0304 	orr.w	r3, r3, #4
 800050e:	6193      	str	r3, [r2, #24]
 8000510:	4b35      	ldr	r3, [pc, #212]	; (80005e8 <HAL_UART_MspInit+0x11c>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f003 0304 	and.w	r3, r3, #4
 8000518:	613b      	str	r3, [r7, #16]
 800051a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800051c:	2304      	movs	r3, #4
 800051e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000520:	2302      	movs	r3, #2
 8000522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000524:	2303      	movs	r3, #3
 8000526:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000528:	f107 0318 	add.w	r3, r7, #24
 800052c:	4619      	mov	r1, r3
 800052e:	482f      	ldr	r0, [pc, #188]	; (80005ec <HAL_UART_MspInit+0x120>)
 8000530:	f000 fb92 	bl	8000c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000534:	2308      	movs	r3, #8
 8000536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000538:	2300      	movs	r3, #0
 800053a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053c:	2300      	movs	r3, #0
 800053e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000540:	f107 0318 	add.w	r3, r7, #24
 8000544:	4619      	mov	r1, r3
 8000546:	4829      	ldr	r0, [pc, #164]	; (80005ec <HAL_UART_MspInit+0x120>)
 8000548:	f000 fb86 	bl	8000c58 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800054c:	2200      	movs	r2, #0
 800054e:	2100      	movs	r1, #0
 8000550:	2026      	movs	r0, #38	; 0x26
 8000552:	f000 fabb 	bl	8000acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000556:	2026      	movs	r0, #38	; 0x26
 8000558:	f000 fae4 	bl	8000b24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800055c:	e03e      	b.n	80005dc <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART3)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a23      	ldr	r2, [pc, #140]	; (80005f0 <HAL_UART_MspInit+0x124>)
 8000564:	4293      	cmp	r3, r2
 8000566:	d139      	bne.n	80005dc <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000568:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <HAL_UART_MspInit+0x11c>)
 800056a:	69db      	ldr	r3, [r3, #28]
 800056c:	4a1e      	ldr	r2, [pc, #120]	; (80005e8 <HAL_UART_MspInit+0x11c>)
 800056e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000572:	61d3      	str	r3, [r2, #28]
 8000574:	4b1c      	ldr	r3, [pc, #112]	; (80005e8 <HAL_UART_MspInit+0x11c>)
 8000576:	69db      	ldr	r3, [r3, #28]
 8000578:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000580:	4b19      	ldr	r3, [pc, #100]	; (80005e8 <HAL_UART_MspInit+0x11c>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	4a18      	ldr	r2, [pc, #96]	; (80005e8 <HAL_UART_MspInit+0x11c>)
 8000586:	f043 0308 	orr.w	r3, r3, #8
 800058a:	6193      	str	r3, [r2, #24]
 800058c:	4b16      	ldr	r3, [pc, #88]	; (80005e8 <HAL_UART_MspInit+0x11c>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	f003 0308 	and.w	r3, r3, #8
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000598:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800059c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800059e:	2302      	movs	r3, #2
 80005a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005a2:	2303      	movs	r3, #3
 80005a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a6:	f107 0318 	add.w	r3, r7, #24
 80005aa:	4619      	mov	r1, r3
 80005ac:	4811      	ldr	r0, [pc, #68]	; (80005f4 <HAL_UART_MspInit+0x128>)
 80005ae:	f000 fb53 	bl	8000c58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80005b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c0:	f107 0318 	add.w	r3, r7, #24
 80005c4:	4619      	mov	r1, r3
 80005c6:	480b      	ldr	r0, [pc, #44]	; (80005f4 <HAL_UART_MspInit+0x128>)
 80005c8:	f000 fb46 	bl	8000c58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2100      	movs	r1, #0
 80005d0:	2027      	movs	r0, #39	; 0x27
 80005d2:	f000 fa7b 	bl	8000acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80005d6:	2027      	movs	r0, #39	; 0x27
 80005d8:	f000 faa4 	bl	8000b24 <HAL_NVIC_EnableIRQ>
}
 80005dc:	bf00      	nop
 80005de:	3728      	adds	r7, #40	; 0x28
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40004400 	.word	0x40004400
 80005e8:	40021000 	.word	0x40021000
 80005ec:	40010800 	.word	0x40010800
 80005f0:	40004800 	.word	0x40004800
 80005f4:	40010c00 	.word	0x40010c00

080005f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <NMI_Handler+0x4>

080005fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005fe:	b480      	push	{r7}
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000602:	e7fe      	b.n	8000602 <HardFault_Handler+0x4>

08000604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000608:	e7fe      	b.n	8000608 <MemManage_Handler+0x4>

0800060a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800060e:	e7fe      	b.n	800060e <BusFault_Handler+0x4>

08000610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000614:	e7fe      	b.n	8000614 <UsageFault_Handler+0x4>

08000616 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800061a:	bf00      	nop
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr

08000622 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr

0800062e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr

0800063a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800063e:	f000 f93d 	bl	80008bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800064c:	4802      	ldr	r0, [pc, #8]	; (8000658 <TIM4_IRQHandler+0x10>)
 800064e:	f001 fc93 	bl	8001f78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	200000a8 	.word	0x200000a8

0800065c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000660:	4802      	ldr	r0, [pc, #8]	; (800066c <USART2_IRQHandler+0x10>)
 8000662:	f002 faf9 	bl	8002c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000130 	.word	0x20000130

08000670 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000674:	4802      	ldr	r0, [pc, #8]	; (8000680 <USART3_IRQHandler+0x10>)
 8000676:	f002 faef 	bl	8002c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200000f0 	.word	0x200000f0

08000684 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800068c:	4a14      	ldr	r2, [pc, #80]	; (80006e0 <_sbrk+0x5c>)
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <_sbrk+0x60>)
 8000690:	1ad3      	subs	r3, r2, r3
 8000692:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000698:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <_sbrk+0x64>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d102      	bne.n	80006a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <_sbrk+0x64>)
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <_sbrk+0x68>)
 80006a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006a6:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <_sbrk+0x64>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4413      	add	r3, r2
 80006ae:	693a      	ldr	r2, [r7, #16]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d207      	bcs.n	80006c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006b4:	f002 fdda 	bl	800326c <__errno>
 80006b8:	4603      	mov	r3, r0
 80006ba:	220c      	movs	r2, #12
 80006bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006c2:	e009      	b.n	80006d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <_sbrk+0x64>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ca:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <_sbrk+0x64>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4413      	add	r3, r2
 80006d2:	4a05      	ldr	r2, [pc, #20]	; (80006e8 <_sbrk+0x64>)
 80006d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006d6:	68fb      	ldr	r3, [r7, #12]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3718      	adds	r7, #24
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20005000 	.word	0x20005000
 80006e4:	00000400 	.word	0x00000400
 80006e8:	20000094 	.word	0x20000094
 80006ec:	20000188 	.word	0x20000188

080006f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr

080006fc <userMain>:
unsigned counter_IT = 0;
uint16_t message_counter = 0;
char *message_welcome = "\n\n\r_____WELCOME_____\n\n\r";

void userMain()
{
 80006fc:	b598      	push	{r3, r4, r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	// init
	init_TIM_IT(&htim4);
 8000700:	4809      	ldr	r0, [pc, #36]	; (8000728 <userMain+0x2c>)
 8000702:	f000 f817 	bl	8000734 <init_TIM_IT>

	// welcome message
	HAL_UART_Transmit_IT(&huart3, message_welcome, (uint8_t)strlen(message_welcome));
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <userMain+0x30>)
 8000708:	681c      	ldr	r4, [r3, #0]
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <userMain+0x30>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff fd1c 	bl	800014c <strlen>
 8000714:	4603      	mov	r3, r0
 8000716:	b2db      	uxtb	r3, r3
 8000718:	b29b      	uxth	r3, r3
 800071a:	461a      	mov	r2, r3
 800071c:	4621      	mov	r1, r4
 800071e:	4804      	ldr	r0, [pc, #16]	; (8000730 <userMain+0x34>)
 8000720:	f002 fa56 	bl	8002bd0 <HAL_UART_Transmit_IT>
}
 8000724:	bf00      	nop
 8000726:	bd98      	pop	{r3, r4, r7, pc}
 8000728:	200000a8 	.word	0x200000a8
 800072c:	20000004 	.word	0x20000004
 8000730:	200000f0 	.word	0x200000f0

08000734 <init_TIM_IT>:

void init_TIM_IT(TIM_HandleTypeDef *timer)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(timer);
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f001 fbaf 	bl	8001ea0 <HAL_TIM_Base_Start_IT>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <HAL_TIM_PeriodElapsedCallback>:
}

uint16_t msg_len = 80;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)	// 10Hz
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]

	if(counter_IT % 1 == 0 && htim->Instance == TIM4)		// 10Hz
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a1b      	ldr	r2, [pc, #108]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d12a      	bne.n	80007b4 <HAL_TIM_PeriodElapsedCallback+0x68>
	{
		uint8_t *msg = (uint8_t*)calloc(msg_len, sizeof(uint8_t));
 800075e:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000760:	881b      	ldrh	r3, [r3, #0]
 8000762:	2101      	movs	r1, #1
 8000764:	4618      	mov	r0, r3
 8000766:	f002 fd79 	bl	800325c <calloc>
 800076a:	4603      	mov	r3, r0
 800076c:	60fb      	str	r3, [r7, #12]

		// create & transmit message
		msg_len = sprintf(msg, "Ty piszesz program, a Lewandowski strzelil juz %d goli.\r\n", message_counter);
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	461a      	mov	r2, r3
 8000774:	4917      	ldr	r1, [pc, #92]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000776:	68f8      	ldr	r0, [r7, #12]
 8000778:	f002 fe84 	bl	8003484 <siprintf>
 800077c:	4603      	mov	r3, r0
 800077e:	b29a      	uxth	r2, r3
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000782:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, msg, msg_len);
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	461a      	mov	r2, r3
 800078a:	68f9      	ldr	r1, [r7, #12]
 800078c:	4812      	ldr	r0, [pc, #72]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800078e:	f002 fa1f 	bl	8002bd0 <HAL_UART_Transmit_IT>

		free(msg);
 8000792:	68f8      	ldr	r0, [r7, #12]
 8000794:	f002 fd94 	bl	80032c0 <free>

		// blink
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000798:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800079c:	480f      	ldr	r0, [pc, #60]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x90>)
 800079e:	f000 fcfd 	bl	800119c <HAL_GPIO_TogglePin>
		counter_IT = 0;
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
		message_counter++;
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	3301      	adds	r3, #1
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80007b2:	801a      	strh	r2, [r3, #0]
	}
	counter_IT++;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	3301      	adds	r3, #1
 80007ba:	4a09      	ldr	r2, [pc, #36]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80007bc:	6013      	str	r3, [r2, #0]
}
 80007be:	bf00      	nop
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40000800 	.word	0x40000800
 80007cc:	20000008 	.word	0x20000008
 80007d0:	2000009c 	.word	0x2000009c
 80007d4:	08003ba0 	.word	0x08003ba0
 80007d8:	200000f0 	.word	0x200000f0
 80007dc:	40011000 	.word	0x40011000
 80007e0:	20000098 	.word	0x20000098

080007e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80007e4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007e6:	e003      	b.n	80007f0 <LoopCopyDataInit>

080007e8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007e8:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80007ea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80007ec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80007ee:	3104      	adds	r1, #4

080007f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80007f0:	480a      	ldr	r0, [pc, #40]	; (800081c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80007f4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007f6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007f8:	d3f6      	bcc.n	80007e8 <CopyDataInit>
  ldr r2, =_sbss
 80007fa:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80007fc:	e002      	b.n	8000804 <LoopFillZerobss>

080007fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000800:	f842 3b04 	str.w	r3, [r2], #4

08000804 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000806:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000808:	d3f9      	bcc.n	80007fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800080a:	f7ff ff71 	bl	80006f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800080e:	f002 fd33 	bl	8003278 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000812:	f7ff fca3 	bl	800015c <main>
  bx lr
 8000816:	4770      	bx	lr
  ldr r3, =_sidata
 8000818:	08003e00 	.word	0x08003e00
  ldr r0, =_sdata
 800081c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000820:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8000824:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8000828:	20000184 	.word	0x20000184

0800082c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800082c:	e7fe      	b.n	800082c <ADC1_2_IRQHandler>
	...

08000830 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <HAL_Init+0x28>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a07      	ldr	r2, [pc, #28]	; (8000858 <HAL_Init+0x28>)
 800083a:	f043 0310 	orr.w	r3, r3, #16
 800083e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000840:	2003      	movs	r0, #3
 8000842:	f000 f923 	bl	8000a8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000846:	2000      	movs	r0, #0
 8000848:	f000 f808 	bl	800085c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800084c:	f7ff fde6 	bl	800041c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000850:	2300      	movs	r3, #0
}
 8000852:	4618      	mov	r0, r3
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40022000 	.word	0x40022000

0800085c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <HAL_InitTick+0x54>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <HAL_InitTick+0x58>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	4619      	mov	r1, r3
 800086e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000872:	fbb3 f3f1 	udiv	r3, r3, r1
 8000876:	fbb2 f3f3 	udiv	r3, r2, r3
 800087a:	4618      	mov	r0, r3
 800087c:	f000 f96a 	bl	8000b54 <HAL_SYSTICK_Config>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000886:	2301      	movs	r3, #1
 8000888:	e00e      	b.n	80008a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2b0f      	cmp	r3, #15
 800088e:	d80a      	bhi.n	80008a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000890:	2200      	movs	r2, #0
 8000892:	6879      	ldr	r1, [r7, #4]
 8000894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000898:	f000 f918 	bl	8000acc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800089c:	4a06      	ldr	r2, [pc, #24]	; (80008b8 <HAL_InitTick+0x5c>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008a2:	2300      	movs	r3, #0
 80008a4:	e000      	b.n	80008a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000000 	.word	0x20000000
 80008b4:	20000010 	.word	0x20000010
 80008b8:	2000000c 	.word	0x2000000c

080008bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c0:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <HAL_IncTick+0x1c>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	461a      	mov	r2, r3
 80008c6:	4b05      	ldr	r3, [pc, #20]	; (80008dc <HAL_IncTick+0x20>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4413      	add	r3, r2
 80008cc:	4a03      	ldr	r2, [pc, #12]	; (80008dc <HAL_IncTick+0x20>)
 80008ce:	6013      	str	r3, [r2, #0]
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr
 80008d8:	20000010 	.word	0x20000010
 80008dc:	20000170 	.word	0x20000170

080008e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return uwTick;
 80008e4:	4b02      	ldr	r3, [pc, #8]	; (80008f0 <HAL_GetTick+0x10>)
 80008e6:	681b      	ldr	r3, [r3, #0]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	20000170 	.word	0x20000170

080008f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	f003 0307 	and.w	r3, r3, #7
 8000902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <__NVIC_SetPriorityGrouping+0x44>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000910:	4013      	ands	r3, r2
 8000912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800091c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000926:	4a04      	ldr	r2, [pc, #16]	; (8000938 <__NVIC_SetPriorityGrouping+0x44>)
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	60d3      	str	r3, [r2, #12]
}
 800092c:	bf00      	nop
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000940:	4b04      	ldr	r3, [pc, #16]	; (8000954 <__NVIC_GetPriorityGrouping+0x18>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	0a1b      	lsrs	r3, r3, #8
 8000946:	f003 0307 	and.w	r3, r3, #7
}
 800094a:	4618      	mov	r0, r3
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	2b00      	cmp	r3, #0
 8000968:	db0b      	blt.n	8000982 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	f003 021f 	and.w	r2, r3, #31
 8000970:	4906      	ldr	r1, [pc, #24]	; (800098c <__NVIC_EnableIRQ+0x34>)
 8000972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000976:	095b      	lsrs	r3, r3, #5
 8000978:	2001      	movs	r0, #1
 800097a:	fa00 f202 	lsl.w	r2, r0, r2
 800097e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	e000e100 	.word	0xe000e100

08000990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	6039      	str	r1, [r7, #0]
 800099a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800099c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	db0a      	blt.n	80009ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	490c      	ldr	r1, [pc, #48]	; (80009dc <__NVIC_SetPriority+0x4c>)
 80009aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ae:	0112      	lsls	r2, r2, #4
 80009b0:	b2d2      	uxtb	r2, r2
 80009b2:	440b      	add	r3, r1
 80009b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009b8:	e00a      	b.n	80009d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	4908      	ldr	r1, [pc, #32]	; (80009e0 <__NVIC_SetPriority+0x50>)
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	f003 030f 	and.w	r3, r3, #15
 80009c6:	3b04      	subs	r3, #4
 80009c8:	0112      	lsls	r2, r2, #4
 80009ca:	b2d2      	uxtb	r2, r2
 80009cc:	440b      	add	r3, r1
 80009ce:	761a      	strb	r2, [r3, #24]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000e100 	.word	0xe000e100
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b089      	sub	sp, #36	; 0x24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	f1c3 0307 	rsb	r3, r3, #7
 80009fe:	2b04      	cmp	r3, #4
 8000a00:	bf28      	it	cs
 8000a02:	2304      	movcs	r3, #4
 8000a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	2b06      	cmp	r3, #6
 8000a0c:	d902      	bls.n	8000a14 <NVIC_EncodePriority+0x30>
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	3b03      	subs	r3, #3
 8000a12:	e000      	b.n	8000a16 <NVIC_EncodePriority+0x32>
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	43da      	mvns	r2, r3
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	401a      	ands	r2, r3
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	fa01 f303 	lsl.w	r3, r1, r3
 8000a36:	43d9      	mvns	r1, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a3c:	4313      	orrs	r3, r2
         );
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3724      	adds	r7, #36	; 0x24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr

08000a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a58:	d301      	bcc.n	8000a5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e00f      	b.n	8000a7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <SysTick_Config+0x40>)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a66:	210f      	movs	r1, #15
 8000a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a6c:	f7ff ff90 	bl	8000990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <SysTick_Config+0x40>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a76:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <SysTick_Config+0x40>)
 8000a78:	2207      	movs	r2, #7
 8000a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	e000e010 	.word	0xe000e010

08000a8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b07      	cmp	r3, #7
 8000a98:	d00f      	beq.n	8000aba <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b06      	cmp	r3, #6
 8000a9e:	d00c      	beq.n	8000aba <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b05      	cmp	r3, #5
 8000aa4:	d009      	beq.n	8000aba <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b04      	cmp	r3, #4
 8000aaa:	d006      	beq.n	8000aba <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2b03      	cmp	r3, #3
 8000ab0:	d003      	beq.n	8000aba <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ab2:	2192      	movs	r1, #146	; 0x92
 8000ab4:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000ab6:	f7ff fca6 	bl	8000406 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff ff1a 	bl	80008f4 <__NVIC_SetPriorityGrouping>
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	08003bdc 	.word	0x08003bdc

08000acc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
 8000ad8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b0f      	cmp	r3, #15
 8000ae2:	d903      	bls.n	8000aec <HAL_NVIC_SetPriority+0x20>
 8000ae4:	21aa      	movs	r1, #170	; 0xaa
 8000ae6:	480e      	ldr	r0, [pc, #56]	; (8000b20 <HAL_NVIC_SetPriority+0x54>)
 8000ae8:	f7ff fc8d 	bl	8000406 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	2b0f      	cmp	r3, #15
 8000af0:	d903      	bls.n	8000afa <HAL_NVIC_SetPriority+0x2e>
 8000af2:	21ab      	movs	r1, #171	; 0xab
 8000af4:	480a      	ldr	r0, [pc, #40]	; (8000b20 <HAL_NVIC_SetPriority+0x54>)
 8000af6:	f7ff fc86 	bl	8000406 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000afa:	f7ff ff1f 	bl	800093c <__NVIC_GetPriorityGrouping>
 8000afe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	68b9      	ldr	r1, [r7, #8]
 8000b04:	6978      	ldr	r0, [r7, #20]
 8000b06:	f7ff ff6d 	bl	80009e4 <NVIC_EncodePriority>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b10:	4611      	mov	r1, r2
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff ff3c 	bl	8000990 <__NVIC_SetPriority>
}
 8000b18:	bf00      	nop
 8000b1a:	3718      	adds	r7, #24
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	08003bdc 	.word	0x08003bdc

08000b24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	da03      	bge.n	8000b3e <HAL_NVIC_EnableIRQ+0x1a>
 8000b36:	21be      	movs	r1, #190	; 0xbe
 8000b38:	4805      	ldr	r0, [pc, #20]	; (8000b50 <HAL_NVIC_EnableIRQ+0x2c>)
 8000b3a:	f7ff fc64 	bl	8000406 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff ff08 	bl	8000958 <__NVIC_EnableIRQ>
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	08003bdc 	.word	0x08003bdc

08000b54 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff ff73 	bl	8000a48 <SysTick_Config>
 8000b62:	4603      	mov	r3, r0
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b74:	2300      	movs	r3, #0
 8000b76:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	d005      	beq.n	8000b8e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2204      	movs	r2, #4
 8000b86:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	73fb      	strb	r3, [r7, #15]
 8000b8c:	e051      	b.n	8000c32 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f022 020e 	bic.w	r2, r2, #14
 8000b9c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f022 0201 	bic.w	r2, r2, #1
 8000bac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a22      	ldr	r2, [pc, #136]	; (8000c3c <HAL_DMA_Abort_IT+0xd0>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d029      	beq.n	8000c0c <HAL_DMA_Abort_IT+0xa0>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a20      	ldr	r2, [pc, #128]	; (8000c40 <HAL_DMA_Abort_IT+0xd4>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d022      	beq.n	8000c08 <HAL_DMA_Abort_IT+0x9c>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a1f      	ldr	r2, [pc, #124]	; (8000c44 <HAL_DMA_Abort_IT+0xd8>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d01a      	beq.n	8000c02 <HAL_DMA_Abort_IT+0x96>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a1d      	ldr	r2, [pc, #116]	; (8000c48 <HAL_DMA_Abort_IT+0xdc>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d012      	beq.n	8000bfc <HAL_DMA_Abort_IT+0x90>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a1c      	ldr	r2, [pc, #112]	; (8000c4c <HAL_DMA_Abort_IT+0xe0>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d00a      	beq.n	8000bf6 <HAL_DMA_Abort_IT+0x8a>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a1a      	ldr	r2, [pc, #104]	; (8000c50 <HAL_DMA_Abort_IT+0xe4>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d102      	bne.n	8000bf0 <HAL_DMA_Abort_IT+0x84>
 8000bea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000bee:	e00e      	b.n	8000c0e <HAL_DMA_Abort_IT+0xa2>
 8000bf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bf4:	e00b      	b.n	8000c0e <HAL_DMA_Abort_IT+0xa2>
 8000bf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bfa:	e008      	b.n	8000c0e <HAL_DMA_Abort_IT+0xa2>
 8000bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c00:	e005      	b.n	8000c0e <HAL_DMA_Abort_IT+0xa2>
 8000c02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c06:	e002      	b.n	8000c0e <HAL_DMA_Abort_IT+0xa2>
 8000c08:	2310      	movs	r3, #16
 8000c0a:	e000      	b.n	8000c0e <HAL_DMA_Abort_IT+0xa2>
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	4a11      	ldr	r2, [pc, #68]	; (8000c54 <HAL_DMA_Abort_IT+0xe8>)
 8000c10:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2201      	movs	r2, #1
 8000c16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d003      	beq.n	8000c32 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	4798      	blx	r3
    } 
  }
  return status;
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40020008 	.word	0x40020008
 8000c40:	4002001c 	.word	0x4002001c
 8000c44:	40020030 	.word	0x40020030
 8000c48:	40020044 	.word	0x40020044
 8000c4c:	40020058 	.word	0x40020058
 8000c50:	4002006c 	.word	0x4002006c
 8000c54:	40020000 	.word	0x40020000

08000c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c62:	2300      	movs	r3, #0
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c66:	2300      	movs	r3, #0
 8000c68:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4aa1      	ldr	r2, [pc, #644]	; (8000ef4 <HAL_GPIO_Init+0x29c>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d013      	beq.n	8000c9a <HAL_GPIO_Init+0x42>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4aa0      	ldr	r2, [pc, #640]	; (8000ef8 <HAL_GPIO_Init+0x2a0>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d00f      	beq.n	8000c9a <HAL_GPIO_Init+0x42>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a9f      	ldr	r2, [pc, #636]	; (8000efc <HAL_GPIO_Init+0x2a4>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d00b      	beq.n	8000c9a <HAL_GPIO_Init+0x42>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a9e      	ldr	r2, [pc, #632]	; (8000f00 <HAL_GPIO_Init+0x2a8>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d007      	beq.n	8000c9a <HAL_GPIO_Init+0x42>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a9d      	ldr	r2, [pc, #628]	; (8000f04 <HAL_GPIO_Init+0x2ac>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d003      	beq.n	8000c9a <HAL_GPIO_Init+0x42>
 8000c92:	21bd      	movs	r1, #189	; 0xbd
 8000c94:	489c      	ldr	r0, [pc, #624]	; (8000f08 <HAL_GPIO_Init+0x2b0>)
 8000c96:	f7ff fbb6 	bl	8000406 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d005      	beq.n	8000cb0 <HAL_GPIO_Init+0x58>
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	0c1b      	lsrs	r3, r3, #16
 8000caa:	041b      	lsls	r3, r3, #16
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d003      	beq.n	8000cb8 <HAL_GPIO_Init+0x60>
 8000cb0:	21be      	movs	r1, #190	; 0xbe
 8000cb2:	4895      	ldr	r0, [pc, #596]	; (8000f08 <HAL_GPIO_Init+0x2b0>)
 8000cb4:	f7ff fba7 	bl	8000406 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	f000 821d 	beq.w	80010fc <HAL_GPIO_Init+0x4a4>
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	f000 8218 	beq.w	80010fc <HAL_GPIO_Init+0x4a4>
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	2b11      	cmp	r3, #17
 8000cd2:	f000 8213 	beq.w	80010fc <HAL_GPIO_Init+0x4a4>
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	f000 820e 	beq.w	80010fc <HAL_GPIO_Init+0x4a4>
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	2b12      	cmp	r3, #18
 8000ce6:	f000 8209 	beq.w	80010fc <HAL_GPIO_Init+0x4a4>
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	4a87      	ldr	r2, [pc, #540]	; (8000f0c <HAL_GPIO_Init+0x2b4>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	f000 8203 	beq.w	80010fc <HAL_GPIO_Init+0x4a4>
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	4a85      	ldr	r2, [pc, #532]	; (8000f10 <HAL_GPIO_Init+0x2b8>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	f000 81fd 	beq.w	80010fc <HAL_GPIO_Init+0x4a4>
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	4a83      	ldr	r2, [pc, #524]	; (8000f14 <HAL_GPIO_Init+0x2bc>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	f000 81f7 	beq.w	80010fc <HAL_GPIO_Init+0x4a4>
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	4a81      	ldr	r2, [pc, #516]	; (8000f18 <HAL_GPIO_Init+0x2c0>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	f000 81f1 	beq.w	80010fc <HAL_GPIO_Init+0x4a4>
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	4a7f      	ldr	r2, [pc, #508]	; (8000f1c <HAL_GPIO_Init+0x2c4>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	f000 81eb 	beq.w	80010fc <HAL_GPIO_Init+0x4a4>
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	4a7d      	ldr	r2, [pc, #500]	; (8000f20 <HAL_GPIO_Init+0x2c8>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	f000 81e5 	beq.w	80010fc <HAL_GPIO_Init+0x4a4>
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	2b03      	cmp	r3, #3
 8000d38:	f000 81e0 	beq.w	80010fc <HAL_GPIO_Init+0x4a4>
 8000d3c:	21bf      	movs	r1, #191	; 0xbf
 8000d3e:	4872      	ldr	r0, [pc, #456]	; (8000f08 <HAL_GPIO_Init+0x2b0>)
 8000d40:	f7ff fb61 	bl	8000406 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d44:	e1da      	b.n	80010fc <HAL_GPIO_Init+0x4a4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d46:	2201      	movs	r2, #1
 8000d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	69fa      	ldr	r2, [r7, #28]
 8000d56:	4013      	ands	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	f040 81c9 	bne.w	80010f6 <HAL_GPIO_Init+0x49e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a63      	ldr	r2, [pc, #396]	; (8000ef4 <HAL_GPIO_Init+0x29c>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d013      	beq.n	8000d94 <HAL_GPIO_Init+0x13c>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a62      	ldr	r2, [pc, #392]	; (8000ef8 <HAL_GPIO_Init+0x2a0>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d00f      	beq.n	8000d94 <HAL_GPIO_Init+0x13c>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a61      	ldr	r2, [pc, #388]	; (8000efc <HAL_GPIO_Init+0x2a4>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d00b      	beq.n	8000d94 <HAL_GPIO_Init+0x13c>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4a60      	ldr	r2, [pc, #384]	; (8000f00 <HAL_GPIO_Init+0x2a8>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d007      	beq.n	8000d94 <HAL_GPIO_Init+0x13c>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a5f      	ldr	r2, [pc, #380]	; (8000f04 <HAL_GPIO_Init+0x2ac>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d003      	beq.n	8000d94 <HAL_GPIO_Init+0x13c>
 8000d8c:	21cd      	movs	r1, #205	; 0xcd
 8000d8e:	485e      	ldr	r0, [pc, #376]	; (8000f08 <HAL_GPIO_Init+0x2b0>)
 8000d90:	f7ff fb39 	bl	8000406 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	4a61      	ldr	r2, [pc, #388]	; (8000f20 <HAL_GPIO_Init+0x2c8>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	f000 80c2 	beq.w	8000f24 <HAL_GPIO_Init+0x2cc>
 8000da0:	4a5f      	ldr	r2, [pc, #380]	; (8000f20 <HAL_GPIO_Init+0x2c8>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	f200 80e8 	bhi.w	8000f78 <HAL_GPIO_Init+0x320>
 8000da8:	4a5a      	ldr	r2, [pc, #360]	; (8000f14 <HAL_GPIO_Init+0x2bc>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	f000 80ba 	beq.w	8000f24 <HAL_GPIO_Init+0x2cc>
 8000db0:	4a58      	ldr	r2, [pc, #352]	; (8000f14 <HAL_GPIO_Init+0x2bc>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	f200 80e0 	bhi.w	8000f78 <HAL_GPIO_Init+0x320>
 8000db8:	4a58      	ldr	r2, [pc, #352]	; (8000f1c <HAL_GPIO_Init+0x2c4>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	f000 80b2 	beq.w	8000f24 <HAL_GPIO_Init+0x2cc>
 8000dc0:	4a56      	ldr	r2, [pc, #344]	; (8000f1c <HAL_GPIO_Init+0x2c4>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	f200 80d8 	bhi.w	8000f78 <HAL_GPIO_Init+0x320>
 8000dc8:	4a51      	ldr	r2, [pc, #324]	; (8000f10 <HAL_GPIO_Init+0x2b8>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	f000 80aa 	beq.w	8000f24 <HAL_GPIO_Init+0x2cc>
 8000dd0:	4a4f      	ldr	r2, [pc, #316]	; (8000f10 <HAL_GPIO_Init+0x2b8>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	f200 80d0 	bhi.w	8000f78 <HAL_GPIO_Init+0x320>
 8000dd8:	4a4f      	ldr	r2, [pc, #316]	; (8000f18 <HAL_GPIO_Init+0x2c0>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	f000 80a2 	beq.w	8000f24 <HAL_GPIO_Init+0x2cc>
 8000de0:	4a4d      	ldr	r2, [pc, #308]	; (8000f18 <HAL_GPIO_Init+0x2c0>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	f200 80c8 	bhi.w	8000f78 <HAL_GPIO_Init+0x320>
 8000de8:	2b12      	cmp	r3, #18
 8000dea:	d82b      	bhi.n	8000e44 <HAL_GPIO_Init+0x1ec>
 8000dec:	2b12      	cmp	r3, #18
 8000dee:	f200 80c3 	bhi.w	8000f78 <HAL_GPIO_Init+0x320>
 8000df2:	a201      	add	r2, pc, #4	; (adr r2, 8000df8 <HAL_GPIO_Init+0x1a0>)
 8000df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df8:	08000f25 	.word	0x08000f25
 8000dfc:	08000e4d 	.word	0x08000e4d
 8000e00:	08000e9f 	.word	0x08000e9f
 8000e04:	08000f73 	.word	0x08000f73
 8000e08:	08000f79 	.word	0x08000f79
 8000e0c:	08000f79 	.word	0x08000f79
 8000e10:	08000f79 	.word	0x08000f79
 8000e14:	08000f79 	.word	0x08000f79
 8000e18:	08000f79 	.word	0x08000f79
 8000e1c:	08000f79 	.word	0x08000f79
 8000e20:	08000f79 	.word	0x08000f79
 8000e24:	08000f79 	.word	0x08000f79
 8000e28:	08000f79 	.word	0x08000f79
 8000e2c:	08000f79 	.word	0x08000f79
 8000e30:	08000f79 	.word	0x08000f79
 8000e34:	08000f79 	.word	0x08000f79
 8000e38:	08000f79 	.word	0x08000f79
 8000e3c:	08000e75 	.word	0x08000e75
 8000e40:	08000ec9 	.word	0x08000ec9
 8000e44:	4a31      	ldr	r2, [pc, #196]	; (8000f0c <HAL_GPIO_Init+0x2b4>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d06c      	beq.n	8000f24 <HAL_GPIO_Init+0x2cc>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e4a:	e095      	b.n	8000f78 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d00b      	beq.n	8000e6c <HAL_GPIO_Init+0x214>
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d007      	beq.n	8000e6c <HAL_GPIO_Init+0x214>
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	2b03      	cmp	r3, #3
 8000e62:	d003      	beq.n	8000e6c <HAL_GPIO_Init+0x214>
 8000e64:	21d5      	movs	r1, #213	; 0xd5
 8000e66:	4828      	ldr	r0, [pc, #160]	; (8000f08 <HAL_GPIO_Init+0x2b0>)
 8000e68:	f7ff facd 	bl	8000406 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	623b      	str	r3, [r7, #32]
          break;
 8000e72:	e082      	b.n	8000f7a <HAL_GPIO_Init+0x322>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d00b      	beq.n	8000e94 <HAL_GPIO_Init+0x23c>
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d007      	beq.n	8000e94 <HAL_GPIO_Init+0x23c>
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	2b03      	cmp	r3, #3
 8000e8a:	d003      	beq.n	8000e94 <HAL_GPIO_Init+0x23c>
 8000e8c:	21dc      	movs	r1, #220	; 0xdc
 8000e8e:	481e      	ldr	r0, [pc, #120]	; (8000f08 <HAL_GPIO_Init+0x2b0>)
 8000e90:	f7ff fab9 	bl	8000406 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	623b      	str	r3, [r7, #32]
          break;
 8000e9c:	e06d      	b.n	8000f7a <HAL_GPIO_Init+0x322>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d00b      	beq.n	8000ebe <HAL_GPIO_Init+0x266>
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d007      	beq.n	8000ebe <HAL_GPIO_Init+0x266>
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	2b03      	cmp	r3, #3
 8000eb4:	d003      	beq.n	8000ebe <HAL_GPIO_Init+0x266>
 8000eb6:	21e3      	movs	r1, #227	; 0xe3
 8000eb8:	4813      	ldr	r0, [pc, #76]	; (8000f08 <HAL_GPIO_Init+0x2b0>)
 8000eba:	f7ff faa4 	bl	8000406 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	3308      	adds	r3, #8
 8000ec4:	623b      	str	r3, [r7, #32]
          break;
 8000ec6:	e058      	b.n	8000f7a <HAL_GPIO_Init+0x322>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d00b      	beq.n	8000ee8 <HAL_GPIO_Init+0x290>
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d007      	beq.n	8000ee8 <HAL_GPIO_Init+0x290>
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	2b03      	cmp	r3, #3
 8000ede:	d003      	beq.n	8000ee8 <HAL_GPIO_Init+0x290>
 8000ee0:	21ea      	movs	r1, #234	; 0xea
 8000ee2:	4809      	ldr	r0, [pc, #36]	; (8000f08 <HAL_GPIO_Init+0x2b0>)
 8000ee4:	f7ff fa8f 	bl	8000406 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	330c      	adds	r3, #12
 8000eee:	623b      	str	r3, [r7, #32]
          break;
 8000ef0:	e043      	b.n	8000f7a <HAL_GPIO_Init+0x322>
 8000ef2:	bf00      	nop
 8000ef4:	40010800 	.word	0x40010800
 8000ef8:	40010c00 	.word	0x40010c00
 8000efc:	40011000 	.word	0x40011000
 8000f00:	40011400 	.word	0x40011400
 8000f04:	40011800 	.word	0x40011800
 8000f08:	08003c18 	.word	0x08003c18
 8000f0c:	10110000 	.word	0x10110000
 8000f10:	10210000 	.word	0x10210000
 8000f14:	10310000 	.word	0x10310000
 8000f18:	10120000 	.word	0x10120000
 8000f1c:	10220000 	.word	0x10220000
 8000f20:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d00b      	beq.n	8000f44 <HAL_GPIO_Init+0x2ec>
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d007      	beq.n	8000f44 <HAL_GPIO_Init+0x2ec>
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d003      	beq.n	8000f44 <HAL_GPIO_Init+0x2ec>
 8000f3c:	21f7      	movs	r1, #247	; 0xf7
 8000f3e:	4876      	ldr	r0, [pc, #472]	; (8001118 <HAL_GPIO_Init+0x4c0>)
 8000f40:	f7ff fa61 	bl	8000406 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d102      	bne.n	8000f52 <HAL_GPIO_Init+0x2fa>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	623b      	str	r3, [r7, #32]
          break;
 8000f50:	e013      	b.n	8000f7a <HAL_GPIO_Init+0x322>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d105      	bne.n	8000f66 <HAL_GPIO_Init+0x30e>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f5a:	2308      	movs	r3, #8
 8000f5c:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69fa      	ldr	r2, [r7, #28]
 8000f62:	611a      	str	r2, [r3, #16]
          break;
 8000f64:	e009      	b.n	8000f7a <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f66:	2308      	movs	r3, #8
 8000f68:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69fa      	ldr	r2, [r7, #28]
 8000f6e:	615a      	str	r2, [r3, #20]
          break;
 8000f70:	e003      	b.n	8000f7a <HAL_GPIO_Init+0x322>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f72:	2300      	movs	r3, #0
 8000f74:	623b      	str	r3, [r7, #32]
          break;
 8000f76:	e000      	b.n	8000f7a <HAL_GPIO_Init+0x322>
          break;
 8000f78:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	2bff      	cmp	r3, #255	; 0xff
 8000f7e:	d801      	bhi.n	8000f84 <HAL_GPIO_Init+0x32c>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	e001      	b.n	8000f88 <HAL_GPIO_Init+0x330>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3304      	adds	r3, #4
 8000f88:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	2bff      	cmp	r3, #255	; 0xff
 8000f8e:	d802      	bhi.n	8000f96 <HAL_GPIO_Init+0x33e>
 8000f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	e002      	b.n	8000f9c <HAL_GPIO_Init+0x344>
 8000f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f98:	3b08      	subs	r3, #8
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	210f      	movs	r1, #15
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	401a      	ands	r2, r3
 8000fae:	6a39      	ldr	r1, [r7, #32]
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	f000 8096 	beq.w	80010f6 <HAL_GPIO_Init+0x49e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fca:	4b54      	ldr	r3, [pc, #336]	; (800111c <HAL_GPIO_Init+0x4c4>)
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	4a53      	ldr	r2, [pc, #332]	; (800111c <HAL_GPIO_Init+0x4c4>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6193      	str	r3, [r2, #24]
 8000fd6:	4b51      	ldr	r3, [pc, #324]	; (800111c <HAL_GPIO_Init+0x4c4>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fe2:	4a4f      	ldr	r2, [pc, #316]	; (8001120 <HAL_GPIO_Init+0x4c8>)
 8000fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe6:	089b      	lsrs	r3, r3, #2
 8000fe8:	3302      	adds	r3, #2
 8000fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fee:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff2:	f003 0303 	and.w	r3, r3, #3
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	220f      	movs	r2, #15
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	4013      	ands	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a46      	ldr	r2, [pc, #280]	; (8001124 <HAL_GPIO_Init+0x4cc>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d013      	beq.n	8001036 <HAL_GPIO_Init+0x3de>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a45      	ldr	r2, [pc, #276]	; (8001128 <HAL_GPIO_Init+0x4d0>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d00d      	beq.n	8001032 <HAL_GPIO_Init+0x3da>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a44      	ldr	r2, [pc, #272]	; (800112c <HAL_GPIO_Init+0x4d4>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d007      	beq.n	800102e <HAL_GPIO_Init+0x3d6>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a43      	ldr	r2, [pc, #268]	; (8001130 <HAL_GPIO_Init+0x4d8>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d101      	bne.n	800102a <HAL_GPIO_Init+0x3d2>
 8001026:	2303      	movs	r3, #3
 8001028:	e006      	b.n	8001038 <HAL_GPIO_Init+0x3e0>
 800102a:	2304      	movs	r3, #4
 800102c:	e004      	b.n	8001038 <HAL_GPIO_Init+0x3e0>
 800102e:	2302      	movs	r3, #2
 8001030:	e002      	b.n	8001038 <HAL_GPIO_Init+0x3e0>
 8001032:	2301      	movs	r3, #1
 8001034:	e000      	b.n	8001038 <HAL_GPIO_Init+0x3e0>
 8001036:	2300      	movs	r3, #0
 8001038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800103a:	f002 0203 	and.w	r2, r2, #3
 800103e:	0092      	lsls	r2, r2, #2
 8001040:	4093      	lsls	r3, r2
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	4313      	orrs	r3, r2
 8001046:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001048:	4935      	ldr	r1, [pc, #212]	; (8001120 <HAL_GPIO_Init+0x4c8>)
 800104a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104c:	089b      	lsrs	r3, r3, #2
 800104e:	3302      	adds	r3, #2
 8001050:	68fa      	ldr	r2, [r7, #12]
 8001052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d006      	beq.n	8001070 <HAL_GPIO_Init+0x418>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001062:	4b34      	ldr	r3, [pc, #208]	; (8001134 <HAL_GPIO_Init+0x4dc>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	4933      	ldr	r1, [pc, #204]	; (8001134 <HAL_GPIO_Init+0x4dc>)
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	4313      	orrs	r3, r2
 800106c:	600b      	str	r3, [r1, #0]
 800106e:	e006      	b.n	800107e <HAL_GPIO_Init+0x426>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001070:	4b30      	ldr	r3, [pc, #192]	; (8001134 <HAL_GPIO_Init+0x4dc>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	43db      	mvns	r3, r3
 8001078:	492e      	ldr	r1, [pc, #184]	; (8001134 <HAL_GPIO_Init+0x4dc>)
 800107a:	4013      	ands	r3, r2
 800107c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d006      	beq.n	8001098 <HAL_GPIO_Init+0x440>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800108a:	4b2a      	ldr	r3, [pc, #168]	; (8001134 <HAL_GPIO_Init+0x4dc>)
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	4929      	ldr	r1, [pc, #164]	; (8001134 <HAL_GPIO_Init+0x4dc>)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	604b      	str	r3, [r1, #4]
 8001096:	e006      	b.n	80010a6 <HAL_GPIO_Init+0x44e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001098:	4b26      	ldr	r3, [pc, #152]	; (8001134 <HAL_GPIO_Init+0x4dc>)
 800109a:	685a      	ldr	r2, [r3, #4]
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	43db      	mvns	r3, r3
 80010a0:	4924      	ldr	r1, [pc, #144]	; (8001134 <HAL_GPIO_Init+0x4dc>)
 80010a2:	4013      	ands	r3, r2
 80010a4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d006      	beq.n	80010c0 <HAL_GPIO_Init+0x468>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010b2:	4b20      	ldr	r3, [pc, #128]	; (8001134 <HAL_GPIO_Init+0x4dc>)
 80010b4:	689a      	ldr	r2, [r3, #8]
 80010b6:	491f      	ldr	r1, [pc, #124]	; (8001134 <HAL_GPIO_Init+0x4dc>)
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	608b      	str	r3, [r1, #8]
 80010be:	e006      	b.n	80010ce <HAL_GPIO_Init+0x476>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010c0:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <HAL_GPIO_Init+0x4dc>)
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	491a      	ldr	r1, [pc, #104]	; (8001134 <HAL_GPIO_Init+0x4dc>)
 80010ca:	4013      	ands	r3, r2
 80010cc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d006      	beq.n	80010e8 <HAL_GPIO_Init+0x490>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010da:	4b16      	ldr	r3, [pc, #88]	; (8001134 <HAL_GPIO_Init+0x4dc>)
 80010dc:	68da      	ldr	r2, [r3, #12]
 80010de:	4915      	ldr	r1, [pc, #84]	; (8001134 <HAL_GPIO_Init+0x4dc>)
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	60cb      	str	r3, [r1, #12]
 80010e6:	e006      	b.n	80010f6 <HAL_GPIO_Init+0x49e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <HAL_GPIO_Init+0x4dc>)
 80010ea:	68da      	ldr	r2, [r3, #12]
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	4910      	ldr	r1, [pc, #64]	; (8001134 <HAL_GPIO_Init+0x4dc>)
 80010f2:	4013      	ands	r3, r2
 80010f4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80010f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f8:	3301      	adds	r3, #1
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001102:	fa22 f303 	lsr.w	r3, r2, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	f47f ae1d 	bne.w	8000d46 <HAL_GPIO_Init+0xee>
  }
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3728      	adds	r7, #40	; 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	08003c18 	.word	0x08003c18
 800111c:	40021000 	.word	0x40021000
 8001120:	40010000 	.word	0x40010000
 8001124:	40010800 	.word	0x40010800
 8001128:	40010c00 	.word	0x40010c00
 800112c:	40011000 	.word	0x40011000
 8001130:	40011400 	.word	0x40011400
 8001134:	40010400 	.word	0x40010400

08001138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	460b      	mov	r3, r1
 8001142:	807b      	strh	r3, [r7, #2]
 8001144:	4613      	mov	r3, r2
 8001146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001148:	887b      	ldrh	r3, [r7, #2]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d004      	beq.n	8001158 <HAL_GPIO_WritePin+0x20>
 800114e:	887b      	ldrh	r3, [r7, #2]
 8001150:	0c1b      	lsrs	r3, r3, #16
 8001152:	041b      	lsls	r3, r3, #16
 8001154:	2b00      	cmp	r3, #0
 8001156:	d004      	beq.n	8001162 <HAL_GPIO_WritePin+0x2a>
 8001158:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800115c:	480e      	ldr	r0, [pc, #56]	; (8001198 <HAL_GPIO_WritePin+0x60>)
 800115e:	f7ff f952 	bl	8000406 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001162:	787b      	ldrb	r3, [r7, #1]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d007      	beq.n	8001178 <HAL_GPIO_WritePin+0x40>
 8001168:	787b      	ldrb	r3, [r7, #1]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d004      	beq.n	8001178 <HAL_GPIO_WritePin+0x40>
 800116e:	f240 11d5 	movw	r1, #469	; 0x1d5
 8001172:	4809      	ldr	r0, [pc, #36]	; (8001198 <HAL_GPIO_WritePin+0x60>)
 8001174:	f7ff f947 	bl	8000406 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8001178:	787b      	ldrb	r3, [r7, #1]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001184:	e003      	b.n	800118e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001186:	887b      	ldrh	r3, [r7, #2]
 8001188:	041a      	lsls	r2, r3, #16
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	611a      	str	r2, [r3, #16]
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	08003c18 	.word	0x08003c18

0800119c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80011a8:	887b      	ldrh	r3, [r7, #2]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d004      	beq.n	80011b8 <HAL_GPIO_TogglePin+0x1c>
 80011ae:	887b      	ldrh	r3, [r7, #2]
 80011b0:	0c1b      	lsrs	r3, r3, #16
 80011b2:	041b      	lsls	r3, r3, #16
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d004      	beq.n	80011c2 <HAL_GPIO_TogglePin+0x26>
 80011b8:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 80011bc:	480a      	ldr	r0, [pc, #40]	; (80011e8 <HAL_GPIO_TogglePin+0x4c>)
 80011be:	f7ff f922 	bl	8000406 <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011c8:	887a      	ldrh	r2, [r7, #2]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4013      	ands	r3, r2
 80011ce:	041a      	lsls	r2, r3, #16
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	43d9      	mvns	r1, r3
 80011d4:	887b      	ldrh	r3, [r7, #2]
 80011d6:	400b      	ands	r3, r1
 80011d8:	431a      	orrs	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	611a      	str	r2, [r3, #16]
}
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	08003c18 	.word	0x08003c18

080011ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e35c      	b.n	80018b8 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d01c      	beq.n	8001240 <HAL_RCC_OscConfig+0x54>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	2b00      	cmp	r3, #0
 8001210:	d116      	bne.n	8001240 <HAL_RCC_OscConfig+0x54>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d110      	bne.n	8001240 <HAL_RCC_OscConfig+0x54>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0308 	and.w	r3, r3, #8
 8001226:	2b00      	cmp	r3, #0
 8001228:	d10a      	bne.n	8001240 <HAL_RCC_OscConfig+0x54>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	2b00      	cmp	r3, #0
 8001234:	d104      	bne.n	8001240 <HAL_RCC_OscConfig+0x54>
 8001236:	f240 1167 	movw	r1, #359	; 0x167
 800123a:	48a5      	ldr	r0, [pc, #660]	; (80014d0 <HAL_RCC_OscConfig+0x2e4>)
 800123c:	f7ff f8e3 	bl	8000406 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	2b00      	cmp	r3, #0
 800124a:	f000 809a 	beq.w	8001382 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d00e      	beq.n	8001274 <HAL_RCC_OscConfig+0x88>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800125e:	d009      	beq.n	8001274 <HAL_RCC_OscConfig+0x88>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001268:	d004      	beq.n	8001274 <HAL_RCC_OscConfig+0x88>
 800126a:	f240 116d 	movw	r1, #365	; 0x16d
 800126e:	4898      	ldr	r0, [pc, #608]	; (80014d0 <HAL_RCC_OscConfig+0x2e4>)
 8001270:	f7ff f8c9 	bl	8000406 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001274:	4b97      	ldr	r3, [pc, #604]	; (80014d4 <HAL_RCC_OscConfig+0x2e8>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 030c 	and.w	r3, r3, #12
 800127c:	2b04      	cmp	r3, #4
 800127e:	d00c      	beq.n	800129a <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001280:	4b94      	ldr	r3, [pc, #592]	; (80014d4 <HAL_RCC_OscConfig+0x2e8>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 030c 	and.w	r3, r3, #12
 8001288:	2b08      	cmp	r3, #8
 800128a:	d112      	bne.n	80012b2 <HAL_RCC_OscConfig+0xc6>
 800128c:	4b91      	ldr	r3, [pc, #580]	; (80014d4 <HAL_RCC_OscConfig+0x2e8>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001298:	d10b      	bne.n	80012b2 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800129a:	4b8e      	ldr	r3, [pc, #568]	; (80014d4 <HAL_RCC_OscConfig+0x2e8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d06c      	beq.n	8001380 <HAL_RCC_OscConfig+0x194>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d168      	bne.n	8001380 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e302      	b.n	80018b8 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ba:	d106      	bne.n	80012ca <HAL_RCC_OscConfig+0xde>
 80012bc:	4b85      	ldr	r3, [pc, #532]	; (80014d4 <HAL_RCC_OscConfig+0x2e8>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a84      	ldr	r2, [pc, #528]	; (80014d4 <HAL_RCC_OscConfig+0x2e8>)
 80012c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	e02e      	b.n	8001328 <HAL_RCC_OscConfig+0x13c>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10c      	bne.n	80012ec <HAL_RCC_OscConfig+0x100>
 80012d2:	4b80      	ldr	r3, [pc, #512]	; (80014d4 <HAL_RCC_OscConfig+0x2e8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a7f      	ldr	r2, [pc, #508]	; (80014d4 <HAL_RCC_OscConfig+0x2e8>)
 80012d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	4b7d      	ldr	r3, [pc, #500]	; (80014d4 <HAL_RCC_OscConfig+0x2e8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a7c      	ldr	r2, [pc, #496]	; (80014d4 <HAL_RCC_OscConfig+0x2e8>)
 80012e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	e01d      	b.n	8001328 <HAL_RCC_OscConfig+0x13c>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012f4:	d10c      	bne.n	8001310 <HAL_RCC_OscConfig+0x124>
 80012f6:	4b77      	ldr	r3, [pc, #476]	; (80014d4 <HAL_RCC_OscConfig+0x2e8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a76      	ldr	r2, [pc, #472]	; (80014d4 <HAL_RCC_OscConfig+0x2e8>)
 80012fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	4b74      	ldr	r3, [pc, #464]	; (80014d4 <HAL_RCC_OscConfig+0x2e8>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a73      	ldr	r2, [pc, #460]	; (80014d4 <HAL_RCC_OscConfig+0x2e8>)
 8001308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	e00b      	b.n	8001328 <HAL_RCC_OscConfig+0x13c>
 8001310:	4b70      	ldr	r3, [pc, #448]	; (80014d4 <HAL_RCC_OscConfig+0x2e8>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a6f      	ldr	r2, [pc, #444]	; (80014d4 <HAL_RCC_OscConfig+0x2e8>)
 8001316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	4b6d      	ldr	r3, [pc, #436]	; (80014d4 <HAL_RCC_OscConfig+0x2e8>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a6c      	ldr	r2, [pc, #432]	; (80014d4 <HAL_RCC_OscConfig+0x2e8>)
 8001322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001326:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d013      	beq.n	8001358 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001330:	f7ff fad6 	bl	80008e0 <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001338:	f7ff fad2 	bl	80008e0 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b64      	cmp	r3, #100	; 0x64
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e2b6      	b.n	80018b8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134a:	4b62      	ldr	r3, [pc, #392]	; (80014d4 <HAL_RCC_OscConfig+0x2e8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0f0      	beq.n	8001338 <HAL_RCC_OscConfig+0x14c>
 8001356:	e014      	b.n	8001382 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001358:	f7ff fac2 	bl	80008e0 <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001360:	f7ff fabe 	bl	80008e0 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b64      	cmp	r3, #100	; 0x64
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e2a2      	b.n	80018b8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001372:	4b58      	ldr	r3, [pc, #352]	; (80014d4 <HAL_RCC_OscConfig+0x2e8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f0      	bne.n	8001360 <HAL_RCC_OscConfig+0x174>
 800137e:	e000      	b.n	8001382 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d079      	beq.n	8001482 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d008      	beq.n	80013a8 <HAL_RCC_OscConfig+0x1bc>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d004      	beq.n	80013a8 <HAL_RCC_OscConfig+0x1bc>
 800139e:	f240 11a1 	movw	r1, #417	; 0x1a1
 80013a2:	484b      	ldr	r0, [pc, #300]	; (80014d0 <HAL_RCC_OscConfig+0x2e4>)
 80013a4:	f7ff f82f 	bl	8000406 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	695b      	ldr	r3, [r3, #20]
 80013ac:	2b1f      	cmp	r3, #31
 80013ae:	d904      	bls.n	80013ba <HAL_RCC_OscConfig+0x1ce>
 80013b0:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 80013b4:	4846      	ldr	r0, [pc, #280]	; (80014d0 <HAL_RCC_OscConfig+0x2e4>)
 80013b6:	f7ff f826 	bl	8000406 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013ba:	4b46      	ldr	r3, [pc, #280]	; (80014d4 <HAL_RCC_OscConfig+0x2e8>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00b      	beq.n	80013de <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013c6:	4b43      	ldr	r3, [pc, #268]	; (80014d4 <HAL_RCC_OscConfig+0x2e8>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 030c 	and.w	r3, r3, #12
 80013ce:	2b08      	cmp	r3, #8
 80013d0:	d11c      	bne.n	800140c <HAL_RCC_OscConfig+0x220>
 80013d2:	4b40      	ldr	r3, [pc, #256]	; (80014d4 <HAL_RCC_OscConfig+0x2e8>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d116      	bne.n	800140c <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013de:	4b3d      	ldr	r3, [pc, #244]	; (80014d4 <HAL_RCC_OscConfig+0x2e8>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d005      	beq.n	80013f6 <HAL_RCC_OscConfig+0x20a>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d001      	beq.n	80013f6 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e260      	b.n	80018b8 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f6:	4b37      	ldr	r3, [pc, #220]	; (80014d4 <HAL_RCC_OscConfig+0x2e8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	4933      	ldr	r1, [pc, #204]	; (80014d4 <HAL_RCC_OscConfig+0x2e8>)
 8001406:	4313      	orrs	r3, r2
 8001408:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140a:	e03a      	b.n	8001482 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d020      	beq.n	8001456 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001414:	4b30      	ldr	r3, [pc, #192]	; (80014d8 <HAL_RCC_OscConfig+0x2ec>)
 8001416:	2201      	movs	r2, #1
 8001418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141a:	f7ff fa61 	bl	80008e0 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001422:	f7ff fa5d 	bl	80008e0 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e241      	b.n	80018b8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001434:	4b27      	ldr	r3, [pc, #156]	; (80014d4 <HAL_RCC_OscConfig+0x2e8>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f0      	beq.n	8001422 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001440:	4b24      	ldr	r3, [pc, #144]	; (80014d4 <HAL_RCC_OscConfig+0x2e8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	4921      	ldr	r1, [pc, #132]	; (80014d4 <HAL_RCC_OscConfig+0x2e8>)
 8001450:	4313      	orrs	r3, r2
 8001452:	600b      	str	r3, [r1, #0]
 8001454:	e015      	b.n	8001482 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001456:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <HAL_RCC_OscConfig+0x2ec>)
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145c:	f7ff fa40 	bl	80008e0 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001464:	f7ff fa3c 	bl	80008e0 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e220      	b.n	80018b8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001476:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <HAL_RCC_OscConfig+0x2e8>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	2b00      	cmp	r3, #0
 800148c:	d048      	beq.n	8001520 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d008      	beq.n	80014a8 <HAL_RCC_OscConfig+0x2bc>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d004      	beq.n	80014a8 <HAL_RCC_OscConfig+0x2bc>
 800149e:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 80014a2:	480b      	ldr	r0, [pc, #44]	; (80014d0 <HAL_RCC_OscConfig+0x2e4>)
 80014a4:	f7fe ffaf 	bl	8000406 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d021      	beq.n	80014f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014b0:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <HAL_RCC_OscConfig+0x2f0>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b6:	f7ff fa13 	bl	80008e0 <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014bc:	e010      	b.n	80014e0 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014be:	f7ff fa0f 	bl	80008e0 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d909      	bls.n	80014e0 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e1f3      	b.n	80018b8 <HAL_RCC_OscConfig+0x6cc>
 80014d0:	08003c54 	.word	0x08003c54
 80014d4:	40021000 	.word	0x40021000
 80014d8:	42420000 	.word	0x42420000
 80014dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e0:	4b67      	ldr	r3, [pc, #412]	; (8001680 <HAL_RCC_OscConfig+0x494>)
 80014e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0e8      	beq.n	80014be <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014ec:	2001      	movs	r0, #1
 80014ee:	f000 fc0f 	bl	8001d10 <RCC_Delay>
 80014f2:	e015      	b.n	8001520 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014f4:	4b63      	ldr	r3, [pc, #396]	; (8001684 <HAL_RCC_OscConfig+0x498>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fa:	f7ff f9f1 	bl	80008e0 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001502:	f7ff f9ed 	bl	80008e0 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e1d1      	b.n	80018b8 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001514:	4b5a      	ldr	r3, [pc, #360]	; (8001680 <HAL_RCC_OscConfig+0x494>)
 8001516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1f0      	bne.n	8001502 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 80c0 	beq.w	80016ae <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00c      	beq.n	8001554 <HAL_RCC_OscConfig+0x368>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d008      	beq.n	8001554 <HAL_RCC_OscConfig+0x368>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	2b05      	cmp	r3, #5
 8001548:	d004      	beq.n	8001554 <HAL_RCC_OscConfig+0x368>
 800154a:	f240 2111 	movw	r1, #529	; 0x211
 800154e:	484e      	ldr	r0, [pc, #312]	; (8001688 <HAL_RCC_OscConfig+0x49c>)
 8001550:	f7fe ff59 	bl	8000406 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001554:	4b4a      	ldr	r3, [pc, #296]	; (8001680 <HAL_RCC_OscConfig+0x494>)
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d10d      	bne.n	800157c <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001560:	4b47      	ldr	r3, [pc, #284]	; (8001680 <HAL_RCC_OscConfig+0x494>)
 8001562:	69db      	ldr	r3, [r3, #28]
 8001564:	4a46      	ldr	r2, [pc, #280]	; (8001680 <HAL_RCC_OscConfig+0x494>)
 8001566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156a:	61d3      	str	r3, [r2, #28]
 800156c:	4b44      	ldr	r3, [pc, #272]	; (8001680 <HAL_RCC_OscConfig+0x494>)
 800156e:	69db      	ldr	r3, [r3, #28]
 8001570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001578:	2301      	movs	r3, #1
 800157a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157c:	4b43      	ldr	r3, [pc, #268]	; (800168c <HAL_RCC_OscConfig+0x4a0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001584:	2b00      	cmp	r3, #0
 8001586:	d118      	bne.n	80015ba <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001588:	4b40      	ldr	r3, [pc, #256]	; (800168c <HAL_RCC_OscConfig+0x4a0>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a3f      	ldr	r2, [pc, #252]	; (800168c <HAL_RCC_OscConfig+0x4a0>)
 800158e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001592:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001594:	f7ff f9a4 	bl	80008e0 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800159c:	f7ff f9a0 	bl	80008e0 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b64      	cmp	r3, #100	; 0x64
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e184      	b.n	80018b8 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ae:	4b37      	ldr	r3, [pc, #220]	; (800168c <HAL_RCC_OscConfig+0x4a0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f0      	beq.n	800159c <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d106      	bne.n	80015d0 <HAL_RCC_OscConfig+0x3e4>
 80015c2:	4b2f      	ldr	r3, [pc, #188]	; (8001680 <HAL_RCC_OscConfig+0x494>)
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	4a2e      	ldr	r2, [pc, #184]	; (8001680 <HAL_RCC_OscConfig+0x494>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6213      	str	r3, [r2, #32]
 80015ce:	e02d      	b.n	800162c <HAL_RCC_OscConfig+0x440>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d10c      	bne.n	80015f2 <HAL_RCC_OscConfig+0x406>
 80015d8:	4b29      	ldr	r3, [pc, #164]	; (8001680 <HAL_RCC_OscConfig+0x494>)
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	4a28      	ldr	r2, [pc, #160]	; (8001680 <HAL_RCC_OscConfig+0x494>)
 80015de:	f023 0301 	bic.w	r3, r3, #1
 80015e2:	6213      	str	r3, [r2, #32]
 80015e4:	4b26      	ldr	r3, [pc, #152]	; (8001680 <HAL_RCC_OscConfig+0x494>)
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	4a25      	ldr	r2, [pc, #148]	; (8001680 <HAL_RCC_OscConfig+0x494>)
 80015ea:	f023 0304 	bic.w	r3, r3, #4
 80015ee:	6213      	str	r3, [r2, #32]
 80015f0:	e01c      	b.n	800162c <HAL_RCC_OscConfig+0x440>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	2b05      	cmp	r3, #5
 80015f8:	d10c      	bne.n	8001614 <HAL_RCC_OscConfig+0x428>
 80015fa:	4b21      	ldr	r3, [pc, #132]	; (8001680 <HAL_RCC_OscConfig+0x494>)
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	4a20      	ldr	r2, [pc, #128]	; (8001680 <HAL_RCC_OscConfig+0x494>)
 8001600:	f043 0304 	orr.w	r3, r3, #4
 8001604:	6213      	str	r3, [r2, #32]
 8001606:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <HAL_RCC_OscConfig+0x494>)
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	4a1d      	ldr	r2, [pc, #116]	; (8001680 <HAL_RCC_OscConfig+0x494>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6213      	str	r3, [r2, #32]
 8001612:	e00b      	b.n	800162c <HAL_RCC_OscConfig+0x440>
 8001614:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <HAL_RCC_OscConfig+0x494>)
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	4a19      	ldr	r2, [pc, #100]	; (8001680 <HAL_RCC_OscConfig+0x494>)
 800161a:	f023 0301 	bic.w	r3, r3, #1
 800161e:	6213      	str	r3, [r2, #32]
 8001620:	4b17      	ldr	r3, [pc, #92]	; (8001680 <HAL_RCC_OscConfig+0x494>)
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	4a16      	ldr	r2, [pc, #88]	; (8001680 <HAL_RCC_OscConfig+0x494>)
 8001626:	f023 0304 	bic.w	r3, r3, #4
 800162a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d015      	beq.n	8001660 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001634:	f7ff f954 	bl	80008e0 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800163a:	e00a      	b.n	8001652 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800163c:	f7ff f950 	bl	80008e0 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	f241 3288 	movw	r2, #5000	; 0x1388
 800164a:	4293      	cmp	r3, r2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e132      	b.n	80018b8 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001652:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <HAL_RCC_OscConfig+0x494>)
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0ee      	beq.n	800163c <HAL_RCC_OscConfig+0x450>
 800165e:	e01d      	b.n	800169c <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001660:	f7ff f93e 	bl	80008e0 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001666:	e013      	b.n	8001690 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001668:	f7ff f93a 	bl	80008e0 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	f241 3288 	movw	r2, #5000	; 0x1388
 8001676:	4293      	cmp	r3, r2
 8001678:	d90a      	bls.n	8001690 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e11c      	b.n	80018b8 <HAL_RCC_OscConfig+0x6cc>
 800167e:	bf00      	nop
 8001680:	40021000 	.word	0x40021000
 8001684:	42420480 	.word	0x42420480
 8001688:	08003c54 	.word	0x08003c54
 800168c:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001690:	4b8b      	ldr	r3, [pc, #556]	; (80018c0 <HAL_RCC_OscConfig+0x6d4>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1e5      	bne.n	8001668 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800169c:	7dfb      	ldrb	r3, [r7, #23]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d105      	bne.n	80016ae <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016a2:	4b87      	ldr	r3, [pc, #540]	; (80018c0 <HAL_RCC_OscConfig+0x6d4>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	4a86      	ldr	r2, [pc, #536]	; (80018c0 <HAL_RCC_OscConfig+0x6d4>)
 80016a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016ac:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00c      	beq.n	80016d0 <HAL_RCC_OscConfig+0x4e4>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d008      	beq.n	80016d0 <HAL_RCC_OscConfig+0x4e4>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d004      	beq.n	80016d0 <HAL_RCC_OscConfig+0x4e4>
 80016c6:	f240 21af 	movw	r1, #687	; 0x2af
 80016ca:	487e      	ldr	r0, [pc, #504]	; (80018c4 <HAL_RCC_OscConfig+0x6d8>)
 80016cc:	f7fe fe9b 	bl	8000406 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69db      	ldr	r3, [r3, #28]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 80ee 	beq.w	80018b6 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016da:	4b79      	ldr	r3, [pc, #484]	; (80018c0 <HAL_RCC_OscConfig+0x6d4>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f003 030c 	and.w	r3, r3, #12
 80016e2:	2b08      	cmp	r3, #8
 80016e4:	f000 80ce 	beq.w	8001884 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	f040 80b2 	bne.w	8001856 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d009      	beq.n	800170e <HAL_RCC_OscConfig+0x522>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001702:	d004      	beq.n	800170e <HAL_RCC_OscConfig+0x522>
 8001704:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8001708:	486e      	ldr	r0, [pc, #440]	; (80018c4 <HAL_RCC_OscConfig+0x6d8>)
 800170a:	f7fe fe7c 	bl	8000406 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001712:	2b00      	cmp	r3, #0
 8001714:	d04a      	beq.n	80017ac <HAL_RCC_OscConfig+0x5c0>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800171e:	d045      	beq.n	80017ac <HAL_RCC_OscConfig+0x5c0>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001728:	d040      	beq.n	80017ac <HAL_RCC_OscConfig+0x5c0>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001732:	d03b      	beq.n	80017ac <HAL_RCC_OscConfig+0x5c0>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001738:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800173c:	d036      	beq.n	80017ac <HAL_RCC_OscConfig+0x5c0>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001742:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001746:	d031      	beq.n	80017ac <HAL_RCC_OscConfig+0x5c0>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001750:	d02c      	beq.n	80017ac <HAL_RCC_OscConfig+0x5c0>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001756:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800175a:	d027      	beq.n	80017ac <HAL_RCC_OscConfig+0x5c0>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001764:	d022      	beq.n	80017ac <HAL_RCC_OscConfig+0x5c0>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800176e:	d01d      	beq.n	80017ac <HAL_RCC_OscConfig+0x5c0>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001774:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001778:	d018      	beq.n	80017ac <HAL_RCC_OscConfig+0x5c0>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001782:	d013      	beq.n	80017ac <HAL_RCC_OscConfig+0x5c0>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800178c:	d00e      	beq.n	80017ac <HAL_RCC_OscConfig+0x5c0>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001792:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8001796:	d009      	beq.n	80017ac <HAL_RCC_OscConfig+0x5c0>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179c:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80017a0:	d004      	beq.n	80017ac <HAL_RCC_OscConfig+0x5c0>
 80017a2:	f240 21b9 	movw	r1, #697	; 0x2b9
 80017a6:	4847      	ldr	r0, [pc, #284]	; (80018c4 <HAL_RCC_OscConfig+0x6d8>)
 80017a8:	f7fe fe2d 	bl	8000406 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ac:	4b46      	ldr	r3, [pc, #280]	; (80018c8 <HAL_RCC_OscConfig+0x6dc>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b2:	f7ff f895 	bl	80008e0 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ba:	f7ff f891 	bl	80008e0 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e075      	b.n	80018b8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017cc:	4b3c      	ldr	r3, [pc, #240]	; (80018c0 <HAL_RCC_OscConfig+0x6d4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1f0      	bne.n	80017ba <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e0:	d116      	bne.n	8001810 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d009      	beq.n	80017fe <HAL_RCC_OscConfig+0x612>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80017f2:	d004      	beq.n	80017fe <HAL_RCC_OscConfig+0x612>
 80017f4:	f240 21cf 	movw	r1, #719	; 0x2cf
 80017f8:	4832      	ldr	r0, [pc, #200]	; (80018c4 <HAL_RCC_OscConfig+0x6d8>)
 80017fa:	f7fe fe04 	bl	8000406 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017fe:	4b30      	ldr	r3, [pc, #192]	; (80018c0 <HAL_RCC_OscConfig+0x6d4>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	492d      	ldr	r1, [pc, #180]	; (80018c0 <HAL_RCC_OscConfig+0x6d4>)
 800180c:	4313      	orrs	r3, r2
 800180e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001810:	4b2b      	ldr	r3, [pc, #172]	; (80018c0 <HAL_RCC_OscConfig+0x6d4>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a19      	ldr	r1, [r3, #32]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	430b      	orrs	r3, r1
 8001822:	4927      	ldr	r1, [pc, #156]	; (80018c0 <HAL_RCC_OscConfig+0x6d4>)
 8001824:	4313      	orrs	r3, r2
 8001826:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001828:	4b27      	ldr	r3, [pc, #156]	; (80018c8 <HAL_RCC_OscConfig+0x6dc>)
 800182a:	2201      	movs	r2, #1
 800182c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182e:	f7ff f857 	bl	80008e0 <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001836:	f7ff f853 	bl	80008e0 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e037      	b.n	80018b8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001848:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <HAL_RCC_OscConfig+0x6d4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0f0      	beq.n	8001836 <HAL_RCC_OscConfig+0x64a>
 8001854:	e02f      	b.n	80018b6 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001856:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <HAL_RCC_OscConfig+0x6dc>)
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185c:	f7ff f840 	bl	80008e0 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001864:	f7ff f83c 	bl	80008e0 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e020      	b.n	80018b8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001876:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <HAL_RCC_OscConfig+0x6d4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x678>
 8001882:	e018      	b.n	80018b6 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d101      	bne.n	8001890 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e013      	b.n	80018b8 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_RCC_OscConfig+0x6d4>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d106      	bne.n	80018b2 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d001      	beq.n	80018b6 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e000      	b.n	80018b8 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40021000 	.word	0x40021000
 80018c4:	08003c54 	.word	0x08003c54
 80018c8:	42420060 	.word	0x42420060

080018cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e176      	b.n	8001bce <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d116      	bne.n	800191a <HAL_RCC_ClockConfig+0x4e>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d110      	bne.n	800191a <HAL_RCC_ClockConfig+0x4e>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	d10a      	bne.n	800191a <HAL_RCC_ClockConfig+0x4e>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0308 	and.w	r3, r3, #8
 800190c:	2b00      	cmp	r3, #0
 800190e:	d104      	bne.n	800191a <HAL_RCC_ClockConfig+0x4e>
 8001910:	f44f 714e 	mov.w	r1, #824	; 0x338
 8001914:	4874      	ldr	r0, [pc, #464]	; (8001ae8 <HAL_RCC_ClockConfig+0x21c>)
 8001916:	f7fe fd76 	bl	8000406 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d00a      	beq.n	8001936 <HAL_RCC_ClockConfig+0x6a>
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d007      	beq.n	8001936 <HAL_RCC_ClockConfig+0x6a>
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	2b02      	cmp	r3, #2
 800192a:	d004      	beq.n	8001936 <HAL_RCC_ClockConfig+0x6a>
 800192c:	f240 3139 	movw	r1, #825	; 0x339
 8001930:	486d      	ldr	r0, [pc, #436]	; (8001ae8 <HAL_RCC_ClockConfig+0x21c>)
 8001932:	f7fe fd68 	bl	8000406 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001936:	4b6d      	ldr	r3, [pc, #436]	; (8001aec <HAL_RCC_ClockConfig+0x220>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d910      	bls.n	8001966 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001944:	4b69      	ldr	r3, [pc, #420]	; (8001aec <HAL_RCC_ClockConfig+0x220>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f023 0207 	bic.w	r2, r3, #7
 800194c:	4967      	ldr	r1, [pc, #412]	; (8001aec <HAL_RCC_ClockConfig+0x220>)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	4313      	orrs	r3, r2
 8001952:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001954:	4b65      	ldr	r3, [pc, #404]	; (8001aec <HAL_RCC_ClockConfig+0x220>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d001      	beq.n	8001966 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e133      	b.n	8001bce <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d049      	beq.n	8001a06 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	2b00      	cmp	r3, #0
 800197c:	d005      	beq.n	800198a <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800197e:	4b5c      	ldr	r3, [pc, #368]	; (8001af0 <HAL_RCC_ClockConfig+0x224>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	4a5b      	ldr	r2, [pc, #364]	; (8001af0 <HAL_RCC_ClockConfig+0x224>)
 8001984:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001988:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	2b00      	cmp	r3, #0
 8001994:	d005      	beq.n	80019a2 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001996:	4b56      	ldr	r3, [pc, #344]	; (8001af0 <HAL_RCC_ClockConfig+0x224>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	4a55      	ldr	r2, [pc, #340]	; (8001af0 <HAL_RCC_ClockConfig+0x224>)
 800199c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019a0:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d024      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x128>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	2b80      	cmp	r3, #128	; 0x80
 80019b0:	d020      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x128>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	2b90      	cmp	r3, #144	; 0x90
 80019b8:	d01c      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x128>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2ba0      	cmp	r3, #160	; 0xa0
 80019c0:	d018      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x128>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	2bb0      	cmp	r3, #176	; 0xb0
 80019c8:	d014      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x128>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2bc0      	cmp	r3, #192	; 0xc0
 80019d0:	d010      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x128>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	2bd0      	cmp	r3, #208	; 0xd0
 80019d8:	d00c      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x128>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2be0      	cmp	r3, #224	; 0xe0
 80019e0:	d008      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x128>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2bf0      	cmp	r3, #240	; 0xf0
 80019e8:	d004      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x128>
 80019ea:	f240 315f 	movw	r1, #863	; 0x35f
 80019ee:	483e      	ldr	r0, [pc, #248]	; (8001ae8 <HAL_RCC_ClockConfig+0x21c>)
 80019f0:	f7fe fd09 	bl	8000406 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019f4:	4b3e      	ldr	r3, [pc, #248]	; (8001af0 <HAL_RCC_ClockConfig+0x224>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	493b      	ldr	r1, [pc, #236]	; (8001af0 <HAL_RCC_ClockConfig+0x224>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d051      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00c      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x168>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d008      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x168>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d004      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x168>
 8001a2a:	f240 3166 	movw	r1, #870	; 0x366
 8001a2e:	482e      	ldr	r0, [pc, #184]	; (8001ae8 <HAL_RCC_ClockConfig+0x21c>)
 8001a30:	f7fe fce9 	bl	8000406 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d107      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3c:	4b2c      	ldr	r3, [pc, #176]	; (8001af0 <HAL_RCC_ClockConfig+0x224>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d115      	bne.n	8001a74 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e0c0      	b.n	8001bce <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d107      	bne.n	8001a64 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a54:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <HAL_RCC_ClockConfig+0x224>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d109      	bne.n	8001a74 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e0b4      	b.n	8001bce <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a64:	4b22      	ldr	r3, [pc, #136]	; (8001af0 <HAL_RCC_ClockConfig+0x224>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e0ac      	b.n	8001bce <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a74:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <HAL_RCC_ClockConfig+0x224>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f023 0203 	bic.w	r2, r3, #3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	491b      	ldr	r1, [pc, #108]	; (8001af0 <HAL_RCC_ClockConfig+0x224>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a86:	f7fe ff2b 	bl	80008e0 <HAL_GetTick>
 8001a8a:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8c:	e00a      	b.n	8001aa4 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a8e:	f7fe ff27 	bl	80008e0 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e094      	b.n	8001bce <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa4:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <HAL_RCC_ClockConfig+0x224>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 020c 	and.w	r2, r3, #12
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d1eb      	bne.n	8001a8e <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <HAL_RCC_ClockConfig+0x220>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d217      	bcs.n	8001af4 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac4:	4b09      	ldr	r3, [pc, #36]	; (8001aec <HAL_RCC_ClockConfig+0x220>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f023 0207 	bic.w	r2, r3, #7
 8001acc:	4907      	ldr	r1, [pc, #28]	; (8001aec <HAL_RCC_ClockConfig+0x220>)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <HAL_RCC_ClockConfig+0x220>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d008      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e073      	b.n	8001bce <HAL_RCC_ClockConfig+0x302>
 8001ae6:	bf00      	nop
 8001ae8:	08003c54 	.word	0x08003c54
 8001aec:	40022000 	.word	0x40022000
 8001af0:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d025      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d018      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x26e>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b10:	d013      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x26e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001b1a:	d00e      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x26e>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001b24:	d009      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x26e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001b2e:	d004      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x26e>
 8001b30:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8001b34:	4828      	ldr	r0, [pc, #160]	; (8001bd8 <HAL_RCC_ClockConfig+0x30c>)
 8001b36:	f7fe fc66 	bl	8000406 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b3a:	4b28      	ldr	r3, [pc, #160]	; (8001bdc <HAL_RCC_ClockConfig+0x310>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	4925      	ldr	r1, [pc, #148]	; (8001bdc <HAL_RCC_ClockConfig+0x310>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d026      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d018      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x2c6>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b68:	d013      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x2c6>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001b72:	d00e      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x2c6>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001b7c:	d009      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x2c6>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001b86:	d004      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x2c6>
 8001b88:	f240 31ab 	movw	r1, #939	; 0x3ab
 8001b8c:	4812      	ldr	r0, [pc, #72]	; (8001bd8 <HAL_RCC_ClockConfig+0x30c>)
 8001b8e:	f7fe fc3a 	bl	8000406 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b92:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_RCC_ClockConfig+0x310>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	490e      	ldr	r1, [pc, #56]	; (8001bdc <HAL_RCC_ClockConfig+0x310>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ba6:	f000 f821 	bl	8001bec <HAL_RCC_GetSysClockFreq>
 8001baa:	4602      	mov	r2, r0
 8001bac:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <HAL_RCC_ClockConfig+0x310>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	091b      	lsrs	r3, r3, #4
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	490a      	ldr	r1, [pc, #40]	; (8001be0 <HAL_RCC_ClockConfig+0x314>)
 8001bb8:	5ccb      	ldrb	r3, [r1, r3]
 8001bba:	fa22 f303 	lsr.w	r3, r2, r3
 8001bbe:	4a09      	ldr	r2, [pc, #36]	; (8001be4 <HAL_RCC_ClockConfig+0x318>)
 8001bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bc2:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <HAL_RCC_ClockConfig+0x31c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fe48 	bl	800085c <HAL_InitTick>

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	08003c54 	.word	0x08003c54
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	08003d4c 	.word	0x08003d4c
 8001be4:	20000000 	.word	0x20000000
 8001be8:	2000000c 	.word	0x2000000c

08001bec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bec:	b490      	push	{r4, r7}
 8001bee:	b08a      	sub	sp, #40	; 0x28
 8001bf0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bf2:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001bf4:	1d3c      	adds	r4, r7, #4
 8001bf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bfc:	f240 2301 	movw	r3, #513	; 0x201
 8001c00:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
 8001c06:	2300      	movs	r3, #0
 8001c08:	61bb      	str	r3, [r7, #24]
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c16:	4b22      	ldr	r3, [pc, #136]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d002      	beq.n	8001c2c <HAL_RCC_GetSysClockFreq+0x40>
 8001c26:	2b08      	cmp	r3, #8
 8001c28:	d003      	beq.n	8001c32 <HAL_RCC_GetSysClockFreq+0x46>
 8001c2a:	e02d      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c2e:	623b      	str	r3, [r7, #32]
      break;
 8001c30:	e02d      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	0c9b      	lsrs	r3, r3, #18
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c3e:	4413      	add	r3, r2
 8001c40:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c44:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d013      	beq.n	8001c78 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c50:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	0c5b      	lsrs	r3, r3, #17
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c5e:	4413      	add	r3, r2
 8001c60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c64:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	4a0e      	ldr	r2, [pc, #56]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c6a:	fb02 f203 	mul.w	r2, r2, r3
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
 8001c76:	e004      	b.n	8001c82 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c7c:	fb02 f303 	mul.w	r3, r2, r3
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	623b      	str	r3, [r7, #32]
      break;
 8001c86:	e002      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c8a:	623b      	str	r3, [r7, #32]
      break;
 8001c8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c8e:	6a3b      	ldr	r3, [r7, #32]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3728      	adds	r7, #40	; 0x28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc90      	pop	{r4, r7}
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	08003c8c 	.word	0x08003c8c
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	007a1200 	.word	0x007a1200
 8001ca8:	003d0900 	.word	0x003d0900

08001cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cb0:	4b02      	ldr	r3, [pc, #8]	; (8001cbc <HAL_RCC_GetHCLKFreq+0x10>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr
 8001cbc:	20000000 	.word	0x20000000

08001cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cc4:	f7ff fff2 	bl	8001cac <HAL_RCC_GetHCLKFreq>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	0a1b      	lsrs	r3, r3, #8
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	4903      	ldr	r1, [pc, #12]	; (8001ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cd6:	5ccb      	ldrb	r3, [r1, r3]
 8001cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	08003d5c 	.word	0x08003d5c

08001ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cec:	f7ff ffde 	bl	8001cac <HAL_RCC_GetHCLKFreq>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	0adb      	lsrs	r3, r3, #11
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	4903      	ldr	r1, [pc, #12]	; (8001d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cfe:	5ccb      	ldrb	r3, [r1, r3]
 8001d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	08003d5c 	.word	0x08003d5c

08001d10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d18:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <RCC_Delay+0x34>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a0a      	ldr	r2, [pc, #40]	; (8001d48 <RCC_Delay+0x38>)
 8001d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d22:	0a5b      	lsrs	r3, r3, #9
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	fb02 f303 	mul.w	r3, r2, r3
 8001d2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d2c:	bf00      	nop
  }
  while (Delay --);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	1e5a      	subs	r2, r3, #1
 8001d32:	60fa      	str	r2, [r7, #12]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1f9      	bne.n	8001d2c <RCC_Delay+0x1c>
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	20000000 	.word	0x20000000
 8001d48:	10624dd3 	.word	0x10624dd3

08001d4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e093      	b.n	8001e86 <HAL_TIM_Base_Init+0x13a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a4b      	ldr	r2, [pc, #300]	; (8001e90 <HAL_TIM_Base_Init+0x144>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d013      	beq.n	8001d90 <HAL_TIM_Base_Init+0x44>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d70:	d00e      	beq.n	8001d90 <HAL_TIM_Base_Init+0x44>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a47      	ldr	r2, [pc, #284]	; (8001e94 <HAL_TIM_Base_Init+0x148>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d009      	beq.n	8001d90 <HAL_TIM_Base_Init+0x44>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a45      	ldr	r2, [pc, #276]	; (8001e98 <HAL_TIM_Base_Init+0x14c>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d004      	beq.n	8001d90 <HAL_TIM_Base_Init+0x44>
 8001d86:	f240 1113 	movw	r1, #275	; 0x113
 8001d8a:	4844      	ldr	r0, [pc, #272]	; (8001e9c <HAL_TIM_Base_Init+0x150>)
 8001d8c:	f7fe fb3b 	bl	8000406 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d014      	beq.n	8001dc2 <HAL_TIM_Base_Init+0x76>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2b10      	cmp	r3, #16
 8001d9e:	d010      	beq.n	8001dc2 <HAL_TIM_Base_Init+0x76>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	2b20      	cmp	r3, #32
 8001da6:	d00c      	beq.n	8001dc2 <HAL_TIM_Base_Init+0x76>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	2b40      	cmp	r3, #64	; 0x40
 8001dae:	d008      	beq.n	8001dc2 <HAL_TIM_Base_Init+0x76>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	2b60      	cmp	r3, #96	; 0x60
 8001db6:	d004      	beq.n	8001dc2 <HAL_TIM_Base_Init+0x76>
 8001db8:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001dbc:	4837      	ldr	r0, [pc, #220]	; (8001e9c <HAL_TIM_Base_Init+0x150>)
 8001dbe:	f7fe fb22 	bl	8000406 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00e      	beq.n	8001de8 <HAL_TIM_Base_Init+0x9c>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dd2:	d009      	beq.n	8001de8 <HAL_TIM_Base_Init+0x9c>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ddc:	d004      	beq.n	8001de8 <HAL_TIM_Base_Init+0x9c>
 8001dde:	f240 1115 	movw	r1, #277	; 0x115
 8001de2:	482e      	ldr	r0, [pc, #184]	; (8001e9c <HAL_TIM_Base_Init+0x150>)
 8001de4:	f7fe fb0f 	bl	8000406 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d008      	beq.n	8001e02 <HAL_TIM_Base_Init+0xb6>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	2b80      	cmp	r3, #128	; 0x80
 8001df6:	d004      	beq.n	8001e02 <HAL_TIM_Base_Init+0xb6>
 8001df8:	f44f 718b 	mov.w	r1, #278	; 0x116
 8001dfc:	4827      	ldr	r0, [pc, #156]	; (8001e9c <HAL_TIM_Base_Init+0x150>)
 8001dfe:	f7fe fb02 	bl	8000406 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d106      	bne.n	8001e1c <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7fe fb32 	bl	8000480 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3304      	adds	r3, #4
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4610      	mov	r0, r2
 8001e30:	f000 fc72 	bl	8002718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40012c00 	.word	0x40012c00
 8001e94:	40000400 	.word	0x40000400
 8001e98:	40000800 	.word	0x40000800
 8001e9c:	08003c9c 	.word	0x08003c9c

08001ea0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a2e      	ldr	r2, [pc, #184]	; (8001f68 <HAL_TIM_Base_Start_IT+0xc8>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d013      	beq.n	8001eda <HAL_TIM_Base_Start_IT+0x3a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eba:	d00e      	beq.n	8001eda <HAL_TIM_Base_Start_IT+0x3a>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a2a      	ldr	r2, [pc, #168]	; (8001f6c <HAL_TIM_Base_Start_IT+0xcc>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d009      	beq.n	8001eda <HAL_TIM_Base_Start_IT+0x3a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a29      	ldr	r2, [pc, #164]	; (8001f70 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d004      	beq.n	8001eda <HAL_TIM_Base_Start_IT+0x3a>
 8001ed0:	f240 11cf 	movw	r1, #463	; 0x1cf
 8001ed4:	4827      	ldr	r0, [pc, #156]	; (8001f74 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ed6:	f7fe fa96 	bl	8000406 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d001      	beq.n	8001eea <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e03a      	b.n	8001f60 <HAL_TIM_Base_Start_IT+0xc0>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2202      	movs	r2, #2
 8001eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f042 0201 	orr.w	r2, r2, #1
 8001f00:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a18      	ldr	r2, [pc, #96]	; (8001f68 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d00e      	beq.n	8001f2a <HAL_TIM_Base_Start_IT+0x8a>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f14:	d009      	beq.n	8001f2a <HAL_TIM_Base_Start_IT+0x8a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a14      	ldr	r2, [pc, #80]	; (8001f6c <HAL_TIM_Base_Start_IT+0xcc>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d004      	beq.n	8001f2a <HAL_TIM_Base_Start_IT+0x8a>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a12      	ldr	r2, [pc, #72]	; (8001f70 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d111      	bne.n	8001f4e <HAL_TIM_Base_Start_IT+0xae>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2b06      	cmp	r3, #6
 8001f3a:	d010      	beq.n	8001f5e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0201 	orr.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f4c:	e007      	b.n	8001f5e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f042 0201 	orr.w	r2, r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40012c00 	.word	0x40012c00
 8001f6c:	40000400 	.word	0x40000400
 8001f70:	40000800 	.word	0x40000800
 8001f74:	08003c9c 	.word	0x08003c9c

08001f78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d122      	bne.n	8001fd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d11b      	bne.n	8001fd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f06f 0202 	mvn.w	r2, #2
 8001fa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 fb91 	bl	80026e2 <HAL_TIM_IC_CaptureCallback>
 8001fc0:	e005      	b.n	8001fce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 fb84 	bl	80026d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 fb93 	bl	80026f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	f003 0304 	and.w	r3, r3, #4
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	d122      	bne.n	8002028 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b04      	cmp	r3, #4
 8001fee:	d11b      	bne.n	8002028 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f06f 0204 	mvn.w	r2, #4
 8001ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 fb67 	bl	80026e2 <HAL_TIM_IC_CaptureCallback>
 8002014:	e005      	b.n	8002022 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 fb5a 	bl	80026d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 fb69 	bl	80026f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b08      	cmp	r3, #8
 8002034:	d122      	bne.n	800207c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f003 0308 	and.w	r3, r3, #8
 8002040:	2b08      	cmp	r3, #8
 8002042:	d11b      	bne.n	800207c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f06f 0208 	mvn.w	r2, #8
 800204c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2204      	movs	r2, #4
 8002052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 fb3d 	bl	80026e2 <HAL_TIM_IC_CaptureCallback>
 8002068:	e005      	b.n	8002076 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 fb30 	bl	80026d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 fb3f 	bl	80026f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	f003 0310 	and.w	r3, r3, #16
 8002086:	2b10      	cmp	r3, #16
 8002088:	d122      	bne.n	80020d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f003 0310 	and.w	r3, r3, #16
 8002094:	2b10      	cmp	r3, #16
 8002096:	d11b      	bne.n	80020d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0210 	mvn.w	r2, #16
 80020a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2208      	movs	r2, #8
 80020a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 fb13 	bl	80026e2 <HAL_TIM_IC_CaptureCallback>
 80020bc:	e005      	b.n	80020ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 fb06 	bl	80026d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 fb15 	bl	80026f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d10e      	bne.n	80020fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d107      	bne.n	80020fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f06f 0201 	mvn.w	r2, #1
 80020f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7fe fb28 	bl	800074c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002106:	2b80      	cmp	r3, #128	; 0x80
 8002108:	d10e      	bne.n	8002128 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002114:	2b80      	cmp	r3, #128	; 0x80
 8002116:	d107      	bne.n	8002128 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 fca3 	bl	8002a6e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002132:	2b40      	cmp	r3, #64	; 0x40
 8002134:	d10e      	bne.n	8002154 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002140:	2b40      	cmp	r3, #64	; 0x40
 8002142:	d107      	bne.n	8002154 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800214c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 fad9 	bl	8002706 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	f003 0320 	and.w	r3, r3, #32
 800215e:	2b20      	cmp	r3, #32
 8002160:	d10e      	bne.n	8002180 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	f003 0320 	and.w	r3, r3, #32
 800216c:	2b20      	cmp	r3, #32
 800216e:	d107      	bne.n	8002180 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f06f 0220 	mvn.w	r2, #32
 8002178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 fc6e 	bl	8002a5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002180:	bf00      	nop
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002198:	2b01      	cmp	r3, #1
 800219a:	d101      	bne.n	80021a0 <HAL_TIM_ConfigClockSource+0x18>
 800219c:	2302      	movs	r3, #2
 800219e:	e28b      	b.n	80026b8 <HAL_TIM_ConfigClockSource+0x530>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2202      	movs	r2, #2
 80021ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021b8:	d029      	beq.n	800220e <HAL_TIM_ConfigClockSource+0x86>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021c2:	d024      	beq.n	800220e <HAL_TIM_ConfigClockSource+0x86>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d020      	beq.n	800220e <HAL_TIM_ConfigClockSource+0x86>
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b10      	cmp	r3, #16
 80021d2:	d01c      	beq.n	800220e <HAL_TIM_ConfigClockSource+0x86>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b20      	cmp	r3, #32
 80021da:	d018      	beq.n	800220e <HAL_TIM_ConfigClockSource+0x86>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b30      	cmp	r3, #48	; 0x30
 80021e2:	d014      	beq.n	800220e <HAL_TIM_ConfigClockSource+0x86>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b40      	cmp	r3, #64	; 0x40
 80021ea:	d010      	beq.n	800220e <HAL_TIM_ConfigClockSource+0x86>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b50      	cmp	r3, #80	; 0x50
 80021f2:	d00c      	beq.n	800220e <HAL_TIM_ConfigClockSource+0x86>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b60      	cmp	r3, #96	; 0x60
 80021fa:	d008      	beq.n	800220e <HAL_TIM_ConfigClockSource+0x86>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b70      	cmp	r3, #112	; 0x70
 8002202:	d004      	beq.n	800220e <HAL_TIM_ConfigClockSource+0x86>
 8002204:	f241 411d 	movw	r1, #5149	; 0x141d
 8002208:	489e      	ldr	r0, [pc, #632]	; (8002484 <HAL_TIM_ConfigClockSource+0x2fc>)
 800220a:	f7fe f8fc 	bl	8000406 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800221c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002224:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002236:	f000 80be 	beq.w	80023b6 <HAL_TIM_ConfigClockSource+0x22e>
 800223a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800223e:	f200 822f 	bhi.w	80026a0 <HAL_TIM_ConfigClockSource+0x518>
 8002242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002246:	d02d      	beq.n	80022a4 <HAL_TIM_ConfigClockSource+0x11c>
 8002248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800224c:	f200 8228 	bhi.w	80026a0 <HAL_TIM_ConfigClockSource+0x518>
 8002250:	2b70      	cmp	r3, #112	; 0x70
 8002252:	d045      	beq.n	80022e0 <HAL_TIM_ConfigClockSource+0x158>
 8002254:	2b70      	cmp	r3, #112	; 0x70
 8002256:	f200 8223 	bhi.w	80026a0 <HAL_TIM_ConfigClockSource+0x518>
 800225a:	2b60      	cmp	r3, #96	; 0x60
 800225c:	f000 8166 	beq.w	800252c <HAL_TIM_ConfigClockSource+0x3a4>
 8002260:	2b60      	cmp	r3, #96	; 0x60
 8002262:	f200 821d 	bhi.w	80026a0 <HAL_TIM_ConfigClockSource+0x518>
 8002266:	2b50      	cmp	r3, #80	; 0x50
 8002268:	f000 8114 	beq.w	8002494 <HAL_TIM_ConfigClockSource+0x30c>
 800226c:	2b50      	cmp	r3, #80	; 0x50
 800226e:	f200 8217 	bhi.w	80026a0 <HAL_TIM_ConfigClockSource+0x518>
 8002272:	2b40      	cmp	r3, #64	; 0x40
 8002274:	f000 81a6 	beq.w	80025c4 <HAL_TIM_ConfigClockSource+0x43c>
 8002278:	2b40      	cmp	r3, #64	; 0x40
 800227a:	f200 8211 	bhi.w	80026a0 <HAL_TIM_ConfigClockSource+0x518>
 800227e:	2b30      	cmp	r3, #48	; 0x30
 8002280:	f000 81ec 	beq.w	800265c <HAL_TIM_ConfigClockSource+0x4d4>
 8002284:	2b30      	cmp	r3, #48	; 0x30
 8002286:	f200 820b 	bhi.w	80026a0 <HAL_TIM_ConfigClockSource+0x518>
 800228a:	2b20      	cmp	r3, #32
 800228c:	f000 81e6 	beq.w	800265c <HAL_TIM_ConfigClockSource+0x4d4>
 8002290:	2b20      	cmp	r3, #32
 8002292:	f200 8205 	bhi.w	80026a0 <HAL_TIM_ConfigClockSource+0x518>
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 81e0 	beq.w	800265c <HAL_TIM_ConfigClockSource+0x4d4>
 800229c:	2b10      	cmp	r3, #16
 800229e:	f000 81dd 	beq.w	800265c <HAL_TIM_ConfigClockSource+0x4d4>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80022a2:	e1fd      	b.n	80026a0 <HAL_TIM_ConfigClockSource+0x518>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a77      	ldr	r2, [pc, #476]	; (8002488 <HAL_TIM_ConfigClockSource+0x300>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	f000 81fa 	beq.w	80026a4 <HAL_TIM_ConfigClockSource+0x51c>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b8:	f000 81f4 	beq.w	80026a4 <HAL_TIM_ConfigClockSource+0x51c>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a72      	ldr	r2, [pc, #456]	; (800248c <HAL_TIM_ConfigClockSource+0x304>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	f000 81ee 	beq.w	80026a4 <HAL_TIM_ConfigClockSource+0x51c>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a70      	ldr	r2, [pc, #448]	; (8002490 <HAL_TIM_ConfigClockSource+0x308>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	f000 81e8 	beq.w	80026a4 <HAL_TIM_ConfigClockSource+0x51c>
 80022d4:	f241 4129 	movw	r1, #5161	; 0x1429
 80022d8:	486a      	ldr	r0, [pc, #424]	; (8002484 <HAL_TIM_ConfigClockSource+0x2fc>)
 80022da:	f7fe f894 	bl	8000406 <assert_failed>
      break;
 80022de:	e1e1      	b.n	80026a4 <HAL_TIM_ConfigClockSource+0x51c>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a68      	ldr	r2, [pc, #416]	; (8002488 <HAL_TIM_ConfigClockSource+0x300>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d013      	beq.n	8002312 <HAL_TIM_ConfigClockSource+0x18a>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f2:	d00e      	beq.n	8002312 <HAL_TIM_ConfigClockSource+0x18a>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a64      	ldr	r2, [pc, #400]	; (800248c <HAL_TIM_ConfigClockSource+0x304>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d009      	beq.n	8002312 <HAL_TIM_ConfigClockSource+0x18a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a63      	ldr	r2, [pc, #396]	; (8002490 <HAL_TIM_ConfigClockSource+0x308>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d004      	beq.n	8002312 <HAL_TIM_ConfigClockSource+0x18a>
 8002308:	f241 4130 	movw	r1, #5168	; 0x1430
 800230c:	485d      	ldr	r0, [pc, #372]	; (8002484 <HAL_TIM_ConfigClockSource+0x2fc>)
 800230e:	f7fe f87a 	bl	8000406 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d013      	beq.n	8002342 <HAL_TIM_ConfigClockSource+0x1ba>
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002322:	d00e      	beq.n	8002342 <HAL_TIM_ConfigClockSource+0x1ba>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800232c:	d009      	beq.n	8002342 <HAL_TIM_ConfigClockSource+0x1ba>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002336:	d004      	beq.n	8002342 <HAL_TIM_ConfigClockSource+0x1ba>
 8002338:	f241 4133 	movw	r1, #5171	; 0x1433
 800233c:	4851      	ldr	r0, [pc, #324]	; (8002484 <HAL_TIM_ConfigClockSource+0x2fc>)
 800233e:	f7fe f862 	bl	8000406 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800234a:	d014      	beq.n	8002376 <HAL_TIM_ConfigClockSource+0x1ee>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d010      	beq.n	8002376 <HAL_TIM_ConfigClockSource+0x1ee>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00c      	beq.n	8002376 <HAL_TIM_ConfigClockSource+0x1ee>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b02      	cmp	r3, #2
 8002362:	d008      	beq.n	8002376 <HAL_TIM_ConfigClockSource+0x1ee>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b0a      	cmp	r3, #10
 800236a:	d004      	beq.n	8002376 <HAL_TIM_ConfigClockSource+0x1ee>
 800236c:	f241 4134 	movw	r1, #5172	; 0x1434
 8002370:	4844      	ldr	r0, [pc, #272]	; (8002484 <HAL_TIM_ConfigClockSource+0x2fc>)
 8002372:	f7fe f848 	bl	8000406 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	2b0f      	cmp	r3, #15
 800237c:	d904      	bls.n	8002388 <HAL_TIM_ConfigClockSource+0x200>
 800237e:	f241 4135 	movw	r1, #5173	; 0x1435
 8002382:	4840      	ldr	r0, [pc, #256]	; (8002484 <HAL_TIM_ConfigClockSource+0x2fc>)
 8002384:	f7fe f83f 	bl	8000406 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6818      	ldr	r0, [r3, #0]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	6899      	ldr	r1, [r3, #8]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	f000 fa97 	bl	80028ca <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023aa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	609a      	str	r2, [r3, #8]
      break;
 80023b4:	e177      	b.n	80026a6 <HAL_TIM_ConfigClockSource+0x51e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a33      	ldr	r2, [pc, #204]	; (8002488 <HAL_TIM_ConfigClockSource+0x300>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d013      	beq.n	80023e8 <HAL_TIM_ConfigClockSource+0x260>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c8:	d00e      	beq.n	80023e8 <HAL_TIM_ConfigClockSource+0x260>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a2f      	ldr	r2, [pc, #188]	; (800248c <HAL_TIM_ConfigClockSource+0x304>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d009      	beq.n	80023e8 <HAL_TIM_ConfigClockSource+0x260>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a2d      	ldr	r2, [pc, #180]	; (8002490 <HAL_TIM_ConfigClockSource+0x308>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d004      	beq.n	80023e8 <HAL_TIM_ConfigClockSource+0x260>
 80023de:	f241 4148 	movw	r1, #5192	; 0x1448
 80023e2:	4828      	ldr	r0, [pc, #160]	; (8002484 <HAL_TIM_ConfigClockSource+0x2fc>)
 80023e4:	f7fe f80f 	bl	8000406 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d013      	beq.n	8002418 <HAL_TIM_ConfigClockSource+0x290>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023f8:	d00e      	beq.n	8002418 <HAL_TIM_ConfigClockSource+0x290>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002402:	d009      	beq.n	8002418 <HAL_TIM_ConfigClockSource+0x290>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800240c:	d004      	beq.n	8002418 <HAL_TIM_ConfigClockSource+0x290>
 800240e:	f241 414b 	movw	r1, #5195	; 0x144b
 8002412:	481c      	ldr	r0, [pc, #112]	; (8002484 <HAL_TIM_ConfigClockSource+0x2fc>)
 8002414:	f7fd fff7 	bl	8000406 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002420:	d014      	beq.n	800244c <HAL_TIM_ConfigClockSource+0x2c4>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d010      	beq.n	800244c <HAL_TIM_ConfigClockSource+0x2c4>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00c      	beq.n	800244c <HAL_TIM_ConfigClockSource+0x2c4>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d008      	beq.n	800244c <HAL_TIM_ConfigClockSource+0x2c4>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b0a      	cmp	r3, #10
 8002440:	d004      	beq.n	800244c <HAL_TIM_ConfigClockSource+0x2c4>
 8002442:	f241 414c 	movw	r1, #5196	; 0x144c
 8002446:	480f      	ldr	r0, [pc, #60]	; (8002484 <HAL_TIM_ConfigClockSource+0x2fc>)
 8002448:	f7fd ffdd 	bl	8000406 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	2b0f      	cmp	r3, #15
 8002452:	d904      	bls.n	800245e <HAL_TIM_ConfigClockSource+0x2d6>
 8002454:	f241 414d 	movw	r1, #5197	; 0x144d
 8002458:	480a      	ldr	r0, [pc, #40]	; (8002484 <HAL_TIM_ConfigClockSource+0x2fc>)
 800245a:	f7fd ffd4 	bl	8000406 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	6899      	ldr	r1, [r3, #8]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	f000 fa2c 	bl	80028ca <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002480:	609a      	str	r2, [r3, #8]
      break;
 8002482:	e110      	b.n	80026a6 <HAL_TIM_ConfigClockSource+0x51e>
 8002484:	08003c9c 	.word	0x08003c9c
 8002488:	40012c00 	.word	0x40012c00
 800248c:	40000400 	.word	0x40000400
 8002490:	40000800 	.word	0x40000800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a89      	ldr	r2, [pc, #548]	; (80026c0 <HAL_TIM_ConfigClockSource+0x538>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d013      	beq.n	80024c6 <HAL_TIM_ConfigClockSource+0x33e>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a6:	d00e      	beq.n	80024c6 <HAL_TIM_ConfigClockSource+0x33e>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a85      	ldr	r2, [pc, #532]	; (80026c4 <HAL_TIM_ConfigClockSource+0x53c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d009      	beq.n	80024c6 <HAL_TIM_ConfigClockSource+0x33e>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a84      	ldr	r2, [pc, #528]	; (80026c8 <HAL_TIM_ConfigClockSource+0x540>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d004      	beq.n	80024c6 <HAL_TIM_ConfigClockSource+0x33e>
 80024bc:	f241 415c 	movw	r1, #5212	; 0x145c
 80024c0:	4882      	ldr	r0, [pc, #520]	; (80026cc <HAL_TIM_ConfigClockSource+0x544>)
 80024c2:	f7fd ffa0 	bl	8000406 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ce:	d014      	beq.n	80024fa <HAL_TIM_ConfigClockSource+0x372>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d010      	beq.n	80024fa <HAL_TIM_ConfigClockSource+0x372>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00c      	beq.n	80024fa <HAL_TIM_ConfigClockSource+0x372>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d008      	beq.n	80024fa <HAL_TIM_ConfigClockSource+0x372>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b0a      	cmp	r3, #10
 80024ee:	d004      	beq.n	80024fa <HAL_TIM_ConfigClockSource+0x372>
 80024f0:	f241 415f 	movw	r1, #5215	; 0x145f
 80024f4:	4875      	ldr	r0, [pc, #468]	; (80026cc <HAL_TIM_ConfigClockSource+0x544>)
 80024f6:	f7fd ff86 	bl	8000406 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	2b0f      	cmp	r3, #15
 8002500:	d904      	bls.n	800250c <HAL_TIM_ConfigClockSource+0x384>
 8002502:	f44f 51a3 	mov.w	r1, #5216	; 0x1460
 8002506:	4871      	ldr	r0, [pc, #452]	; (80026cc <HAL_TIM_ConfigClockSource+0x544>)
 8002508:	f7fd ff7d 	bl	8000406 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6818      	ldr	r0, [r3, #0]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	6859      	ldr	r1, [r3, #4]
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	461a      	mov	r2, r3
 800251a:	f000 f95f 	bl	80027dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2150      	movs	r1, #80	; 0x50
 8002524:	4618      	mov	r0, r3
 8002526:	f000 f9b6 	bl	8002896 <TIM_ITRx_SetConfig>
      break;
 800252a:	e0bc      	b.n	80026a6 <HAL_TIM_ConfigClockSource+0x51e>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a63      	ldr	r2, [pc, #396]	; (80026c0 <HAL_TIM_ConfigClockSource+0x538>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d013      	beq.n	800255e <HAL_TIM_ConfigClockSource+0x3d6>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800253e:	d00e      	beq.n	800255e <HAL_TIM_ConfigClockSource+0x3d6>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a5f      	ldr	r2, [pc, #380]	; (80026c4 <HAL_TIM_ConfigClockSource+0x53c>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d009      	beq.n	800255e <HAL_TIM_ConfigClockSource+0x3d6>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a5e      	ldr	r2, [pc, #376]	; (80026c8 <HAL_TIM_ConfigClockSource+0x540>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d004      	beq.n	800255e <HAL_TIM_ConfigClockSource+0x3d6>
 8002554:	f241 416c 	movw	r1, #5228	; 0x146c
 8002558:	485c      	ldr	r0, [pc, #368]	; (80026cc <HAL_TIM_ConfigClockSource+0x544>)
 800255a:	f7fd ff54 	bl	8000406 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002566:	d014      	beq.n	8002592 <HAL_TIM_ConfigClockSource+0x40a>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d010      	beq.n	8002592 <HAL_TIM_ConfigClockSource+0x40a>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00c      	beq.n	8002592 <HAL_TIM_ConfigClockSource+0x40a>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b02      	cmp	r3, #2
 800257e:	d008      	beq.n	8002592 <HAL_TIM_ConfigClockSource+0x40a>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b0a      	cmp	r3, #10
 8002586:	d004      	beq.n	8002592 <HAL_TIM_ConfigClockSource+0x40a>
 8002588:	f241 416f 	movw	r1, #5231	; 0x146f
 800258c:	484f      	ldr	r0, [pc, #316]	; (80026cc <HAL_TIM_ConfigClockSource+0x544>)
 800258e:	f7fd ff3a 	bl	8000406 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	2b0f      	cmp	r3, #15
 8002598:	d904      	bls.n	80025a4 <HAL_TIM_ConfigClockSource+0x41c>
 800259a:	f241 4170 	movw	r1, #5232	; 0x1470
 800259e:	484b      	ldr	r0, [pc, #300]	; (80026cc <HAL_TIM_ConfigClockSource+0x544>)
 80025a0:	f7fd ff31 	bl	8000406 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	6859      	ldr	r1, [r3, #4]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	461a      	mov	r2, r3
 80025b2:	f000 f941 	bl	8002838 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2160      	movs	r1, #96	; 0x60
 80025bc:	4618      	mov	r0, r3
 80025be:	f000 f96a 	bl	8002896 <TIM_ITRx_SetConfig>
      break;
 80025c2:	e070      	b.n	80026a6 <HAL_TIM_ConfigClockSource+0x51e>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a3d      	ldr	r2, [pc, #244]	; (80026c0 <HAL_TIM_ConfigClockSource+0x538>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d013      	beq.n	80025f6 <HAL_TIM_ConfigClockSource+0x46e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d6:	d00e      	beq.n	80025f6 <HAL_TIM_ConfigClockSource+0x46e>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a39      	ldr	r2, [pc, #228]	; (80026c4 <HAL_TIM_ConfigClockSource+0x53c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d009      	beq.n	80025f6 <HAL_TIM_ConfigClockSource+0x46e>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a38      	ldr	r2, [pc, #224]	; (80026c8 <HAL_TIM_ConfigClockSource+0x540>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d004      	beq.n	80025f6 <HAL_TIM_ConfigClockSource+0x46e>
 80025ec:	f241 417c 	movw	r1, #5244	; 0x147c
 80025f0:	4836      	ldr	r0, [pc, #216]	; (80026cc <HAL_TIM_ConfigClockSource+0x544>)
 80025f2:	f7fd ff08 	bl	8000406 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025fe:	d014      	beq.n	800262a <HAL_TIM_ConfigClockSource+0x4a2>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d010      	beq.n	800262a <HAL_TIM_ConfigClockSource+0x4a2>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00c      	beq.n	800262a <HAL_TIM_ConfigClockSource+0x4a2>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b02      	cmp	r3, #2
 8002616:	d008      	beq.n	800262a <HAL_TIM_ConfigClockSource+0x4a2>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b0a      	cmp	r3, #10
 800261e:	d004      	beq.n	800262a <HAL_TIM_ConfigClockSource+0x4a2>
 8002620:	f241 417f 	movw	r1, #5247	; 0x147f
 8002624:	4829      	ldr	r0, [pc, #164]	; (80026cc <HAL_TIM_ConfigClockSource+0x544>)
 8002626:	f7fd feee 	bl	8000406 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	2b0f      	cmp	r3, #15
 8002630:	d904      	bls.n	800263c <HAL_TIM_ConfigClockSource+0x4b4>
 8002632:	f44f 51a4 	mov.w	r1, #5248	; 0x1480
 8002636:	4825      	ldr	r0, [pc, #148]	; (80026cc <HAL_TIM_ConfigClockSource+0x544>)
 8002638:	f7fd fee5 	bl	8000406 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6818      	ldr	r0, [r3, #0]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	6859      	ldr	r1, [r3, #4]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	461a      	mov	r2, r3
 800264a:	f000 f8c7 	bl	80027dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2140      	movs	r1, #64	; 0x40
 8002654:	4618      	mov	r0, r3
 8002656:	f000 f91e 	bl	8002896 <TIM_ITRx_SetConfig>
      break;
 800265a:	e024      	b.n	80026a6 <HAL_TIM_ConfigClockSource+0x51e>
        assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a17      	ldr	r2, [pc, #92]	; (80026c0 <HAL_TIM_ConfigClockSource+0x538>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d013      	beq.n	800268e <HAL_TIM_ConfigClockSource+0x506>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800266e:	d00e      	beq.n	800268e <HAL_TIM_ConfigClockSource+0x506>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a13      	ldr	r2, [pc, #76]	; (80026c4 <HAL_TIM_ConfigClockSource+0x53c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d009      	beq.n	800268e <HAL_TIM_ConfigClockSource+0x506>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a12      	ldr	r2, [pc, #72]	; (80026c8 <HAL_TIM_ConfigClockSource+0x540>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d004      	beq.n	800268e <HAL_TIM_ConfigClockSource+0x506>
 8002684:	f241 418f 	movw	r1, #5263	; 0x148f
 8002688:	4810      	ldr	r0, [pc, #64]	; (80026cc <HAL_TIM_ConfigClockSource+0x544>)
 800268a:	f7fd febc 	bl	8000406 <assert_failed>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4619      	mov	r1, r3
 8002698:	4610      	mov	r0, r2
 800269a:	f000 f8fc 	bl	8002896 <TIM_ITRx_SetConfig>
        break;
 800269e:	e002      	b.n	80026a6 <HAL_TIM_ConfigClockSource+0x51e>
      break;
 80026a0:	bf00      	nop
 80026a2:	e000      	b.n	80026a6 <HAL_TIM_ConfigClockSource+0x51e>
      break;
 80026a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40012c00 	.word	0x40012c00
 80026c4:	40000400 	.word	0x40000400
 80026c8:	40000800 	.word	0x40000800
 80026cc:	08003c9c 	.word	0x08003c9c

080026d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr

080026e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr

08002706 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr

08002718 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a29      	ldr	r2, [pc, #164]	; (80027d0 <TIM_Base_SetConfig+0xb8>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d00b      	beq.n	8002748 <TIM_Base_SetConfig+0x30>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002736:	d007      	beq.n	8002748 <TIM_Base_SetConfig+0x30>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a26      	ldr	r2, [pc, #152]	; (80027d4 <TIM_Base_SetConfig+0xbc>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d003      	beq.n	8002748 <TIM_Base_SetConfig+0x30>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a25      	ldr	r2, [pc, #148]	; (80027d8 <TIM_Base_SetConfig+0xc0>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d108      	bne.n	800275a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800274e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	4313      	orrs	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a1c      	ldr	r2, [pc, #112]	; (80027d0 <TIM_Base_SetConfig+0xb8>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d00b      	beq.n	800277a <TIM_Base_SetConfig+0x62>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002768:	d007      	beq.n	800277a <TIM_Base_SetConfig+0x62>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a19      	ldr	r2, [pc, #100]	; (80027d4 <TIM_Base_SetConfig+0xbc>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d003      	beq.n	800277a <TIM_Base_SetConfig+0x62>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a18      	ldr	r2, [pc, #96]	; (80027d8 <TIM_Base_SetConfig+0xc0>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d108      	bne.n	800278c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	4313      	orrs	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	4313      	orrs	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a07      	ldr	r2, [pc, #28]	; (80027d0 <TIM_Base_SetConfig+0xb8>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d103      	bne.n	80027c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	615a      	str	r2, [r3, #20]
}
 80027c6:	bf00      	nop
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr
 80027d0:	40012c00 	.word	0x40012c00
 80027d4:	40000400 	.word	0x40000400
 80027d8:	40000800 	.word	0x40000800

080027dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	f023 0201 	bic.w	r2, r3, #1
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002806:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	4313      	orrs	r3, r2
 8002810:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f023 030a 	bic.w	r3, r3, #10
 8002818:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	4313      	orrs	r3, r2
 8002820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	621a      	str	r2, [r3, #32]
}
 800282e:	bf00      	nop
 8002830:	371c      	adds	r7, #28
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr

08002838 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	f023 0210 	bic.w	r2, r3, #16
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002862:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	031b      	lsls	r3, r3, #12
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	4313      	orrs	r3, r2
 800286c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002874:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	621a      	str	r2, [r3, #32]
}
 800288c:	bf00      	nop
 800288e:	371c      	adds	r7, #28
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr

08002896 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002896:	b480      	push	{r7}
 8002898:	b085      	sub	sp, #20
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
 800289e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f043 0307 	orr.w	r3, r3, #7
 80028b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	609a      	str	r2, [r3, #8]
}
 80028c0:	bf00      	nop
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr

080028ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b087      	sub	sp, #28
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	60f8      	str	r0, [r7, #12]
 80028d2:	60b9      	str	r1, [r7, #8]
 80028d4:	607a      	str	r2, [r7, #4]
 80028d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	021a      	lsls	r2, r3, #8
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	431a      	orrs	r2, r3
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	609a      	str	r2, [r3, #8]
}
 80028fe:	bf00      	nop
 8002900:	371c      	adds	r7, #28
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a4d      	ldr	r2, [pc, #308]	; (8002a4c <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d013      	beq.n	8002944 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002924:	d00e      	beq.n	8002944 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a49      	ldr	r2, [pc, #292]	; (8002a50 <HAL_TIMEx_MasterConfigSynchronization+0x148>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d009      	beq.n	8002944 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a47      	ldr	r2, [pc, #284]	; (8002a54 <HAL_TIMEx_MasterConfigSynchronization+0x14c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d004      	beq.n	8002944 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800293a:	f240 715f 	movw	r1, #1887	; 0x75f
 800293e:	4846      	ldr	r0, [pc, #280]	; (8002a58 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 8002940:	f7fd fd61 	bl	8000406 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d020      	beq.n	800298e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b10      	cmp	r3, #16
 8002952:	d01c      	beq.n	800298e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2b20      	cmp	r3, #32
 800295a:	d018      	beq.n	800298e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b30      	cmp	r3, #48	; 0x30
 8002962:	d014      	beq.n	800298e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b40      	cmp	r3, #64	; 0x40
 800296a:	d010      	beq.n	800298e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b50      	cmp	r3, #80	; 0x50
 8002972:	d00c      	beq.n	800298e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b60      	cmp	r3, #96	; 0x60
 800297a:	d008      	beq.n	800298e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b70      	cmp	r3, #112	; 0x70
 8002982:	d004      	beq.n	800298e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002984:	f44f 61ec 	mov.w	r1, #1888	; 0x760
 8002988:	4833      	ldr	r0, [pc, #204]	; (8002a58 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 800298a:	f7fd fd3c 	bl	8000406 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b80      	cmp	r3, #128	; 0x80
 8002994:	d008      	beq.n	80029a8 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d004      	beq.n	80029a8 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 800299e:	f240 7161 	movw	r1, #1889	; 0x761
 80029a2:	482d      	ldr	r0, [pc, #180]	; (8002a58 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 80029a4:	f7fd fd2f 	bl	8000406 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d101      	bne.n	80029b6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80029b2:	2302      	movs	r3, #2
 80029b4:	e046      	b.n	8002a44 <HAL_TIMEx_MasterConfigSynchronization+0x13c>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2202      	movs	r2, #2
 80029c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a15      	ldr	r2, [pc, #84]	; (8002a4c <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d00e      	beq.n	8002a18 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a02:	d009      	beq.n	8002a18 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a11      	ldr	r2, [pc, #68]	; (8002a50 <HAL_TIMEx_MasterConfigSynchronization+0x148>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d004      	beq.n	8002a18 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a10      	ldr	r2, [pc, #64]	; (8002a54 <HAL_TIMEx_MasterConfigSynchronization+0x14c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d10c      	bne.n	8002a32 <HAL_TIMEx_MasterConfigSynchronization+0x12a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68ba      	ldr	r2, [r7, #8]
 8002a30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40012c00 	.word	0x40012c00
 8002a50:	40000400 	.word	0x40000400
 8002a54:	40000800 	.word	0x40000800
 8002a58:	08003cd4 	.word	0x08003cd4

08002a5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bc80      	pop	{r7}
 8002a6c:	4770      	bx	lr

08002a6e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr

08002a80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e092      	b.n	8002bb8 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d02c      	beq.n	8002af4 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a48      	ldr	r2, [pc, #288]	; (8002bc0 <HAL_UART_Init+0x140>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d00e      	beq.n	8002ac2 <HAL_UART_Init+0x42>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a46      	ldr	r2, [pc, #280]	; (8002bc4 <HAL_UART_Init+0x144>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d009      	beq.n	8002ac2 <HAL_UART_Init+0x42>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a45      	ldr	r2, [pc, #276]	; (8002bc8 <HAL_UART_Init+0x148>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d004      	beq.n	8002ac2 <HAL_UART_Init+0x42>
 8002ab8:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8002abc:	4843      	ldr	r0, [pc, #268]	; (8002bcc <HAL_UART_Init+0x14c>)
 8002abe:	f7fd fca2 	bl	8000406 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d028      	beq.n	8002b1c <HAL_UART_Init+0x9c>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ad2:	d023      	beq.n	8002b1c <HAL_UART_Init+0x9c>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002adc:	d01e      	beq.n	8002b1c <HAL_UART_Init+0x9c>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ae6:	d019      	beq.n	8002b1c <HAL_UART_Init+0x9c>
 8002ae8:	f240 1147 	movw	r1, #327	; 0x147
 8002aec:	4837      	ldr	r0, [pc, #220]	; (8002bcc <HAL_UART_Init+0x14c>)
 8002aee:	f7fd fc8a 	bl	8000406 <assert_failed>
 8002af2:	e013      	b.n	8002b1c <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a31      	ldr	r2, [pc, #196]	; (8002bc0 <HAL_UART_Init+0x140>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d00e      	beq.n	8002b1c <HAL_UART_Init+0x9c>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a30      	ldr	r2, [pc, #192]	; (8002bc4 <HAL_UART_Init+0x144>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d009      	beq.n	8002b1c <HAL_UART_Init+0x9c>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a2e      	ldr	r2, [pc, #184]	; (8002bc8 <HAL_UART_Init+0x148>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d004      	beq.n	8002b1c <HAL_UART_Init+0x9c>
 8002b12:	f240 114b 	movw	r1, #331	; 0x14b
 8002b16:	482d      	ldr	r0, [pc, #180]	; (8002bcc <HAL_UART_Init+0x14c>)
 8002b18:	f7fd fc75 	bl	8000406 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d009      	beq.n	8002b38 <HAL_UART_Init+0xb8>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b2c:	d004      	beq.n	8002b38 <HAL_UART_Init+0xb8>
 8002b2e:	f240 114d 	movw	r1, #333	; 0x14d
 8002b32:	4826      	ldr	r0, [pc, #152]	; (8002bcc <HAL_UART_Init+0x14c>)
 8002b34:	f7fd fc67 	bl	8000406 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d106      	bne.n	8002b52 <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f7fd fcbd 	bl	80004cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2224      	movs	r2, #36	; 0x24
 8002b56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b68:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 faa8 	bl	80030c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	691a      	ldr	r2, [r3, #16]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b7e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695a      	ldr	r2, [r3, #20]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b8e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b9e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2220      	movs	r2, #32
 8002baa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40013800 	.word	0x40013800
 8002bc4:	40004400 	.word	0x40004400
 8002bc8:	40004800 	.word	0x40004800
 8002bcc:	08003d10 	.word	0x08003d10

08002bd0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b20      	cmp	r3, #32
 8002be8:	d130      	bne.n	8002c4c <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d002      	beq.n	8002bf6 <HAL_UART_Transmit_IT+0x26>
 8002bf0:	88fb      	ldrh	r3, [r7, #6]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e029      	b.n	8002c4e <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d101      	bne.n	8002c08 <HAL_UART_Transmit_IT+0x38>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e022      	b.n	8002c4e <HAL_UART_Transmit_IT+0x7e>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	88fa      	ldrh	r2, [r7, #6]
 8002c1a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	88fa      	ldrh	r2, [r7, #6]
 8002c20:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2221      	movs	r2, #33	; 0x21
 8002c2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68da      	ldr	r2, [r3, #12]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c46:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	e000      	b.n	8002c4e <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002c4c:	2302      	movs	r3, #2
  }
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr

08002c58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10d      	bne.n	8002caa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	f003 0320 	and.w	r3, r3, #32
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <HAL_UART_IRQHandler+0x52>
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	f003 0320 	and.w	r3, r3, #32
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f98b 	bl	8002fbe <UART_Receive_IT>
      return;
 8002ca8:	e0d0      	b.n	8002e4c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 80b0 	beq.w	8002e12 <HAL_UART_IRQHandler+0x1ba>
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d105      	bne.n	8002cc8 <HAL_UART_IRQHandler+0x70>
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 80a5 	beq.w	8002e12 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00a      	beq.n	8002ce8 <HAL_UART_IRQHandler+0x90>
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce0:	f043 0201 	orr.w	r2, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f003 0304 	and.w	r3, r3, #4
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00a      	beq.n	8002d08 <HAL_UART_IRQHandler+0xb0>
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d00:	f043 0202 	orr.w	r2, r3, #2
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <HAL_UART_IRQHandler+0xd0>
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d20:	f043 0204 	orr.w	r2, r3, #4
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00f      	beq.n	8002d52 <HAL_UART_IRQHandler+0xfa>
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	f003 0320 	and.w	r3, r3, #32
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d104      	bne.n	8002d46 <HAL_UART_IRQHandler+0xee>
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d005      	beq.n	8002d52 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4a:	f043 0208 	orr.w	r2, r3, #8
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d077      	beq.n	8002e4a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	f003 0320 	and.w	r3, r3, #32
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d007      	beq.n	8002d74 <HAL_UART_IRQHandler+0x11c>
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	f003 0320 	and.w	r3, r3, #32
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f925 	bl	8002fbe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	bf14      	ite	ne
 8002d82:	2301      	movne	r3, #1
 8002d84:	2300      	moveq	r3, #0
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d102      	bne.n	8002d9c <HAL_UART_IRQHandler+0x144>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d031      	beq.n	8002e00 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f876 	bl	8002e8e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d023      	beq.n	8002df8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695a      	ldr	r2, [r3, #20]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dbe:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d013      	beq.n	8002df0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dcc:	4a21      	ldr	r2, [pc, #132]	; (8002e54 <HAL_UART_IRQHandler+0x1fc>)
 8002dce:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fd fec9 	bl	8000b6c <HAL_DMA_Abort_IT>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d016      	beq.n	8002e0e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002dea:	4610      	mov	r0, r2
 8002dec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dee:	e00e      	b.n	8002e0e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f843 	bl	8002e7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002df6:	e00a      	b.n	8002e0e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 f83f 	bl	8002e7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dfe:	e006      	b.n	8002e0e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f83b 	bl	8002e7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002e0c:	e01d      	b.n	8002e4a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e0e:	bf00      	nop
    return;
 8002e10:	e01b      	b.n	8002e4a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <HAL_UART_IRQHandler+0x1d6>
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f862 	bl	8002ef0 <UART_Transmit_IT>
    return;
 8002e2c:	e00e      	b.n	8002e4c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d009      	beq.n	8002e4c <HAL_UART_IRQHandler+0x1f4>
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d004      	beq.n	8002e4c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f8a3 	bl	8002f8e <UART_EndTransmit_IT>
    return;
 8002e48:	e000      	b.n	8002e4c <HAL_UART_IRQHandler+0x1f4>
    return;
 8002e4a:	bf00      	nop
  }
}
 8002e4c:	3720      	adds	r7, #32
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	08002ec9 	.word	0x08002ec9

08002e58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr

08002e6a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr

08002e7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr

08002e8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ea4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695a      	ldr	r2, [r3, #20]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0201 	bic.w	r2, r2, #1
 8002eb4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr

08002ec8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f7ff ffca 	bl	8002e7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ee8:	bf00      	nop
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b21      	cmp	r3, #33	; 0x21
 8002f02:	d13e      	bne.n	8002f82 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f0c:	d114      	bne.n	8002f38 <UART_Transmit_IT+0x48>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d110      	bne.n	8002f38 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f2a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	1c9a      	adds	r2, r3, #2
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	621a      	str	r2, [r3, #32]
 8002f36:	e008      	b.n	8002f4a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	1c59      	adds	r1, r3, #1
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6211      	str	r1, [r2, #32]
 8002f42:	781a      	ldrb	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	3b01      	subs	r3, #1
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	4619      	mov	r1, r3
 8002f58:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10f      	bne.n	8002f7e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68da      	ldr	r2, [r3, #12]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f6c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f7c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	e000      	b.n	8002f84 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f82:	2302      	movs	r3, #2
  }
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr

08002f8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b082      	sub	sp, #8
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fa4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2220      	movs	r2, #32
 8002faa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7ff ff52 	bl	8002e58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b084      	sub	sp, #16
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b22      	cmp	r3, #34	; 0x22
 8002fd0:	d170      	bne.n	80030b4 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fda:	d117      	bne.n	800300c <UART_Receive_IT+0x4e>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d113      	bne.n	800300c <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fec:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003004:	1c9a      	adds	r2, r3, #2
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	629a      	str	r2, [r3, #40]	; 0x28
 800300a:	e026      	b.n	800305a <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003010:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003012:	2300      	movs	r3, #0
 8003014:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800301e:	d007      	beq.n	8003030 <UART_Receive_IT+0x72>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10a      	bne.n	800303e <UART_Receive_IT+0x80>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d106      	bne.n	800303e <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	b2da      	uxtb	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	701a      	strb	r2, [r3, #0]
 800303c:	e008      	b.n	8003050 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	b2db      	uxtb	r3, r3
 8003046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800304a:	b2da      	uxtb	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003054:	1c5a      	adds	r2, r3, #1
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800305e:	b29b      	uxth	r3, r3
 8003060:	3b01      	subs	r3, #1
 8003062:	b29b      	uxth	r3, r3
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	4619      	mov	r1, r3
 8003068:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800306a:	2b00      	cmp	r3, #0
 800306c:	d120      	bne.n	80030b0 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0220 	bic.w	r2, r2, #32
 800307c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68da      	ldr	r2, [r3, #12]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800308c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695a      	ldr	r2, [r3, #20]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0201 	bic.w	r2, r2, #1
 800309c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7ff fedf 	bl	8002e6a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80030ac:	2300      	movs	r3, #0
 80030ae:	e002      	b.n	80030b6 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	e000      	b.n	80030b6 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80030b4:	2302      	movs	r3, #2
  }
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
	...

080030c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	4a5f      	ldr	r2, [pc, #380]	; (800324c <UART_SetConfig+0x18c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d904      	bls.n	80030dc <UART_SetConfig+0x1c>
 80030d2:	f640 31f6 	movw	r1, #3062	; 0xbf6
 80030d6:	485e      	ldr	r0, [pc, #376]	; (8003250 <UART_SetConfig+0x190>)
 80030d8:	f7fd f995 	bl	8000406 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d009      	beq.n	80030f8 <UART_SetConfig+0x38>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ec:	d004      	beq.n	80030f8 <UART_SetConfig+0x38>
 80030ee:	f640 31f7 	movw	r1, #3063	; 0xbf7
 80030f2:	4857      	ldr	r0, [pc, #348]	; (8003250 <UART_SetConfig+0x190>)
 80030f4:	f7fd f987 	bl	8000406 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00e      	beq.n	800311e <UART_SetConfig+0x5e>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003108:	d009      	beq.n	800311e <UART_SetConfig+0x5e>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003112:	d004      	beq.n	800311e <UART_SetConfig+0x5e>
 8003114:	f640 31f8 	movw	r1, #3064	; 0xbf8
 8003118:	484d      	ldr	r0, [pc, #308]	; (8003250 <UART_SetConfig+0x190>)
 800311a:	f7fd f974 	bl	8000406 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695a      	ldr	r2, [r3, #20]
 8003122:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8003126:	4013      	ands	r3, r2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d103      	bne.n	8003134 <UART_SetConfig+0x74>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d104      	bne.n	800313e <UART_SetConfig+0x7e>
 8003134:	f640 31f9 	movw	r1, #3065	; 0xbf9
 8003138:	4845      	ldr	r0, [pc, #276]	; (8003250 <UART_SetConfig+0x190>)
 800313a:	f7fd f964 	bl	8000406 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	431a      	orrs	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	4313      	orrs	r3, r2
 8003164:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003170:	f023 030c 	bic.w	r3, r3, #12
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6812      	ldr	r2, [r2, #0]
 8003178:	68b9      	ldr	r1, [r7, #8]
 800317a:	430b      	orrs	r3, r1
 800317c:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	699a      	ldr	r2, [r3, #24]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a2e      	ldr	r2, [pc, #184]	; (8003254 <UART_SetConfig+0x194>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d103      	bne.n	80031a6 <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800319e:	f7fe fda3 	bl	8001ce8 <HAL_RCC_GetPCLK2Freq>
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	e002      	b.n	80031ac <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80031a6:	f7fe fd8b 	bl	8001cc0 <HAL_RCC_GetPCLK1Freq>
 80031aa:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	4613      	mov	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	009a      	lsls	r2, r3, #2
 80031b6:	441a      	add	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c2:	4a25      	ldr	r2, [pc, #148]	; (8003258 <UART_SetConfig+0x198>)
 80031c4:	fba2 2303 	umull	r2, r3, r2, r3
 80031c8:	095b      	lsrs	r3, r3, #5
 80031ca:	0119      	lsls	r1, r3, #4
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	4613      	mov	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	009a      	lsls	r2, r3, #2
 80031d6:	441a      	add	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	fbb2 f2f3 	udiv	r2, r2, r3
 80031e2:	4b1d      	ldr	r3, [pc, #116]	; (8003258 <UART_SetConfig+0x198>)
 80031e4:	fba3 0302 	umull	r0, r3, r3, r2
 80031e8:	095b      	lsrs	r3, r3, #5
 80031ea:	2064      	movs	r0, #100	; 0x64
 80031ec:	fb00 f303 	mul.w	r3, r0, r3
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	3332      	adds	r3, #50	; 0x32
 80031f6:	4a18      	ldr	r2, [pc, #96]	; (8003258 <UART_SetConfig+0x198>)
 80031f8:	fba2 2303 	umull	r2, r3, r2, r3
 80031fc:	095b      	lsrs	r3, r3, #5
 80031fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003202:	4419      	add	r1, r3
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	4613      	mov	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	009a      	lsls	r2, r3, #2
 800320e:	441a      	add	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	fbb2 f2f3 	udiv	r2, r2, r3
 800321a:	4b0f      	ldr	r3, [pc, #60]	; (8003258 <UART_SetConfig+0x198>)
 800321c:	fba3 0302 	umull	r0, r3, r3, r2
 8003220:	095b      	lsrs	r3, r3, #5
 8003222:	2064      	movs	r0, #100	; 0x64
 8003224:	fb00 f303 	mul.w	r3, r0, r3
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	011b      	lsls	r3, r3, #4
 800322c:	3332      	adds	r3, #50	; 0x32
 800322e:	4a0a      	ldr	r2, [pc, #40]	; (8003258 <UART_SetConfig+0x198>)
 8003230:	fba2 2303 	umull	r2, r3, r2, r3
 8003234:	095b      	lsrs	r3, r3, #5
 8003236:	f003 020f 	and.w	r2, r3, #15
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	440a      	add	r2, r1
 8003240:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003242:	bf00      	nop
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	0044aa20 	.word	0x0044aa20
 8003250:	08003d10 	.word	0x08003d10
 8003254:	40013800 	.word	0x40013800
 8003258:	51eb851f 	.word	0x51eb851f

0800325c <calloc>:
 800325c:	4b02      	ldr	r3, [pc, #8]	; (8003268 <calloc+0xc>)
 800325e:	460a      	mov	r2, r1
 8003260:	4601      	mov	r1, r0
 8003262:	6818      	ldr	r0, [r3, #0]
 8003264:	f000 b84a 	b.w	80032fc <_calloc_r>
 8003268:	20000014 	.word	0x20000014

0800326c <__errno>:
 800326c:	4b01      	ldr	r3, [pc, #4]	; (8003274 <__errno+0x8>)
 800326e:	6818      	ldr	r0, [r3, #0]
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	20000014 	.word	0x20000014

08003278 <__libc_init_array>:
 8003278:	b570      	push	{r4, r5, r6, lr}
 800327a:	2600      	movs	r6, #0
 800327c:	4d0c      	ldr	r5, [pc, #48]	; (80032b0 <__libc_init_array+0x38>)
 800327e:	4c0d      	ldr	r4, [pc, #52]	; (80032b4 <__libc_init_array+0x3c>)
 8003280:	1b64      	subs	r4, r4, r5
 8003282:	10a4      	asrs	r4, r4, #2
 8003284:	42a6      	cmp	r6, r4
 8003286:	d109      	bne.n	800329c <__libc_init_array+0x24>
 8003288:	f000 fc72 	bl	8003b70 <_init>
 800328c:	2600      	movs	r6, #0
 800328e:	4d0a      	ldr	r5, [pc, #40]	; (80032b8 <__libc_init_array+0x40>)
 8003290:	4c0a      	ldr	r4, [pc, #40]	; (80032bc <__libc_init_array+0x44>)
 8003292:	1b64      	subs	r4, r4, r5
 8003294:	10a4      	asrs	r4, r4, #2
 8003296:	42a6      	cmp	r6, r4
 8003298:	d105      	bne.n	80032a6 <__libc_init_array+0x2e>
 800329a:	bd70      	pop	{r4, r5, r6, pc}
 800329c:	f855 3b04 	ldr.w	r3, [r5], #4
 80032a0:	4798      	blx	r3
 80032a2:	3601      	adds	r6, #1
 80032a4:	e7ee      	b.n	8003284 <__libc_init_array+0xc>
 80032a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80032aa:	4798      	blx	r3
 80032ac:	3601      	adds	r6, #1
 80032ae:	e7f2      	b.n	8003296 <__libc_init_array+0x1e>
 80032b0:	08003df8 	.word	0x08003df8
 80032b4:	08003df8 	.word	0x08003df8
 80032b8:	08003df8 	.word	0x08003df8
 80032bc:	08003dfc 	.word	0x08003dfc

080032c0 <free>:
 80032c0:	4b02      	ldr	r3, [pc, #8]	; (80032cc <free+0xc>)
 80032c2:	4601      	mov	r1, r0
 80032c4:	6818      	ldr	r0, [r3, #0]
 80032c6:	f000 b827 	b.w	8003318 <_free_r>
 80032ca:	bf00      	nop
 80032cc:	20000014 	.word	0x20000014

080032d0 <memcpy>:
 80032d0:	440a      	add	r2, r1
 80032d2:	4291      	cmp	r1, r2
 80032d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80032d8:	d100      	bne.n	80032dc <memcpy+0xc>
 80032da:	4770      	bx	lr
 80032dc:	b510      	push	{r4, lr}
 80032de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032e2:	4291      	cmp	r1, r2
 80032e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80032e8:	d1f9      	bne.n	80032de <memcpy+0xe>
 80032ea:	bd10      	pop	{r4, pc}

080032ec <memset>:
 80032ec:	4603      	mov	r3, r0
 80032ee:	4402      	add	r2, r0
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d100      	bne.n	80032f6 <memset+0xa>
 80032f4:	4770      	bx	lr
 80032f6:	f803 1b01 	strb.w	r1, [r3], #1
 80032fa:	e7f9      	b.n	80032f0 <memset+0x4>

080032fc <_calloc_r>:
 80032fc:	b538      	push	{r3, r4, r5, lr}
 80032fe:	fb02 f501 	mul.w	r5, r2, r1
 8003302:	4629      	mov	r1, r5
 8003304:	f000 f854 	bl	80033b0 <_malloc_r>
 8003308:	4604      	mov	r4, r0
 800330a:	b118      	cbz	r0, 8003314 <_calloc_r+0x18>
 800330c:	462a      	mov	r2, r5
 800330e:	2100      	movs	r1, #0
 8003310:	f7ff ffec 	bl	80032ec <memset>
 8003314:	4620      	mov	r0, r4
 8003316:	bd38      	pop	{r3, r4, r5, pc}

08003318 <_free_r>:
 8003318:	b538      	push	{r3, r4, r5, lr}
 800331a:	4605      	mov	r5, r0
 800331c:	2900      	cmp	r1, #0
 800331e:	d043      	beq.n	80033a8 <_free_r+0x90>
 8003320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003324:	1f0c      	subs	r4, r1, #4
 8003326:	2b00      	cmp	r3, #0
 8003328:	bfb8      	it	lt
 800332a:	18e4      	addlt	r4, r4, r3
 800332c:	f000 f8cc 	bl	80034c8 <__malloc_lock>
 8003330:	4a1e      	ldr	r2, [pc, #120]	; (80033ac <_free_r+0x94>)
 8003332:	6813      	ldr	r3, [r2, #0]
 8003334:	4610      	mov	r0, r2
 8003336:	b933      	cbnz	r3, 8003346 <_free_r+0x2e>
 8003338:	6063      	str	r3, [r4, #4]
 800333a:	6014      	str	r4, [r2, #0]
 800333c:	4628      	mov	r0, r5
 800333e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003342:	f000 b8c7 	b.w	80034d4 <__malloc_unlock>
 8003346:	42a3      	cmp	r3, r4
 8003348:	d90a      	bls.n	8003360 <_free_r+0x48>
 800334a:	6821      	ldr	r1, [r4, #0]
 800334c:	1862      	adds	r2, r4, r1
 800334e:	4293      	cmp	r3, r2
 8003350:	bf01      	itttt	eq
 8003352:	681a      	ldreq	r2, [r3, #0]
 8003354:	685b      	ldreq	r3, [r3, #4]
 8003356:	1852      	addeq	r2, r2, r1
 8003358:	6022      	streq	r2, [r4, #0]
 800335a:	6063      	str	r3, [r4, #4]
 800335c:	6004      	str	r4, [r0, #0]
 800335e:	e7ed      	b.n	800333c <_free_r+0x24>
 8003360:	461a      	mov	r2, r3
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	b10b      	cbz	r3, 800336a <_free_r+0x52>
 8003366:	42a3      	cmp	r3, r4
 8003368:	d9fa      	bls.n	8003360 <_free_r+0x48>
 800336a:	6811      	ldr	r1, [r2, #0]
 800336c:	1850      	adds	r0, r2, r1
 800336e:	42a0      	cmp	r0, r4
 8003370:	d10b      	bne.n	800338a <_free_r+0x72>
 8003372:	6820      	ldr	r0, [r4, #0]
 8003374:	4401      	add	r1, r0
 8003376:	1850      	adds	r0, r2, r1
 8003378:	4283      	cmp	r3, r0
 800337a:	6011      	str	r1, [r2, #0]
 800337c:	d1de      	bne.n	800333c <_free_r+0x24>
 800337e:	6818      	ldr	r0, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	4401      	add	r1, r0
 8003384:	6011      	str	r1, [r2, #0]
 8003386:	6053      	str	r3, [r2, #4]
 8003388:	e7d8      	b.n	800333c <_free_r+0x24>
 800338a:	d902      	bls.n	8003392 <_free_r+0x7a>
 800338c:	230c      	movs	r3, #12
 800338e:	602b      	str	r3, [r5, #0]
 8003390:	e7d4      	b.n	800333c <_free_r+0x24>
 8003392:	6820      	ldr	r0, [r4, #0]
 8003394:	1821      	adds	r1, r4, r0
 8003396:	428b      	cmp	r3, r1
 8003398:	bf01      	itttt	eq
 800339a:	6819      	ldreq	r1, [r3, #0]
 800339c:	685b      	ldreq	r3, [r3, #4]
 800339e:	1809      	addeq	r1, r1, r0
 80033a0:	6021      	streq	r1, [r4, #0]
 80033a2:	6063      	str	r3, [r4, #4]
 80033a4:	6054      	str	r4, [r2, #4]
 80033a6:	e7c9      	b.n	800333c <_free_r+0x24>
 80033a8:	bd38      	pop	{r3, r4, r5, pc}
 80033aa:	bf00      	nop
 80033ac:	200000a0 	.word	0x200000a0

080033b0 <_malloc_r>:
 80033b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b2:	1ccd      	adds	r5, r1, #3
 80033b4:	f025 0503 	bic.w	r5, r5, #3
 80033b8:	3508      	adds	r5, #8
 80033ba:	2d0c      	cmp	r5, #12
 80033bc:	bf38      	it	cc
 80033be:	250c      	movcc	r5, #12
 80033c0:	2d00      	cmp	r5, #0
 80033c2:	4606      	mov	r6, r0
 80033c4:	db01      	blt.n	80033ca <_malloc_r+0x1a>
 80033c6:	42a9      	cmp	r1, r5
 80033c8:	d903      	bls.n	80033d2 <_malloc_r+0x22>
 80033ca:	230c      	movs	r3, #12
 80033cc:	6033      	str	r3, [r6, #0]
 80033ce:	2000      	movs	r0, #0
 80033d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033d2:	f000 f879 	bl	80034c8 <__malloc_lock>
 80033d6:	4921      	ldr	r1, [pc, #132]	; (800345c <_malloc_r+0xac>)
 80033d8:	680a      	ldr	r2, [r1, #0]
 80033da:	4614      	mov	r4, r2
 80033dc:	b99c      	cbnz	r4, 8003406 <_malloc_r+0x56>
 80033de:	4f20      	ldr	r7, [pc, #128]	; (8003460 <_malloc_r+0xb0>)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	b923      	cbnz	r3, 80033ee <_malloc_r+0x3e>
 80033e4:	4621      	mov	r1, r4
 80033e6:	4630      	mov	r0, r6
 80033e8:	f000 f83c 	bl	8003464 <_sbrk_r>
 80033ec:	6038      	str	r0, [r7, #0]
 80033ee:	4629      	mov	r1, r5
 80033f0:	4630      	mov	r0, r6
 80033f2:	f000 f837 	bl	8003464 <_sbrk_r>
 80033f6:	1c43      	adds	r3, r0, #1
 80033f8:	d123      	bne.n	8003442 <_malloc_r+0x92>
 80033fa:	230c      	movs	r3, #12
 80033fc:	4630      	mov	r0, r6
 80033fe:	6033      	str	r3, [r6, #0]
 8003400:	f000 f868 	bl	80034d4 <__malloc_unlock>
 8003404:	e7e3      	b.n	80033ce <_malloc_r+0x1e>
 8003406:	6823      	ldr	r3, [r4, #0]
 8003408:	1b5b      	subs	r3, r3, r5
 800340a:	d417      	bmi.n	800343c <_malloc_r+0x8c>
 800340c:	2b0b      	cmp	r3, #11
 800340e:	d903      	bls.n	8003418 <_malloc_r+0x68>
 8003410:	6023      	str	r3, [r4, #0]
 8003412:	441c      	add	r4, r3
 8003414:	6025      	str	r5, [r4, #0]
 8003416:	e004      	b.n	8003422 <_malloc_r+0x72>
 8003418:	6863      	ldr	r3, [r4, #4]
 800341a:	42a2      	cmp	r2, r4
 800341c:	bf0c      	ite	eq
 800341e:	600b      	streq	r3, [r1, #0]
 8003420:	6053      	strne	r3, [r2, #4]
 8003422:	4630      	mov	r0, r6
 8003424:	f000 f856 	bl	80034d4 <__malloc_unlock>
 8003428:	f104 000b 	add.w	r0, r4, #11
 800342c:	1d23      	adds	r3, r4, #4
 800342e:	f020 0007 	bic.w	r0, r0, #7
 8003432:	1ac2      	subs	r2, r0, r3
 8003434:	d0cc      	beq.n	80033d0 <_malloc_r+0x20>
 8003436:	1a1b      	subs	r3, r3, r0
 8003438:	50a3      	str	r3, [r4, r2]
 800343a:	e7c9      	b.n	80033d0 <_malloc_r+0x20>
 800343c:	4622      	mov	r2, r4
 800343e:	6864      	ldr	r4, [r4, #4]
 8003440:	e7cc      	b.n	80033dc <_malloc_r+0x2c>
 8003442:	1cc4      	adds	r4, r0, #3
 8003444:	f024 0403 	bic.w	r4, r4, #3
 8003448:	42a0      	cmp	r0, r4
 800344a:	d0e3      	beq.n	8003414 <_malloc_r+0x64>
 800344c:	1a21      	subs	r1, r4, r0
 800344e:	4630      	mov	r0, r6
 8003450:	f000 f808 	bl	8003464 <_sbrk_r>
 8003454:	3001      	adds	r0, #1
 8003456:	d1dd      	bne.n	8003414 <_malloc_r+0x64>
 8003458:	e7cf      	b.n	80033fa <_malloc_r+0x4a>
 800345a:	bf00      	nop
 800345c:	200000a0 	.word	0x200000a0
 8003460:	200000a4 	.word	0x200000a4

08003464 <_sbrk_r>:
 8003464:	b538      	push	{r3, r4, r5, lr}
 8003466:	2300      	movs	r3, #0
 8003468:	4d05      	ldr	r5, [pc, #20]	; (8003480 <_sbrk_r+0x1c>)
 800346a:	4604      	mov	r4, r0
 800346c:	4608      	mov	r0, r1
 800346e:	602b      	str	r3, [r5, #0]
 8003470:	f7fd f908 	bl	8000684 <_sbrk>
 8003474:	1c43      	adds	r3, r0, #1
 8003476:	d102      	bne.n	800347e <_sbrk_r+0x1a>
 8003478:	682b      	ldr	r3, [r5, #0]
 800347a:	b103      	cbz	r3, 800347e <_sbrk_r+0x1a>
 800347c:	6023      	str	r3, [r4, #0]
 800347e:	bd38      	pop	{r3, r4, r5, pc}
 8003480:	20000180 	.word	0x20000180

08003484 <siprintf>:
 8003484:	b40e      	push	{r1, r2, r3}
 8003486:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800348a:	b500      	push	{lr}
 800348c:	b09c      	sub	sp, #112	; 0x70
 800348e:	ab1d      	add	r3, sp, #116	; 0x74
 8003490:	9002      	str	r0, [sp, #8]
 8003492:	9006      	str	r0, [sp, #24]
 8003494:	9107      	str	r1, [sp, #28]
 8003496:	9104      	str	r1, [sp, #16]
 8003498:	4808      	ldr	r0, [pc, #32]	; (80034bc <siprintf+0x38>)
 800349a:	4909      	ldr	r1, [pc, #36]	; (80034c0 <siprintf+0x3c>)
 800349c:	f853 2b04 	ldr.w	r2, [r3], #4
 80034a0:	9105      	str	r1, [sp, #20]
 80034a2:	6800      	ldr	r0, [r0, #0]
 80034a4:	a902      	add	r1, sp, #8
 80034a6:	9301      	str	r3, [sp, #4]
 80034a8:	f000 f876 	bl	8003598 <_svfiprintf_r>
 80034ac:	2200      	movs	r2, #0
 80034ae:	9b02      	ldr	r3, [sp, #8]
 80034b0:	701a      	strb	r2, [r3, #0]
 80034b2:	b01c      	add	sp, #112	; 0x70
 80034b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80034b8:	b003      	add	sp, #12
 80034ba:	4770      	bx	lr
 80034bc:	20000014 	.word	0x20000014
 80034c0:	ffff0208 	.word	0xffff0208

080034c4 <__retarget_lock_acquire_recursive>:
 80034c4:	4770      	bx	lr

080034c6 <__retarget_lock_release_recursive>:
 80034c6:	4770      	bx	lr

080034c8 <__malloc_lock>:
 80034c8:	4801      	ldr	r0, [pc, #4]	; (80034d0 <__malloc_lock+0x8>)
 80034ca:	f7ff bffb 	b.w	80034c4 <__retarget_lock_acquire_recursive>
 80034ce:	bf00      	nop
 80034d0:	20000178 	.word	0x20000178

080034d4 <__malloc_unlock>:
 80034d4:	4801      	ldr	r0, [pc, #4]	; (80034dc <__malloc_unlock+0x8>)
 80034d6:	f7ff bff6 	b.w	80034c6 <__retarget_lock_release_recursive>
 80034da:	bf00      	nop
 80034dc:	20000178 	.word	0x20000178

080034e0 <__ssputs_r>:
 80034e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034e4:	688e      	ldr	r6, [r1, #8]
 80034e6:	4682      	mov	sl, r0
 80034e8:	429e      	cmp	r6, r3
 80034ea:	460c      	mov	r4, r1
 80034ec:	4690      	mov	r8, r2
 80034ee:	461f      	mov	r7, r3
 80034f0:	d838      	bhi.n	8003564 <__ssputs_r+0x84>
 80034f2:	898a      	ldrh	r2, [r1, #12]
 80034f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80034f8:	d032      	beq.n	8003560 <__ssputs_r+0x80>
 80034fa:	6825      	ldr	r5, [r4, #0]
 80034fc:	6909      	ldr	r1, [r1, #16]
 80034fe:	3301      	adds	r3, #1
 8003500:	eba5 0901 	sub.w	r9, r5, r1
 8003504:	6965      	ldr	r5, [r4, #20]
 8003506:	444b      	add	r3, r9
 8003508:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800350c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003510:	106d      	asrs	r5, r5, #1
 8003512:	429d      	cmp	r5, r3
 8003514:	bf38      	it	cc
 8003516:	461d      	movcc	r5, r3
 8003518:	0553      	lsls	r3, r2, #21
 800351a:	d531      	bpl.n	8003580 <__ssputs_r+0xa0>
 800351c:	4629      	mov	r1, r5
 800351e:	f7ff ff47 	bl	80033b0 <_malloc_r>
 8003522:	4606      	mov	r6, r0
 8003524:	b950      	cbnz	r0, 800353c <__ssputs_r+0x5c>
 8003526:	230c      	movs	r3, #12
 8003528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800352c:	f8ca 3000 	str.w	r3, [sl]
 8003530:	89a3      	ldrh	r3, [r4, #12]
 8003532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003536:	81a3      	strh	r3, [r4, #12]
 8003538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800353c:	464a      	mov	r2, r9
 800353e:	6921      	ldr	r1, [r4, #16]
 8003540:	f7ff fec6 	bl	80032d0 <memcpy>
 8003544:	89a3      	ldrh	r3, [r4, #12]
 8003546:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800354a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800354e:	81a3      	strh	r3, [r4, #12]
 8003550:	6126      	str	r6, [r4, #16]
 8003552:	444e      	add	r6, r9
 8003554:	6026      	str	r6, [r4, #0]
 8003556:	463e      	mov	r6, r7
 8003558:	6165      	str	r5, [r4, #20]
 800355a:	eba5 0509 	sub.w	r5, r5, r9
 800355e:	60a5      	str	r5, [r4, #8]
 8003560:	42be      	cmp	r6, r7
 8003562:	d900      	bls.n	8003566 <__ssputs_r+0x86>
 8003564:	463e      	mov	r6, r7
 8003566:	4632      	mov	r2, r6
 8003568:	4641      	mov	r1, r8
 800356a:	6820      	ldr	r0, [r4, #0]
 800356c:	f000 fab8 	bl	8003ae0 <memmove>
 8003570:	68a3      	ldr	r3, [r4, #8]
 8003572:	6822      	ldr	r2, [r4, #0]
 8003574:	1b9b      	subs	r3, r3, r6
 8003576:	4432      	add	r2, r6
 8003578:	2000      	movs	r0, #0
 800357a:	60a3      	str	r3, [r4, #8]
 800357c:	6022      	str	r2, [r4, #0]
 800357e:	e7db      	b.n	8003538 <__ssputs_r+0x58>
 8003580:	462a      	mov	r2, r5
 8003582:	f000 fac7 	bl	8003b14 <_realloc_r>
 8003586:	4606      	mov	r6, r0
 8003588:	2800      	cmp	r0, #0
 800358a:	d1e1      	bne.n	8003550 <__ssputs_r+0x70>
 800358c:	4650      	mov	r0, sl
 800358e:	6921      	ldr	r1, [r4, #16]
 8003590:	f7ff fec2 	bl	8003318 <_free_r>
 8003594:	e7c7      	b.n	8003526 <__ssputs_r+0x46>
	...

08003598 <_svfiprintf_r>:
 8003598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800359c:	4698      	mov	r8, r3
 800359e:	898b      	ldrh	r3, [r1, #12]
 80035a0:	4607      	mov	r7, r0
 80035a2:	061b      	lsls	r3, r3, #24
 80035a4:	460d      	mov	r5, r1
 80035a6:	4614      	mov	r4, r2
 80035a8:	b09d      	sub	sp, #116	; 0x74
 80035aa:	d50e      	bpl.n	80035ca <_svfiprintf_r+0x32>
 80035ac:	690b      	ldr	r3, [r1, #16]
 80035ae:	b963      	cbnz	r3, 80035ca <_svfiprintf_r+0x32>
 80035b0:	2140      	movs	r1, #64	; 0x40
 80035b2:	f7ff fefd 	bl	80033b0 <_malloc_r>
 80035b6:	6028      	str	r0, [r5, #0]
 80035b8:	6128      	str	r0, [r5, #16]
 80035ba:	b920      	cbnz	r0, 80035c6 <_svfiprintf_r+0x2e>
 80035bc:	230c      	movs	r3, #12
 80035be:	603b      	str	r3, [r7, #0]
 80035c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035c4:	e0d1      	b.n	800376a <_svfiprintf_r+0x1d2>
 80035c6:	2340      	movs	r3, #64	; 0x40
 80035c8:	616b      	str	r3, [r5, #20]
 80035ca:	2300      	movs	r3, #0
 80035cc:	9309      	str	r3, [sp, #36]	; 0x24
 80035ce:	2320      	movs	r3, #32
 80035d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035d4:	2330      	movs	r3, #48	; 0x30
 80035d6:	f04f 0901 	mov.w	r9, #1
 80035da:	f8cd 800c 	str.w	r8, [sp, #12]
 80035de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003784 <_svfiprintf_r+0x1ec>
 80035e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035e6:	4623      	mov	r3, r4
 80035e8:	469a      	mov	sl, r3
 80035ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035ee:	b10a      	cbz	r2, 80035f4 <_svfiprintf_r+0x5c>
 80035f0:	2a25      	cmp	r2, #37	; 0x25
 80035f2:	d1f9      	bne.n	80035e8 <_svfiprintf_r+0x50>
 80035f4:	ebba 0b04 	subs.w	fp, sl, r4
 80035f8:	d00b      	beq.n	8003612 <_svfiprintf_r+0x7a>
 80035fa:	465b      	mov	r3, fp
 80035fc:	4622      	mov	r2, r4
 80035fe:	4629      	mov	r1, r5
 8003600:	4638      	mov	r0, r7
 8003602:	f7ff ff6d 	bl	80034e0 <__ssputs_r>
 8003606:	3001      	adds	r0, #1
 8003608:	f000 80aa 	beq.w	8003760 <_svfiprintf_r+0x1c8>
 800360c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800360e:	445a      	add	r2, fp
 8003610:	9209      	str	r2, [sp, #36]	; 0x24
 8003612:	f89a 3000 	ldrb.w	r3, [sl]
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 80a2 	beq.w	8003760 <_svfiprintf_r+0x1c8>
 800361c:	2300      	movs	r3, #0
 800361e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003622:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003626:	f10a 0a01 	add.w	sl, sl, #1
 800362a:	9304      	str	r3, [sp, #16]
 800362c:	9307      	str	r3, [sp, #28]
 800362e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003632:	931a      	str	r3, [sp, #104]	; 0x68
 8003634:	4654      	mov	r4, sl
 8003636:	2205      	movs	r2, #5
 8003638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800363c:	4851      	ldr	r0, [pc, #324]	; (8003784 <_svfiprintf_r+0x1ec>)
 800363e:	f000 fa41 	bl	8003ac4 <memchr>
 8003642:	9a04      	ldr	r2, [sp, #16]
 8003644:	b9d8      	cbnz	r0, 800367e <_svfiprintf_r+0xe6>
 8003646:	06d0      	lsls	r0, r2, #27
 8003648:	bf44      	itt	mi
 800364a:	2320      	movmi	r3, #32
 800364c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003650:	0711      	lsls	r1, r2, #28
 8003652:	bf44      	itt	mi
 8003654:	232b      	movmi	r3, #43	; 0x2b
 8003656:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800365a:	f89a 3000 	ldrb.w	r3, [sl]
 800365e:	2b2a      	cmp	r3, #42	; 0x2a
 8003660:	d015      	beq.n	800368e <_svfiprintf_r+0xf6>
 8003662:	4654      	mov	r4, sl
 8003664:	2000      	movs	r0, #0
 8003666:	f04f 0c0a 	mov.w	ip, #10
 800366a:	9a07      	ldr	r2, [sp, #28]
 800366c:	4621      	mov	r1, r4
 800366e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003672:	3b30      	subs	r3, #48	; 0x30
 8003674:	2b09      	cmp	r3, #9
 8003676:	d94e      	bls.n	8003716 <_svfiprintf_r+0x17e>
 8003678:	b1b0      	cbz	r0, 80036a8 <_svfiprintf_r+0x110>
 800367a:	9207      	str	r2, [sp, #28]
 800367c:	e014      	b.n	80036a8 <_svfiprintf_r+0x110>
 800367e:	eba0 0308 	sub.w	r3, r0, r8
 8003682:	fa09 f303 	lsl.w	r3, r9, r3
 8003686:	4313      	orrs	r3, r2
 8003688:	46a2      	mov	sl, r4
 800368a:	9304      	str	r3, [sp, #16]
 800368c:	e7d2      	b.n	8003634 <_svfiprintf_r+0x9c>
 800368e:	9b03      	ldr	r3, [sp, #12]
 8003690:	1d19      	adds	r1, r3, #4
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	9103      	str	r1, [sp, #12]
 8003696:	2b00      	cmp	r3, #0
 8003698:	bfbb      	ittet	lt
 800369a:	425b      	neglt	r3, r3
 800369c:	f042 0202 	orrlt.w	r2, r2, #2
 80036a0:	9307      	strge	r3, [sp, #28]
 80036a2:	9307      	strlt	r3, [sp, #28]
 80036a4:	bfb8      	it	lt
 80036a6:	9204      	strlt	r2, [sp, #16]
 80036a8:	7823      	ldrb	r3, [r4, #0]
 80036aa:	2b2e      	cmp	r3, #46	; 0x2e
 80036ac:	d10c      	bne.n	80036c8 <_svfiprintf_r+0x130>
 80036ae:	7863      	ldrb	r3, [r4, #1]
 80036b0:	2b2a      	cmp	r3, #42	; 0x2a
 80036b2:	d135      	bne.n	8003720 <_svfiprintf_r+0x188>
 80036b4:	9b03      	ldr	r3, [sp, #12]
 80036b6:	3402      	adds	r4, #2
 80036b8:	1d1a      	adds	r2, r3, #4
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	9203      	str	r2, [sp, #12]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	bfb8      	it	lt
 80036c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80036c6:	9305      	str	r3, [sp, #20]
 80036c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003794 <_svfiprintf_r+0x1fc>
 80036cc:	2203      	movs	r2, #3
 80036ce:	4650      	mov	r0, sl
 80036d0:	7821      	ldrb	r1, [r4, #0]
 80036d2:	f000 f9f7 	bl	8003ac4 <memchr>
 80036d6:	b140      	cbz	r0, 80036ea <_svfiprintf_r+0x152>
 80036d8:	2340      	movs	r3, #64	; 0x40
 80036da:	eba0 000a 	sub.w	r0, r0, sl
 80036de:	fa03 f000 	lsl.w	r0, r3, r0
 80036e2:	9b04      	ldr	r3, [sp, #16]
 80036e4:	3401      	adds	r4, #1
 80036e6:	4303      	orrs	r3, r0
 80036e8:	9304      	str	r3, [sp, #16]
 80036ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036ee:	2206      	movs	r2, #6
 80036f0:	4825      	ldr	r0, [pc, #148]	; (8003788 <_svfiprintf_r+0x1f0>)
 80036f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036f6:	f000 f9e5 	bl	8003ac4 <memchr>
 80036fa:	2800      	cmp	r0, #0
 80036fc:	d038      	beq.n	8003770 <_svfiprintf_r+0x1d8>
 80036fe:	4b23      	ldr	r3, [pc, #140]	; (800378c <_svfiprintf_r+0x1f4>)
 8003700:	bb1b      	cbnz	r3, 800374a <_svfiprintf_r+0x1b2>
 8003702:	9b03      	ldr	r3, [sp, #12]
 8003704:	3307      	adds	r3, #7
 8003706:	f023 0307 	bic.w	r3, r3, #7
 800370a:	3308      	adds	r3, #8
 800370c:	9303      	str	r3, [sp, #12]
 800370e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003710:	4433      	add	r3, r6
 8003712:	9309      	str	r3, [sp, #36]	; 0x24
 8003714:	e767      	b.n	80035e6 <_svfiprintf_r+0x4e>
 8003716:	460c      	mov	r4, r1
 8003718:	2001      	movs	r0, #1
 800371a:	fb0c 3202 	mla	r2, ip, r2, r3
 800371e:	e7a5      	b.n	800366c <_svfiprintf_r+0xd4>
 8003720:	2300      	movs	r3, #0
 8003722:	f04f 0c0a 	mov.w	ip, #10
 8003726:	4619      	mov	r1, r3
 8003728:	3401      	adds	r4, #1
 800372a:	9305      	str	r3, [sp, #20]
 800372c:	4620      	mov	r0, r4
 800372e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003732:	3a30      	subs	r2, #48	; 0x30
 8003734:	2a09      	cmp	r2, #9
 8003736:	d903      	bls.n	8003740 <_svfiprintf_r+0x1a8>
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0c5      	beq.n	80036c8 <_svfiprintf_r+0x130>
 800373c:	9105      	str	r1, [sp, #20]
 800373e:	e7c3      	b.n	80036c8 <_svfiprintf_r+0x130>
 8003740:	4604      	mov	r4, r0
 8003742:	2301      	movs	r3, #1
 8003744:	fb0c 2101 	mla	r1, ip, r1, r2
 8003748:	e7f0      	b.n	800372c <_svfiprintf_r+0x194>
 800374a:	ab03      	add	r3, sp, #12
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	462a      	mov	r2, r5
 8003750:	4638      	mov	r0, r7
 8003752:	4b0f      	ldr	r3, [pc, #60]	; (8003790 <_svfiprintf_r+0x1f8>)
 8003754:	a904      	add	r1, sp, #16
 8003756:	f3af 8000 	nop.w
 800375a:	1c42      	adds	r2, r0, #1
 800375c:	4606      	mov	r6, r0
 800375e:	d1d6      	bne.n	800370e <_svfiprintf_r+0x176>
 8003760:	89ab      	ldrh	r3, [r5, #12]
 8003762:	065b      	lsls	r3, r3, #25
 8003764:	f53f af2c 	bmi.w	80035c0 <_svfiprintf_r+0x28>
 8003768:	9809      	ldr	r0, [sp, #36]	; 0x24
 800376a:	b01d      	add	sp, #116	; 0x74
 800376c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003770:	ab03      	add	r3, sp, #12
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	462a      	mov	r2, r5
 8003776:	4638      	mov	r0, r7
 8003778:	4b05      	ldr	r3, [pc, #20]	; (8003790 <_svfiprintf_r+0x1f8>)
 800377a:	a904      	add	r1, sp, #16
 800377c:	f000 f87c 	bl	8003878 <_printf_i>
 8003780:	e7eb      	b.n	800375a <_svfiprintf_r+0x1c2>
 8003782:	bf00      	nop
 8003784:	08003dc4 	.word	0x08003dc4
 8003788:	08003dce 	.word	0x08003dce
 800378c:	00000000 	.word	0x00000000
 8003790:	080034e1 	.word	0x080034e1
 8003794:	08003dca 	.word	0x08003dca

08003798 <_printf_common>:
 8003798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800379c:	4616      	mov	r6, r2
 800379e:	4699      	mov	r9, r3
 80037a0:	688a      	ldr	r2, [r1, #8]
 80037a2:	690b      	ldr	r3, [r1, #16]
 80037a4:	4607      	mov	r7, r0
 80037a6:	4293      	cmp	r3, r2
 80037a8:	bfb8      	it	lt
 80037aa:	4613      	movlt	r3, r2
 80037ac:	6033      	str	r3, [r6, #0]
 80037ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037b2:	460c      	mov	r4, r1
 80037b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037b8:	b10a      	cbz	r2, 80037be <_printf_common+0x26>
 80037ba:	3301      	adds	r3, #1
 80037bc:	6033      	str	r3, [r6, #0]
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	0699      	lsls	r1, r3, #26
 80037c2:	bf42      	ittt	mi
 80037c4:	6833      	ldrmi	r3, [r6, #0]
 80037c6:	3302      	addmi	r3, #2
 80037c8:	6033      	strmi	r3, [r6, #0]
 80037ca:	6825      	ldr	r5, [r4, #0]
 80037cc:	f015 0506 	ands.w	r5, r5, #6
 80037d0:	d106      	bne.n	80037e0 <_printf_common+0x48>
 80037d2:	f104 0a19 	add.w	sl, r4, #25
 80037d6:	68e3      	ldr	r3, [r4, #12]
 80037d8:	6832      	ldr	r2, [r6, #0]
 80037da:	1a9b      	subs	r3, r3, r2
 80037dc:	42ab      	cmp	r3, r5
 80037de:	dc28      	bgt.n	8003832 <_printf_common+0x9a>
 80037e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80037e4:	1e13      	subs	r3, r2, #0
 80037e6:	6822      	ldr	r2, [r4, #0]
 80037e8:	bf18      	it	ne
 80037ea:	2301      	movne	r3, #1
 80037ec:	0692      	lsls	r2, r2, #26
 80037ee:	d42d      	bmi.n	800384c <_printf_common+0xb4>
 80037f0:	4649      	mov	r1, r9
 80037f2:	4638      	mov	r0, r7
 80037f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037f8:	47c0      	blx	r8
 80037fa:	3001      	adds	r0, #1
 80037fc:	d020      	beq.n	8003840 <_printf_common+0xa8>
 80037fe:	6823      	ldr	r3, [r4, #0]
 8003800:	68e5      	ldr	r5, [r4, #12]
 8003802:	f003 0306 	and.w	r3, r3, #6
 8003806:	2b04      	cmp	r3, #4
 8003808:	bf18      	it	ne
 800380a:	2500      	movne	r5, #0
 800380c:	6832      	ldr	r2, [r6, #0]
 800380e:	f04f 0600 	mov.w	r6, #0
 8003812:	68a3      	ldr	r3, [r4, #8]
 8003814:	bf08      	it	eq
 8003816:	1aad      	subeq	r5, r5, r2
 8003818:	6922      	ldr	r2, [r4, #16]
 800381a:	bf08      	it	eq
 800381c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003820:	4293      	cmp	r3, r2
 8003822:	bfc4      	itt	gt
 8003824:	1a9b      	subgt	r3, r3, r2
 8003826:	18ed      	addgt	r5, r5, r3
 8003828:	341a      	adds	r4, #26
 800382a:	42b5      	cmp	r5, r6
 800382c:	d11a      	bne.n	8003864 <_printf_common+0xcc>
 800382e:	2000      	movs	r0, #0
 8003830:	e008      	b.n	8003844 <_printf_common+0xac>
 8003832:	2301      	movs	r3, #1
 8003834:	4652      	mov	r2, sl
 8003836:	4649      	mov	r1, r9
 8003838:	4638      	mov	r0, r7
 800383a:	47c0      	blx	r8
 800383c:	3001      	adds	r0, #1
 800383e:	d103      	bne.n	8003848 <_printf_common+0xb0>
 8003840:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003848:	3501      	adds	r5, #1
 800384a:	e7c4      	b.n	80037d6 <_printf_common+0x3e>
 800384c:	2030      	movs	r0, #48	; 0x30
 800384e:	18e1      	adds	r1, r4, r3
 8003850:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003854:	1c5a      	adds	r2, r3, #1
 8003856:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800385a:	4422      	add	r2, r4
 800385c:	3302      	adds	r3, #2
 800385e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003862:	e7c5      	b.n	80037f0 <_printf_common+0x58>
 8003864:	2301      	movs	r3, #1
 8003866:	4622      	mov	r2, r4
 8003868:	4649      	mov	r1, r9
 800386a:	4638      	mov	r0, r7
 800386c:	47c0      	blx	r8
 800386e:	3001      	adds	r0, #1
 8003870:	d0e6      	beq.n	8003840 <_printf_common+0xa8>
 8003872:	3601      	adds	r6, #1
 8003874:	e7d9      	b.n	800382a <_printf_common+0x92>
	...

08003878 <_printf_i>:
 8003878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800387c:	460c      	mov	r4, r1
 800387e:	7e27      	ldrb	r7, [r4, #24]
 8003880:	4691      	mov	r9, r2
 8003882:	2f78      	cmp	r7, #120	; 0x78
 8003884:	4680      	mov	r8, r0
 8003886:	469a      	mov	sl, r3
 8003888:	990c      	ldr	r1, [sp, #48]	; 0x30
 800388a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800388e:	d807      	bhi.n	80038a0 <_printf_i+0x28>
 8003890:	2f62      	cmp	r7, #98	; 0x62
 8003892:	d80a      	bhi.n	80038aa <_printf_i+0x32>
 8003894:	2f00      	cmp	r7, #0
 8003896:	f000 80d9 	beq.w	8003a4c <_printf_i+0x1d4>
 800389a:	2f58      	cmp	r7, #88	; 0x58
 800389c:	f000 80a4 	beq.w	80039e8 <_printf_i+0x170>
 80038a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80038a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80038a8:	e03a      	b.n	8003920 <_printf_i+0xa8>
 80038aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80038ae:	2b15      	cmp	r3, #21
 80038b0:	d8f6      	bhi.n	80038a0 <_printf_i+0x28>
 80038b2:	a001      	add	r0, pc, #4	; (adr r0, 80038b8 <_printf_i+0x40>)
 80038b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80038b8:	08003911 	.word	0x08003911
 80038bc:	08003925 	.word	0x08003925
 80038c0:	080038a1 	.word	0x080038a1
 80038c4:	080038a1 	.word	0x080038a1
 80038c8:	080038a1 	.word	0x080038a1
 80038cc:	080038a1 	.word	0x080038a1
 80038d0:	08003925 	.word	0x08003925
 80038d4:	080038a1 	.word	0x080038a1
 80038d8:	080038a1 	.word	0x080038a1
 80038dc:	080038a1 	.word	0x080038a1
 80038e0:	080038a1 	.word	0x080038a1
 80038e4:	08003a33 	.word	0x08003a33
 80038e8:	08003955 	.word	0x08003955
 80038ec:	08003a15 	.word	0x08003a15
 80038f0:	080038a1 	.word	0x080038a1
 80038f4:	080038a1 	.word	0x080038a1
 80038f8:	08003a55 	.word	0x08003a55
 80038fc:	080038a1 	.word	0x080038a1
 8003900:	08003955 	.word	0x08003955
 8003904:	080038a1 	.word	0x080038a1
 8003908:	080038a1 	.word	0x080038a1
 800390c:	08003a1d 	.word	0x08003a1d
 8003910:	680b      	ldr	r3, [r1, #0]
 8003912:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003916:	1d1a      	adds	r2, r3, #4
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	600a      	str	r2, [r1, #0]
 800391c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003920:	2301      	movs	r3, #1
 8003922:	e0a4      	b.n	8003a6e <_printf_i+0x1f6>
 8003924:	6825      	ldr	r5, [r4, #0]
 8003926:	6808      	ldr	r0, [r1, #0]
 8003928:	062e      	lsls	r6, r5, #24
 800392a:	f100 0304 	add.w	r3, r0, #4
 800392e:	d50a      	bpl.n	8003946 <_printf_i+0xce>
 8003930:	6805      	ldr	r5, [r0, #0]
 8003932:	600b      	str	r3, [r1, #0]
 8003934:	2d00      	cmp	r5, #0
 8003936:	da03      	bge.n	8003940 <_printf_i+0xc8>
 8003938:	232d      	movs	r3, #45	; 0x2d
 800393a:	426d      	negs	r5, r5
 800393c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003940:	230a      	movs	r3, #10
 8003942:	485e      	ldr	r0, [pc, #376]	; (8003abc <_printf_i+0x244>)
 8003944:	e019      	b.n	800397a <_printf_i+0x102>
 8003946:	f015 0f40 	tst.w	r5, #64	; 0x40
 800394a:	6805      	ldr	r5, [r0, #0]
 800394c:	600b      	str	r3, [r1, #0]
 800394e:	bf18      	it	ne
 8003950:	b22d      	sxthne	r5, r5
 8003952:	e7ef      	b.n	8003934 <_printf_i+0xbc>
 8003954:	680b      	ldr	r3, [r1, #0]
 8003956:	6825      	ldr	r5, [r4, #0]
 8003958:	1d18      	adds	r0, r3, #4
 800395a:	6008      	str	r0, [r1, #0]
 800395c:	0628      	lsls	r0, r5, #24
 800395e:	d501      	bpl.n	8003964 <_printf_i+0xec>
 8003960:	681d      	ldr	r5, [r3, #0]
 8003962:	e002      	b.n	800396a <_printf_i+0xf2>
 8003964:	0669      	lsls	r1, r5, #25
 8003966:	d5fb      	bpl.n	8003960 <_printf_i+0xe8>
 8003968:	881d      	ldrh	r5, [r3, #0]
 800396a:	2f6f      	cmp	r7, #111	; 0x6f
 800396c:	bf0c      	ite	eq
 800396e:	2308      	moveq	r3, #8
 8003970:	230a      	movne	r3, #10
 8003972:	4852      	ldr	r0, [pc, #328]	; (8003abc <_printf_i+0x244>)
 8003974:	2100      	movs	r1, #0
 8003976:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800397a:	6866      	ldr	r6, [r4, #4]
 800397c:	2e00      	cmp	r6, #0
 800397e:	bfa8      	it	ge
 8003980:	6821      	ldrge	r1, [r4, #0]
 8003982:	60a6      	str	r6, [r4, #8]
 8003984:	bfa4      	itt	ge
 8003986:	f021 0104 	bicge.w	r1, r1, #4
 800398a:	6021      	strge	r1, [r4, #0]
 800398c:	b90d      	cbnz	r5, 8003992 <_printf_i+0x11a>
 800398e:	2e00      	cmp	r6, #0
 8003990:	d04d      	beq.n	8003a2e <_printf_i+0x1b6>
 8003992:	4616      	mov	r6, r2
 8003994:	fbb5 f1f3 	udiv	r1, r5, r3
 8003998:	fb03 5711 	mls	r7, r3, r1, r5
 800399c:	5dc7      	ldrb	r7, [r0, r7]
 800399e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80039a2:	462f      	mov	r7, r5
 80039a4:	42bb      	cmp	r3, r7
 80039a6:	460d      	mov	r5, r1
 80039a8:	d9f4      	bls.n	8003994 <_printf_i+0x11c>
 80039aa:	2b08      	cmp	r3, #8
 80039ac:	d10b      	bne.n	80039c6 <_printf_i+0x14e>
 80039ae:	6823      	ldr	r3, [r4, #0]
 80039b0:	07df      	lsls	r7, r3, #31
 80039b2:	d508      	bpl.n	80039c6 <_printf_i+0x14e>
 80039b4:	6923      	ldr	r3, [r4, #16]
 80039b6:	6861      	ldr	r1, [r4, #4]
 80039b8:	4299      	cmp	r1, r3
 80039ba:	bfde      	ittt	le
 80039bc:	2330      	movle	r3, #48	; 0x30
 80039be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80039c2:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80039c6:	1b92      	subs	r2, r2, r6
 80039c8:	6122      	str	r2, [r4, #16]
 80039ca:	464b      	mov	r3, r9
 80039cc:	4621      	mov	r1, r4
 80039ce:	4640      	mov	r0, r8
 80039d0:	f8cd a000 	str.w	sl, [sp]
 80039d4:	aa03      	add	r2, sp, #12
 80039d6:	f7ff fedf 	bl	8003798 <_printf_common>
 80039da:	3001      	adds	r0, #1
 80039dc:	d14c      	bne.n	8003a78 <_printf_i+0x200>
 80039de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039e2:	b004      	add	sp, #16
 80039e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039e8:	4834      	ldr	r0, [pc, #208]	; (8003abc <_printf_i+0x244>)
 80039ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80039ee:	680e      	ldr	r6, [r1, #0]
 80039f0:	6823      	ldr	r3, [r4, #0]
 80039f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80039f6:	061f      	lsls	r7, r3, #24
 80039f8:	600e      	str	r6, [r1, #0]
 80039fa:	d514      	bpl.n	8003a26 <_printf_i+0x1ae>
 80039fc:	07d9      	lsls	r1, r3, #31
 80039fe:	bf44      	itt	mi
 8003a00:	f043 0320 	orrmi.w	r3, r3, #32
 8003a04:	6023      	strmi	r3, [r4, #0]
 8003a06:	b91d      	cbnz	r5, 8003a10 <_printf_i+0x198>
 8003a08:	6823      	ldr	r3, [r4, #0]
 8003a0a:	f023 0320 	bic.w	r3, r3, #32
 8003a0e:	6023      	str	r3, [r4, #0]
 8003a10:	2310      	movs	r3, #16
 8003a12:	e7af      	b.n	8003974 <_printf_i+0xfc>
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	f043 0320 	orr.w	r3, r3, #32
 8003a1a:	6023      	str	r3, [r4, #0]
 8003a1c:	2378      	movs	r3, #120	; 0x78
 8003a1e:	4828      	ldr	r0, [pc, #160]	; (8003ac0 <_printf_i+0x248>)
 8003a20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a24:	e7e3      	b.n	80039ee <_printf_i+0x176>
 8003a26:	065e      	lsls	r6, r3, #25
 8003a28:	bf48      	it	mi
 8003a2a:	b2ad      	uxthmi	r5, r5
 8003a2c:	e7e6      	b.n	80039fc <_printf_i+0x184>
 8003a2e:	4616      	mov	r6, r2
 8003a30:	e7bb      	b.n	80039aa <_printf_i+0x132>
 8003a32:	680b      	ldr	r3, [r1, #0]
 8003a34:	6826      	ldr	r6, [r4, #0]
 8003a36:	1d1d      	adds	r5, r3, #4
 8003a38:	6960      	ldr	r0, [r4, #20]
 8003a3a:	600d      	str	r5, [r1, #0]
 8003a3c:	0635      	lsls	r5, r6, #24
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	d501      	bpl.n	8003a46 <_printf_i+0x1ce>
 8003a42:	6018      	str	r0, [r3, #0]
 8003a44:	e002      	b.n	8003a4c <_printf_i+0x1d4>
 8003a46:	0671      	lsls	r1, r6, #25
 8003a48:	d5fb      	bpl.n	8003a42 <_printf_i+0x1ca>
 8003a4a:	8018      	strh	r0, [r3, #0]
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	4616      	mov	r6, r2
 8003a50:	6123      	str	r3, [r4, #16]
 8003a52:	e7ba      	b.n	80039ca <_printf_i+0x152>
 8003a54:	680b      	ldr	r3, [r1, #0]
 8003a56:	1d1a      	adds	r2, r3, #4
 8003a58:	600a      	str	r2, [r1, #0]
 8003a5a:	681e      	ldr	r6, [r3, #0]
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	4630      	mov	r0, r6
 8003a60:	6862      	ldr	r2, [r4, #4]
 8003a62:	f000 f82f 	bl	8003ac4 <memchr>
 8003a66:	b108      	cbz	r0, 8003a6c <_printf_i+0x1f4>
 8003a68:	1b80      	subs	r0, r0, r6
 8003a6a:	6060      	str	r0, [r4, #4]
 8003a6c:	6863      	ldr	r3, [r4, #4]
 8003a6e:	6123      	str	r3, [r4, #16]
 8003a70:	2300      	movs	r3, #0
 8003a72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a76:	e7a8      	b.n	80039ca <_printf_i+0x152>
 8003a78:	4632      	mov	r2, r6
 8003a7a:	4649      	mov	r1, r9
 8003a7c:	4640      	mov	r0, r8
 8003a7e:	6923      	ldr	r3, [r4, #16]
 8003a80:	47d0      	blx	sl
 8003a82:	3001      	adds	r0, #1
 8003a84:	d0ab      	beq.n	80039de <_printf_i+0x166>
 8003a86:	6823      	ldr	r3, [r4, #0]
 8003a88:	079b      	lsls	r3, r3, #30
 8003a8a:	d413      	bmi.n	8003ab4 <_printf_i+0x23c>
 8003a8c:	68e0      	ldr	r0, [r4, #12]
 8003a8e:	9b03      	ldr	r3, [sp, #12]
 8003a90:	4298      	cmp	r0, r3
 8003a92:	bfb8      	it	lt
 8003a94:	4618      	movlt	r0, r3
 8003a96:	e7a4      	b.n	80039e2 <_printf_i+0x16a>
 8003a98:	2301      	movs	r3, #1
 8003a9a:	4632      	mov	r2, r6
 8003a9c:	4649      	mov	r1, r9
 8003a9e:	4640      	mov	r0, r8
 8003aa0:	47d0      	blx	sl
 8003aa2:	3001      	adds	r0, #1
 8003aa4:	d09b      	beq.n	80039de <_printf_i+0x166>
 8003aa6:	3501      	adds	r5, #1
 8003aa8:	68e3      	ldr	r3, [r4, #12]
 8003aaa:	9903      	ldr	r1, [sp, #12]
 8003aac:	1a5b      	subs	r3, r3, r1
 8003aae:	42ab      	cmp	r3, r5
 8003ab0:	dcf2      	bgt.n	8003a98 <_printf_i+0x220>
 8003ab2:	e7eb      	b.n	8003a8c <_printf_i+0x214>
 8003ab4:	2500      	movs	r5, #0
 8003ab6:	f104 0619 	add.w	r6, r4, #25
 8003aba:	e7f5      	b.n	8003aa8 <_printf_i+0x230>
 8003abc:	08003dd5 	.word	0x08003dd5
 8003ac0:	08003de6 	.word	0x08003de6

08003ac4 <memchr>:
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	b510      	push	{r4, lr}
 8003ac8:	b2c9      	uxtb	r1, r1
 8003aca:	4402      	add	r2, r0
 8003acc:	4293      	cmp	r3, r2
 8003ace:	4618      	mov	r0, r3
 8003ad0:	d101      	bne.n	8003ad6 <memchr+0x12>
 8003ad2:	2000      	movs	r0, #0
 8003ad4:	e003      	b.n	8003ade <memchr+0x1a>
 8003ad6:	7804      	ldrb	r4, [r0, #0]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	428c      	cmp	r4, r1
 8003adc:	d1f6      	bne.n	8003acc <memchr+0x8>
 8003ade:	bd10      	pop	{r4, pc}

08003ae0 <memmove>:
 8003ae0:	4288      	cmp	r0, r1
 8003ae2:	b510      	push	{r4, lr}
 8003ae4:	eb01 0402 	add.w	r4, r1, r2
 8003ae8:	d902      	bls.n	8003af0 <memmove+0x10>
 8003aea:	4284      	cmp	r4, r0
 8003aec:	4623      	mov	r3, r4
 8003aee:	d807      	bhi.n	8003b00 <memmove+0x20>
 8003af0:	1e43      	subs	r3, r0, #1
 8003af2:	42a1      	cmp	r1, r4
 8003af4:	d008      	beq.n	8003b08 <memmove+0x28>
 8003af6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003afa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003afe:	e7f8      	b.n	8003af2 <memmove+0x12>
 8003b00:	4601      	mov	r1, r0
 8003b02:	4402      	add	r2, r0
 8003b04:	428a      	cmp	r2, r1
 8003b06:	d100      	bne.n	8003b0a <memmove+0x2a>
 8003b08:	bd10      	pop	{r4, pc}
 8003b0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b12:	e7f7      	b.n	8003b04 <memmove+0x24>

08003b14 <_realloc_r>:
 8003b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b16:	4607      	mov	r7, r0
 8003b18:	4614      	mov	r4, r2
 8003b1a:	460e      	mov	r6, r1
 8003b1c:	b921      	cbnz	r1, 8003b28 <_realloc_r+0x14>
 8003b1e:	4611      	mov	r1, r2
 8003b20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003b24:	f7ff bc44 	b.w	80033b0 <_malloc_r>
 8003b28:	b922      	cbnz	r2, 8003b34 <_realloc_r+0x20>
 8003b2a:	f7ff fbf5 	bl	8003318 <_free_r>
 8003b2e:	4625      	mov	r5, r4
 8003b30:	4628      	mov	r0, r5
 8003b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b34:	f000 f814 	bl	8003b60 <_malloc_usable_size_r>
 8003b38:	42a0      	cmp	r0, r4
 8003b3a:	d20f      	bcs.n	8003b5c <_realloc_r+0x48>
 8003b3c:	4621      	mov	r1, r4
 8003b3e:	4638      	mov	r0, r7
 8003b40:	f7ff fc36 	bl	80033b0 <_malloc_r>
 8003b44:	4605      	mov	r5, r0
 8003b46:	2800      	cmp	r0, #0
 8003b48:	d0f2      	beq.n	8003b30 <_realloc_r+0x1c>
 8003b4a:	4631      	mov	r1, r6
 8003b4c:	4622      	mov	r2, r4
 8003b4e:	f7ff fbbf 	bl	80032d0 <memcpy>
 8003b52:	4631      	mov	r1, r6
 8003b54:	4638      	mov	r0, r7
 8003b56:	f7ff fbdf 	bl	8003318 <_free_r>
 8003b5a:	e7e9      	b.n	8003b30 <_realloc_r+0x1c>
 8003b5c:	4635      	mov	r5, r6
 8003b5e:	e7e7      	b.n	8003b30 <_realloc_r+0x1c>

08003b60 <_malloc_usable_size_r>:
 8003b60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b64:	1f18      	subs	r0, r3, #4
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	bfbc      	itt	lt
 8003b6a:	580b      	ldrlt	r3, [r1, r0]
 8003b6c:	18c0      	addlt	r0, r0, r3
 8003b6e:	4770      	bx	lr

08003b70 <_init>:
 8003b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b72:	bf00      	nop
 8003b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b76:	bc08      	pop	{r3}
 8003b78:	469e      	mov	lr, r3
 8003b7a:	4770      	bx	lr

08003b7c <_fini>:
 8003b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7e:	bf00      	nop
 8003b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b82:	bc08      	pop	{r3}
 8003b84:	469e      	mov	lr, r3
 8003b86:	4770      	bx	lr
