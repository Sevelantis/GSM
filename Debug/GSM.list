
GSM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08003a08  08003a08  00013a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bf0  08003bf0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003bf0  08003bf0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bf0  08003bf0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bf0  08003bf0  00013bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bf4  08003bf4  00013bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  08003c68  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08003c68  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c30d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d87  00000000  00000000  0002c3a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  0002e130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b10  00000000  00000000  0002ed28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017368  00000000  00000000  0002f838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e599  00000000  00000000  00046ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a604  00000000  00000000  00055139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000df73d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003528  00000000  00000000  000df790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080039f0 	.word	0x080039f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080039f0 	.word	0x080039f0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 facc 	bl	80006ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f809 	bl	800016a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8c4 	bl	80002e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800015c:	f000 f898 	bl	8000290 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000160:	f000 f848 	bl	80001f4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
userMain();
 8000164:	f000 fa3c 	bl	80005e0 <userMain>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000168:	e7fe      	b.n	8000168 <main+0x1c>

0800016a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800016a:	b580      	push	{r7, lr}
 800016c:	b090      	sub	sp, #64	; 0x40
 800016e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000170:	f107 0318 	add.w	r3, r7, #24
 8000174:	2228      	movs	r2, #40	; 0x28
 8000176:	2100      	movs	r1, #0
 8000178:	4618      	mov	r0, r3
 800017a:	f002 fff7 	bl	800316c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800017e:	1d3b      	adds	r3, r7, #4
 8000180:	2200      	movs	r2, #0
 8000182:	601a      	str	r2, [r3, #0]
 8000184:	605a      	str	r2, [r3, #4]
 8000186:	609a      	str	r2, [r3, #8]
 8000188:	60da      	str	r2, [r3, #12]
 800018a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800018c:	2301      	movs	r3, #1
 800018e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000190:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000194:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000196:	2300      	movs	r3, #0
 8000198:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800019a:	2301      	movs	r3, #1
 800019c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800019e:	2302      	movs	r3, #2
 80001a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001a8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ae:	f107 0318 	add.w	r3, r7, #24
 80001b2:	4618      	mov	r0, r3
 80001b4:	f000 ff78 	bl	80010a8 <HAL_RCC_OscConfig>
 80001b8:	4603      	mov	r3, r0
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d001      	beq.n	80001c2 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001be:	f000 f8dd 	bl	800037c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001c2:	230f      	movs	r3, #15
 80001c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001c6:	2302      	movs	r3, #2
 80001c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ca:	2300      	movs	r3, #0
 80001cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001d4:	2300      	movs	r3, #0
 80001d6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	2102      	movs	r1, #2
 80001dc:	4618      	mov	r0, r3
 80001de:	f001 fad3 	bl	8001788 <HAL_RCC_ClockConfig>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d001      	beq.n	80001ec <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001e8:	f000 f8c8 	bl	800037c <Error_Handler>
  }
}
 80001ec:	bf00      	nop
 80001ee:	3740      	adds	r7, #64	; 0x40
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bd80      	pop	{r7, pc}

080001f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b086      	sub	sp, #24
 80001f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80001fa:	f107 0308 	add.w	r3, r7, #8
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
 8000202:	605a      	str	r2, [r3, #4]
 8000204:	609a      	str	r2, [r3, #8]
 8000206:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000208:	463b      	mov	r3, r7
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000210:	4b1d      	ldr	r3, [pc, #116]	; (8000288 <MX_TIM4_Init+0x94>)
 8000212:	4a1e      	ldr	r2, [pc, #120]	; (800028c <MX_TIM4_Init+0x98>)
 8000214:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4999;
 8000216:	4b1c      	ldr	r3, [pc, #112]	; (8000288 <MX_TIM4_Init+0x94>)
 8000218:	f241 3287 	movw	r2, #4999	; 0x1387
 800021c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800021e:	4b1a      	ldr	r3, [pc, #104]	; (8000288 <MX_TIM4_Init+0x94>)
 8000220:	2200      	movs	r2, #0
 8000222:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1439;
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <MX_TIM4_Init+0x94>)
 8000226:	f240 529f 	movw	r2, #1439	; 0x59f
 800022a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800022c:	4b16      	ldr	r3, [pc, #88]	; (8000288 <MX_TIM4_Init+0x94>)
 800022e:	2200      	movs	r2, #0
 8000230:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000232:	4b15      	ldr	r3, [pc, #84]	; (8000288 <MX_TIM4_Init+0x94>)
 8000234:	2200      	movs	r2, #0
 8000236:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000238:	4813      	ldr	r0, [pc, #76]	; (8000288 <MX_TIM4_Init+0x94>)
 800023a:	f001 fce5 	bl	8001c08 <HAL_TIM_Base_Init>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d001      	beq.n	8000248 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000244:	f000 f89a 	bl	800037c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800024c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800024e:	f107 0308 	add.w	r3, r7, #8
 8000252:	4619      	mov	r1, r3
 8000254:	480c      	ldr	r0, [pc, #48]	; (8000288 <MX_TIM4_Init+0x94>)
 8000256:	f001 fef5 	bl	8002044 <HAL_TIM_ConfigClockSource>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000260:	f000 f88c 	bl	800037c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000264:	2300      	movs	r3, #0
 8000266:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000268:	2300      	movs	r3, #0
 800026a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800026c:	463b      	mov	r3, r7
 800026e:	4619      	mov	r1, r3
 8000270:	4805      	ldr	r0, [pc, #20]	; (8000288 <MX_TIM4_Init+0x94>)
 8000272:	f002 faa7 	bl	80027c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800027c:	f000 f87e 	bl	800037c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000280:	bf00      	nop
 8000282:	3718      	adds	r7, #24
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}
 8000288:	200000a0 	.word	0x200000a0
 800028c:	40000800 	.word	0x40000800

08000290 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000294:	4b11      	ldr	r3, [pc, #68]	; (80002dc <MX_USART2_UART_Init+0x4c>)
 8000296:	4a12      	ldr	r2, [pc, #72]	; (80002e0 <MX_USART2_UART_Init+0x50>)
 8000298:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800029a:	4b10      	ldr	r3, [pc, #64]	; (80002dc <MX_USART2_UART_Init+0x4c>)
 800029c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002a2:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <MX_USART2_UART_Init+0x4c>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002a8:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <MX_USART2_UART_Init+0x4c>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002ae:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <MX_USART2_UART_Init+0x4c>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002b4:	4b09      	ldr	r3, [pc, #36]	; (80002dc <MX_USART2_UART_Init+0x4c>)
 80002b6:	220c      	movs	r2, #12
 80002b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ba:	4b08      	ldr	r3, [pc, #32]	; (80002dc <MX_USART2_UART_Init+0x4c>)
 80002bc:	2200      	movs	r2, #0
 80002be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002c0:	4b06      	ldr	r3, [pc, #24]	; (80002dc <MX_USART2_UART_Init+0x4c>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002c6:	4805      	ldr	r0, [pc, #20]	; (80002dc <MX_USART2_UART_Init+0x4c>)
 80002c8:	f002 fb38 	bl	800293c <HAL_UART_Init>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002d2:	f000 f853 	bl	800037c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	200000e8 	.word	0x200000e8
 80002e0:	40004400 	.word	0x40004400

080002e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b088      	sub	sp, #32
 80002e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ea:	f107 0310 	add.w	r3, r7, #16
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f8:	4b1e      	ldr	r3, [pc, #120]	; (8000374 <MX_GPIO_Init+0x90>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a1d      	ldr	r2, [pc, #116]	; (8000374 <MX_GPIO_Init+0x90>)
 80002fe:	f043 0310 	orr.w	r3, r3, #16
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b1b      	ldr	r3, [pc, #108]	; (8000374 <MX_GPIO_Init+0x90>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0310 	and.w	r3, r3, #16
 800030c:	60fb      	str	r3, [r7, #12]
 800030e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000310:	4b18      	ldr	r3, [pc, #96]	; (8000374 <MX_GPIO_Init+0x90>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a17      	ldr	r2, [pc, #92]	; (8000374 <MX_GPIO_Init+0x90>)
 8000316:	f043 0320 	orr.w	r3, r3, #32
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b15      	ldr	r3, [pc, #84]	; (8000374 <MX_GPIO_Init+0x90>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0320 	and.w	r3, r3, #32
 8000324:	60bb      	str	r3, [r7, #8]
 8000326:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000328:	4b12      	ldr	r3, [pc, #72]	; (8000374 <MX_GPIO_Init+0x90>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a11      	ldr	r2, [pc, #68]	; (8000374 <MX_GPIO_Init+0x90>)
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	4b0f      	ldr	r3, [pc, #60]	; (8000374 <MX_GPIO_Init+0x90>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f003 0304 	and.w	r3, r3, #4
 800033c:	607b      	str	r3, [r7, #4]
 800033e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000340:	2200      	movs	r2, #0
 8000342:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000346:	480c      	ldr	r0, [pc, #48]	; (8000378 <MX_GPIO_Init+0x94>)
 8000348:	f000 fe54 	bl	8000ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800034c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000350:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000352:	2301      	movs	r3, #1
 8000354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000356:	2300      	movs	r3, #0
 8000358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035a:	2302      	movs	r3, #2
 800035c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800035e:	f107 0310 	add.w	r3, r7, #16
 8000362:	4619      	mov	r1, r3
 8000364:	4804      	ldr	r0, [pc, #16]	; (8000378 <MX_GPIO_Init+0x94>)
 8000366:	f000 fbd5 	bl	8000b14 <HAL_GPIO_Init>

}
 800036a:	bf00      	nop
 800036c:	3720      	adds	r7, #32
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40021000 	.word	0x40021000
 8000378:	40011000 	.word	0x40011000

0800037c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000380:	b672      	cpsid	i
}
 8000382:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000384:	e7fe      	b.n	8000384 <Error_Handler+0x8>

08000386 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000386:	b480      	push	{r7}
 8000388:	b083      	sub	sp, #12
 800038a:	af00      	add	r7, sp, #0
 800038c:	6078      	str	r0, [r7, #4]
 800038e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000390:	bf00      	nop
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	bc80      	pop	{r7}
 8000398:	4770      	bx	lr
	...

0800039c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800039c:	b480      	push	{r7}
 800039e:	b085      	sub	sp, #20
 80003a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <HAL_MspInit+0x5c>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <HAL_MspInit+0x5c>)
 80003a8:	f043 0301 	orr.w	r3, r3, #1
 80003ac:	6193      	str	r3, [r2, #24]
 80003ae:	4b12      	ldr	r3, [pc, #72]	; (80003f8 <HAL_MspInit+0x5c>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	f003 0301 	and.w	r3, r3, #1
 80003b6:	60bb      	str	r3, [r7, #8]
 80003b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ba:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <HAL_MspInit+0x5c>)
 80003bc:	69db      	ldr	r3, [r3, #28]
 80003be:	4a0e      	ldr	r2, [pc, #56]	; (80003f8 <HAL_MspInit+0x5c>)
 80003c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003c4:	61d3      	str	r3, [r2, #28]
 80003c6:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <HAL_MspInit+0x5c>)
 80003c8:	69db      	ldr	r3, [r3, #28]
 80003ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ce:	607b      	str	r3, [r7, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003d2:	4b0a      	ldr	r3, [pc, #40]	; (80003fc <HAL_MspInit+0x60>)
 80003d4:	685b      	ldr	r3, [r3, #4]
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	4a04      	ldr	r2, [pc, #16]	; (80003fc <HAL_MspInit+0x60>)
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ee:	bf00      	nop
 80003f0:	3714      	adds	r7, #20
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr
 80003f8:	40021000 	.word	0x40021000
 80003fc:	40010000 	.word	0x40010000

08000400 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a0d      	ldr	r2, [pc, #52]	; (8000444 <HAL_TIM_Base_MspInit+0x44>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d113      	bne.n	800043a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000412:	4b0d      	ldr	r3, [pc, #52]	; (8000448 <HAL_TIM_Base_MspInit+0x48>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	4a0c      	ldr	r2, [pc, #48]	; (8000448 <HAL_TIM_Base_MspInit+0x48>)
 8000418:	f043 0304 	orr.w	r3, r3, #4
 800041c:	61d3      	str	r3, [r2, #28]
 800041e:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <HAL_TIM_Base_MspInit+0x48>)
 8000420:	69db      	ldr	r3, [r3, #28]
 8000422:	f003 0304 	and.w	r3, r3, #4
 8000426:	60fb      	str	r3, [r7, #12]
 8000428:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800042a:	2200      	movs	r2, #0
 800042c:	2100      	movs	r1, #0
 800042e:	201e      	movs	r0, #30
 8000430:	f000 faaa 	bl	8000988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000434:	201e      	movs	r0, #30
 8000436:	f000 fad3 	bl	80009e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800043a:	bf00      	nop
 800043c:	3710      	adds	r7, #16
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	40000800 	.word	0x40000800
 8000448:	40021000 	.word	0x40021000

0800044c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b088      	sub	sp, #32
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000454:	f107 0310 	add.w	r3, r7, #16
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
 800045c:	605a      	str	r2, [r3, #4]
 800045e:	609a      	str	r2, [r3, #8]
 8000460:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a1f      	ldr	r2, [pc, #124]	; (80004e4 <HAL_UART_MspInit+0x98>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d137      	bne.n	80004dc <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800046c:	4b1e      	ldr	r3, [pc, #120]	; (80004e8 <HAL_UART_MspInit+0x9c>)
 800046e:	69db      	ldr	r3, [r3, #28]
 8000470:	4a1d      	ldr	r2, [pc, #116]	; (80004e8 <HAL_UART_MspInit+0x9c>)
 8000472:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000476:	61d3      	str	r3, [r2, #28]
 8000478:	4b1b      	ldr	r3, [pc, #108]	; (80004e8 <HAL_UART_MspInit+0x9c>)
 800047a:	69db      	ldr	r3, [r3, #28]
 800047c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000480:	60fb      	str	r3, [r7, #12]
 8000482:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000484:	4b18      	ldr	r3, [pc, #96]	; (80004e8 <HAL_UART_MspInit+0x9c>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	4a17      	ldr	r2, [pc, #92]	; (80004e8 <HAL_UART_MspInit+0x9c>)
 800048a:	f043 0304 	orr.w	r3, r3, #4
 800048e:	6193      	str	r3, [r2, #24]
 8000490:	4b15      	ldr	r3, [pc, #84]	; (80004e8 <HAL_UART_MspInit+0x9c>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	f003 0304 	and.w	r3, r3, #4
 8000498:	60bb      	str	r3, [r7, #8]
 800049a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800049c:	2304      	movs	r3, #4
 800049e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004a0:	2302      	movs	r3, #2
 80004a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a4:	2303      	movs	r3, #3
 80004a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a8:	f107 0310 	add.w	r3, r7, #16
 80004ac:	4619      	mov	r1, r3
 80004ae:	480f      	ldr	r0, [pc, #60]	; (80004ec <HAL_UART_MspInit+0xa0>)
 80004b0:	f000 fb30 	bl	8000b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80004b4:	2308      	movs	r3, #8
 80004b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b8:	2300      	movs	r3, #0
 80004ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004bc:	2300      	movs	r3, #0
 80004be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c0:	f107 0310 	add.w	r3, r7, #16
 80004c4:	4619      	mov	r1, r3
 80004c6:	4809      	ldr	r0, [pc, #36]	; (80004ec <HAL_UART_MspInit+0xa0>)
 80004c8:	f000 fb24 	bl	8000b14 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80004cc:	2200      	movs	r2, #0
 80004ce:	2100      	movs	r1, #0
 80004d0:	2026      	movs	r0, #38	; 0x26
 80004d2:	f000 fa59 	bl	8000988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80004d6:	2026      	movs	r0, #38	; 0x26
 80004d8:	f000 fa82 	bl	80009e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80004dc:	bf00      	nop
 80004de:	3720      	adds	r7, #32
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40004400 	.word	0x40004400
 80004e8:	40021000 	.word	0x40021000
 80004ec:	40010800 	.word	0x40010800

080004f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <NMI_Handler+0x4>

080004f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004fa:	e7fe      	b.n	80004fa <HardFault_Handler+0x4>

080004fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000500:	e7fe      	b.n	8000500 <MemManage_Handler+0x4>

08000502 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000506:	e7fe      	b.n	8000506 <BusFault_Handler+0x4>

08000508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800050c:	e7fe      	b.n	800050c <UsageFault_Handler+0x4>

0800050e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr

0800051a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800051e:	bf00      	nop
 8000520:	46bd      	mov	sp, r7
 8000522:	bc80      	pop	{r7}
 8000524:	4770      	bx	lr

08000526 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr

08000532 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000532:	b580      	push	{r7, lr}
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000536:	f000 f91f 	bl	8000778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
	...

08000540 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <TIM4_IRQHandler+0x10>)
 8000546:	f001 fc75 	bl	8001e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	200000a0 	.word	0x200000a0

08000554 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000558:	4802      	ldr	r0, [pc, #8]	; (8000564 <USART2_IRQHandler+0x10>)
 800055a:	f002 fadb 	bl	8002b14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	200000e8 	.word	0x200000e8

08000568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000570:	4a14      	ldr	r2, [pc, #80]	; (80005c4 <_sbrk+0x5c>)
 8000572:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <_sbrk+0x60>)
 8000574:	1ad3      	subs	r3, r2, r3
 8000576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800057c:	4b13      	ldr	r3, [pc, #76]	; (80005cc <_sbrk+0x64>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d102      	bne.n	800058a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000584:	4b11      	ldr	r3, [pc, #68]	; (80005cc <_sbrk+0x64>)
 8000586:	4a12      	ldr	r2, [pc, #72]	; (80005d0 <_sbrk+0x68>)
 8000588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800058a:	4b10      	ldr	r3, [pc, #64]	; (80005cc <_sbrk+0x64>)
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4413      	add	r3, r2
 8000592:	693a      	ldr	r2, [r7, #16]
 8000594:	429a      	cmp	r2, r3
 8000596:	d207      	bcs.n	80005a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000598:	f002 fdbe 	bl	8003118 <__errno>
 800059c:	4603      	mov	r3, r0
 800059e:	220c      	movs	r2, #12
 80005a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005a6:	e009      	b.n	80005bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005a8:	4b08      	ldr	r3, [pc, #32]	; (80005cc <_sbrk+0x64>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <_sbrk+0x64>)
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4413      	add	r3, r2
 80005b6:	4a05      	ldr	r2, [pc, #20]	; (80005cc <_sbrk+0x64>)
 80005b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005ba:	68fb      	ldr	r3, [r7, #12]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3718      	adds	r7, #24
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20005000 	.word	0x20005000
 80005c8:	00000400 	.word	0x00000400
 80005cc:	2000008c 	.word	0x2000008c
 80005d0:	20000140 	.word	0x20000140

080005d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr

080005e0 <userMain>:
unsigned counter_IT = 0;
uint16_t message_counter = 0;
char *message_welcome = "\n\n\r_____WELCOME_____\n\n\r";

void userMain()
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	// init
	init_TIM_IT(&htim4);
 80005e4:	4802      	ldr	r0, [pc, #8]	; (80005f0 <userMain+0x10>)
 80005e6:	f000 f805 	bl	80005f4 <init_TIM_IT>

	// welcome message
//	HAL_UART_Transmit_IT(&huart2, message_welcome, strlen(message_welcome));
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	200000a0 	.word	0x200000a0

080005f4 <init_TIM_IT>:

void init_TIM_IT(TIM_HandleTypeDef *timer)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(timer);
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f001 fbad 	bl	8001d5c <HAL_TIM_Base_Start_IT>
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <HAL_TIM_PeriodElapsedCallback>:
}

uint16_t msg_len = 40;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)	// 10Hz
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08c      	sub	sp, #48	; 0x30
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]

	if(counter_IT % 5 == 0 && htim->Instance == TIM4)		// 1Hz
 8000614:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000616:	6819      	ldr	r1, [r3, #0]
 8000618:	4b1b      	ldr	r3, [pc, #108]	; (8000688 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800061a:	fba3 2301 	umull	r2, r3, r3, r1
 800061e:	089a      	lsrs	r2, r3, #2
 8000620:	4613      	mov	r3, r2
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	4413      	add	r3, r2
 8000626:	1aca      	subs	r2, r1, r3
 8000628:	2a00      	cmp	r2, #0
 800062a:	d122      	bne.n	8000672 <HAL_TIM_PeriodElapsedCallback+0x66>
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a16      	ldr	r2, [pc, #88]	; (800068c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d11d      	bne.n	8000672 <HAL_TIM_PeriodElapsedCallback+0x66>
	{
		// allocate memory for message
		uint8_t msg[40];

		// create & transmit message
		sprintf(msg, "wiadoomosc nr %d.\n\r", message_counter);
 8000636:	4b16      	ldr	r3, [pc, #88]	; (8000690 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	461a      	mov	r2, r3
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	4914      	ldr	r1, [pc, #80]	; (8000694 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000642:	4618      	mov	r0, r3
 8000644:	f002 fd9a 	bl	800317c <siprintf>
		HAL_UART_Transmit_IT(&huart2, msg, 40);
 8000648:	f107 0308 	add.w	r3, r7, #8
 800064c:	2228      	movs	r2, #40	; 0x28
 800064e:	4619      	mov	r1, r3
 8000650:	4811      	ldr	r0, [pc, #68]	; (8000698 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000652:	f002 fa1b 	bl	8002a8c <HAL_UART_Transmit_IT>

		// blink
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000656:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065a:	4810      	ldr	r0, [pc, #64]	; (800069c <HAL_TIM_PeriodElapsedCallback+0x90>)
 800065c:	f000 fcfc 	bl	8001058 <HAL_GPIO_TogglePin>
		counter_IT = 0;
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
		message_counter++;
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	3301      	adds	r3, #1
 800066c:	b29a      	uxth	r2, r3
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000670:	801a      	strh	r2, [r3, #0]
	}
	counter_IT++;
 8000672:	4b04      	ldr	r3, [pc, #16]	; (8000684 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	3301      	adds	r3, #1
 8000678:	4a02      	ldr	r2, [pc, #8]	; (8000684 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800067a:	6013      	str	r3, [r2, #0]
}
 800067c:	bf00      	nop
 800067e:	3730      	adds	r7, #48	; 0x30
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000090 	.word	0x20000090
 8000688:	cccccccd 	.word	0xcccccccd
 800068c:	40000800 	.word	0x40000800
 8000690:	20000094 	.word	0x20000094
 8000694:	08003a20 	.word	0x08003a20
 8000698:	200000e8 	.word	0x200000e8
 800069c:	40011000 	.word	0x40011000

080006a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80006a0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80006a2:	e003      	b.n	80006ac <LoopCopyDataInit>

080006a4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80006a4:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80006a6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80006a8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80006aa:	3104      	adds	r1, #4

080006ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006ac:	480a      	ldr	r0, [pc, #40]	; (80006d8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80006b0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006b2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006b4:	d3f6      	bcc.n	80006a4 <CopyDataInit>
  ldr r2, =_sbss
 80006b6:	4a0a      	ldr	r2, [pc, #40]	; (80006e0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80006b8:	e002      	b.n	80006c0 <LoopFillZerobss>

080006ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  str r3, [r2], #4
 80006bc:	f842 3b04 	str.w	r3, [r2], #4

080006c0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80006c2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006c4:	d3f9      	bcc.n	80006ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006c6:	f7ff ff85 	bl	80005d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006ca:	f002 fd2b 	bl	8003124 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ce:	f7ff fd3d 	bl	800014c <main>
  bx lr
 80006d2:	4770      	bx	lr
  ldr r3, =_sidata
 80006d4:	08003bf8 	.word	0x08003bf8
  ldr r0, =_sdata
 80006d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006dc:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80006e0:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80006e4:	2000013c 	.word	0x2000013c

080006e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e8:	e7fe      	b.n	80006e8 <ADC1_2_IRQHandler>
	...

080006ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <HAL_Init+0x28>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a07      	ldr	r2, [pc, #28]	; (8000714 <HAL_Init+0x28>)
 80006f6:	f043 0310 	orr.w	r3, r3, #16
 80006fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006fc:	2003      	movs	r0, #3
 80006fe:	f000 f923 	bl	8000948 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000702:	2000      	movs	r0, #0
 8000704:	f000 f808 	bl	8000718 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000708:	f7ff fe48 	bl	800039c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800070c:	2300      	movs	r3, #0
}
 800070e:	4618      	mov	r0, r3
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40022000 	.word	0x40022000

08000718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <HAL_InitTick+0x54>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <HAL_InitTick+0x58>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	4619      	mov	r1, r3
 800072a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000732:	fbb2 f3f3 	udiv	r3, r2, r3
 8000736:	4618      	mov	r0, r3
 8000738:	f000 f96a 	bl	8000a10 <HAL_SYSTICK_Config>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000742:	2301      	movs	r3, #1
 8000744:	e00e      	b.n	8000764 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2b0f      	cmp	r3, #15
 800074a:	d80a      	bhi.n	8000762 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800074c:	2200      	movs	r2, #0
 800074e:	6879      	ldr	r1, [r7, #4]
 8000750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000754:	f000 f918 	bl	8000988 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000758:	4a06      	ldr	r2, [pc, #24]	; (8000774 <HAL_InitTick+0x5c>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800075e:	2300      	movs	r3, #0
 8000760:	e000      	b.n	8000764 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000762:	2301      	movs	r3, #1
}
 8000764:	4618      	mov	r0, r3
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000000 	.word	0x20000000
 8000770:	20000008 	.word	0x20000008
 8000774:	20000004 	.word	0x20000004

08000778 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <HAL_IncTick+0x1c>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	461a      	mov	r2, r3
 8000782:	4b05      	ldr	r3, [pc, #20]	; (8000798 <HAL_IncTick+0x20>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4413      	add	r3, r2
 8000788:	4a03      	ldr	r2, [pc, #12]	; (8000798 <HAL_IncTick+0x20>)
 800078a:	6013      	str	r3, [r2, #0]
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	20000008 	.word	0x20000008
 8000798:	20000128 	.word	0x20000128

0800079c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return uwTick;
 80007a0:	4b02      	ldr	r3, [pc, #8]	; (80007ac <HAL_GetTick+0x10>)
 80007a2:	681b      	ldr	r3, [r3, #0]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr
 80007ac:	20000128 	.word	0x20000128

080007b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <__NVIC_SetPriorityGrouping+0x44>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007c6:	68ba      	ldr	r2, [r7, #8]
 80007c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007cc:	4013      	ands	r3, r2
 80007ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007e2:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <__NVIC_SetPriorityGrouping+0x44>)
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	60d3      	str	r3, [r2, #12]
}
 80007e8:	bf00      	nop
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <__NVIC_GetPriorityGrouping+0x18>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	0a1b      	lsrs	r3, r3, #8
 8000802:	f003 0307 	and.w	r3, r3, #7
}
 8000806:	4618      	mov	r0, r3
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	2b00      	cmp	r3, #0
 8000824:	db0b      	blt.n	800083e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	f003 021f 	and.w	r2, r3, #31
 800082c:	4906      	ldr	r1, [pc, #24]	; (8000848 <__NVIC_EnableIRQ+0x34>)
 800082e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000832:	095b      	lsrs	r3, r3, #5
 8000834:	2001      	movs	r0, #1
 8000836:	fa00 f202 	lsl.w	r2, r0, r2
 800083a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr
 8000848:	e000e100 	.word	0xe000e100

0800084c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	6039      	str	r1, [r7, #0]
 8000856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085c:	2b00      	cmp	r3, #0
 800085e:	db0a      	blt.n	8000876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	b2da      	uxtb	r2, r3
 8000864:	490c      	ldr	r1, [pc, #48]	; (8000898 <__NVIC_SetPriority+0x4c>)
 8000866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086a:	0112      	lsls	r2, r2, #4
 800086c:	b2d2      	uxtb	r2, r2
 800086e:	440b      	add	r3, r1
 8000870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000874:	e00a      	b.n	800088c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4908      	ldr	r1, [pc, #32]	; (800089c <__NVIC_SetPriority+0x50>)
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	f003 030f 	and.w	r3, r3, #15
 8000882:	3b04      	subs	r3, #4
 8000884:	0112      	lsls	r2, r2, #4
 8000886:	b2d2      	uxtb	r2, r2
 8000888:	440b      	add	r3, r1
 800088a:	761a      	strb	r2, [r3, #24]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000e100 	.word	0xe000e100
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b089      	sub	sp, #36	; 0x24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	f1c3 0307 	rsb	r3, r3, #7
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	bf28      	it	cs
 80008be:	2304      	movcs	r3, #4
 80008c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	3304      	adds	r3, #4
 80008c6:	2b06      	cmp	r3, #6
 80008c8:	d902      	bls.n	80008d0 <NVIC_EncodePriority+0x30>
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	3b03      	subs	r3, #3
 80008ce:	e000      	b.n	80008d2 <NVIC_EncodePriority+0x32>
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008d8:	69bb      	ldr	r3, [r7, #24]
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	43da      	mvns	r2, r3
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	401a      	ands	r2, r3
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	fa01 f303 	lsl.w	r3, r1, r3
 80008f2:	43d9      	mvns	r1, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f8:	4313      	orrs	r3, r2
         );
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3724      	adds	r7, #36	; 0x24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr

08000904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3b01      	subs	r3, #1
 8000910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000914:	d301      	bcc.n	800091a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000916:	2301      	movs	r3, #1
 8000918:	e00f      	b.n	800093a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <SysTick_Config+0x40>)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3b01      	subs	r3, #1
 8000920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000922:	210f      	movs	r1, #15
 8000924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000928:	f7ff ff90 	bl	800084c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <SysTick_Config+0x40>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000932:	4b04      	ldr	r3, [pc, #16]	; (8000944 <SysTick_Config+0x40>)
 8000934:	2207      	movs	r2, #7
 8000936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	e000e010 	.word	0xe000e010

08000948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b07      	cmp	r3, #7
 8000954:	d00f      	beq.n	8000976 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2b06      	cmp	r3, #6
 800095a:	d00c      	beq.n	8000976 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2b05      	cmp	r3, #5
 8000960:	d009      	beq.n	8000976 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b04      	cmp	r3, #4
 8000966:	d006      	beq.n	8000976 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2b03      	cmp	r3, #3
 800096c:	d003      	beq.n	8000976 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800096e:	2192      	movs	r1, #146	; 0x92
 8000970:	4804      	ldr	r0, [pc, #16]	; (8000984 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000972:	f7ff fd08 	bl	8000386 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f7ff ff1a 	bl	80007b0 <__NVIC_SetPriorityGrouping>
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	08003a34 	.word	0x08003a34

08000988 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
 8000994:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2b0f      	cmp	r3, #15
 800099e:	d903      	bls.n	80009a8 <HAL_NVIC_SetPriority+0x20>
 80009a0:	21aa      	movs	r1, #170	; 0xaa
 80009a2:	480e      	ldr	r0, [pc, #56]	; (80009dc <HAL_NVIC_SetPriority+0x54>)
 80009a4:	f7ff fcef 	bl	8000386 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	2b0f      	cmp	r3, #15
 80009ac:	d903      	bls.n	80009b6 <HAL_NVIC_SetPriority+0x2e>
 80009ae:	21ab      	movs	r1, #171	; 0xab
 80009b0:	480a      	ldr	r0, [pc, #40]	; (80009dc <HAL_NVIC_SetPriority+0x54>)
 80009b2:	f7ff fce8 	bl	8000386 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009b6:	f7ff ff1f 	bl	80007f8 <__NVIC_GetPriorityGrouping>
 80009ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	68b9      	ldr	r1, [r7, #8]
 80009c0:	6978      	ldr	r0, [r7, #20]
 80009c2:	f7ff ff6d 	bl	80008a0 <NVIC_EncodePriority>
 80009c6:	4602      	mov	r2, r0
 80009c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009cc:	4611      	mov	r1, r2
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff ff3c 	bl	800084c <__NVIC_SetPriority>
}
 80009d4:	bf00      	nop
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	08003a34 	.word	0x08003a34

080009e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80009ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	da03      	bge.n	80009fa <HAL_NVIC_EnableIRQ+0x1a>
 80009f2:	21be      	movs	r1, #190	; 0xbe
 80009f4:	4805      	ldr	r0, [pc, #20]	; (8000a0c <HAL_NVIC_EnableIRQ+0x2c>)
 80009f6:	f7ff fcc6 	bl	8000386 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff ff08 	bl	8000814 <__NVIC_EnableIRQ>
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	08003a34 	.word	0x08003a34

08000a10 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff ff73 	bl	8000904 <SysTick_Config>
 8000a1e:	4603      	mov	r3, r0
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a30:	2300      	movs	r3, #0
 8000a32:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a3a:	2b02      	cmp	r3, #2
 8000a3c:	d005      	beq.n	8000a4a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2204      	movs	r2, #4
 8000a42:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a44:	2301      	movs	r3, #1
 8000a46:	73fb      	strb	r3, [r7, #15]
 8000a48:	e051      	b.n	8000aee <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f022 020e 	bic.w	r2, r2, #14
 8000a58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f022 0201 	bic.w	r2, r2, #1
 8000a68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a22      	ldr	r2, [pc, #136]	; (8000af8 <HAL_DMA_Abort_IT+0xd0>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d029      	beq.n	8000ac8 <HAL_DMA_Abort_IT+0xa0>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a20      	ldr	r2, [pc, #128]	; (8000afc <HAL_DMA_Abort_IT+0xd4>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d022      	beq.n	8000ac4 <HAL_DMA_Abort_IT+0x9c>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a1f      	ldr	r2, [pc, #124]	; (8000b00 <HAL_DMA_Abort_IT+0xd8>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d01a      	beq.n	8000abe <HAL_DMA_Abort_IT+0x96>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a1d      	ldr	r2, [pc, #116]	; (8000b04 <HAL_DMA_Abort_IT+0xdc>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d012      	beq.n	8000ab8 <HAL_DMA_Abort_IT+0x90>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a1c      	ldr	r2, [pc, #112]	; (8000b08 <HAL_DMA_Abort_IT+0xe0>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d00a      	beq.n	8000ab2 <HAL_DMA_Abort_IT+0x8a>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a1a      	ldr	r2, [pc, #104]	; (8000b0c <HAL_DMA_Abort_IT+0xe4>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d102      	bne.n	8000aac <HAL_DMA_Abort_IT+0x84>
 8000aa6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000aaa:	e00e      	b.n	8000aca <HAL_DMA_Abort_IT+0xa2>
 8000aac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ab0:	e00b      	b.n	8000aca <HAL_DMA_Abort_IT+0xa2>
 8000ab2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ab6:	e008      	b.n	8000aca <HAL_DMA_Abort_IT+0xa2>
 8000ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000abc:	e005      	b.n	8000aca <HAL_DMA_Abort_IT+0xa2>
 8000abe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ac2:	e002      	b.n	8000aca <HAL_DMA_Abort_IT+0xa2>
 8000ac4:	2310      	movs	r3, #16
 8000ac6:	e000      	b.n	8000aca <HAL_DMA_Abort_IT+0xa2>
 8000ac8:	2301      	movs	r3, #1
 8000aca:	4a11      	ldr	r2, [pc, #68]	; (8000b10 <HAL_DMA_Abort_IT+0xe8>)
 8000acc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d003      	beq.n	8000aee <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	4798      	blx	r3
    } 
  }
  return status;
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40020008 	.word	0x40020008
 8000afc:	4002001c 	.word	0x4002001c
 8000b00:	40020030 	.word	0x40020030
 8000b04:	40020044 	.word	0x40020044
 8000b08:	40020058 	.word	0x40020058
 8000b0c:	4002006c 	.word	0x4002006c
 8000b10:	40020000 	.word	0x40020000

08000b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b22:	2300      	movs	r3, #0
 8000b24:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4aa1      	ldr	r2, [pc, #644]	; (8000db0 <HAL_GPIO_Init+0x29c>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d013      	beq.n	8000b56 <HAL_GPIO_Init+0x42>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4aa0      	ldr	r2, [pc, #640]	; (8000db4 <HAL_GPIO_Init+0x2a0>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d00f      	beq.n	8000b56 <HAL_GPIO_Init+0x42>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a9f      	ldr	r2, [pc, #636]	; (8000db8 <HAL_GPIO_Init+0x2a4>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d00b      	beq.n	8000b56 <HAL_GPIO_Init+0x42>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a9e      	ldr	r2, [pc, #632]	; (8000dbc <HAL_GPIO_Init+0x2a8>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d007      	beq.n	8000b56 <HAL_GPIO_Init+0x42>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4a9d      	ldr	r2, [pc, #628]	; (8000dc0 <HAL_GPIO_Init+0x2ac>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d003      	beq.n	8000b56 <HAL_GPIO_Init+0x42>
 8000b4e:	21bd      	movs	r1, #189	; 0xbd
 8000b50:	489c      	ldr	r0, [pc, #624]	; (8000dc4 <HAL_GPIO_Init+0x2b0>)
 8000b52:	f7ff fc18 	bl	8000386 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d005      	beq.n	8000b6c <HAL_GPIO_Init+0x58>
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	0c1b      	lsrs	r3, r3, #16
 8000b66:	041b      	lsls	r3, r3, #16
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d003      	beq.n	8000b74 <HAL_GPIO_Init+0x60>
 8000b6c:	21be      	movs	r1, #190	; 0xbe
 8000b6e:	4895      	ldr	r0, [pc, #596]	; (8000dc4 <HAL_GPIO_Init+0x2b0>)
 8000b70:	f7ff fc09 	bl	8000386 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	f000 821d 	beq.w	8000fb8 <HAL_GPIO_Init+0x4a4>
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	f000 8218 	beq.w	8000fb8 <HAL_GPIO_Init+0x4a4>
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	2b11      	cmp	r3, #17
 8000b8e:	f000 8213 	beq.w	8000fb8 <HAL_GPIO_Init+0x4a4>
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	f000 820e 	beq.w	8000fb8 <HAL_GPIO_Init+0x4a4>
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	2b12      	cmp	r3, #18
 8000ba2:	f000 8209 	beq.w	8000fb8 <HAL_GPIO_Init+0x4a4>
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	4a87      	ldr	r2, [pc, #540]	; (8000dc8 <HAL_GPIO_Init+0x2b4>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	f000 8203 	beq.w	8000fb8 <HAL_GPIO_Init+0x4a4>
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	4a85      	ldr	r2, [pc, #532]	; (8000dcc <HAL_GPIO_Init+0x2b8>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	f000 81fd 	beq.w	8000fb8 <HAL_GPIO_Init+0x4a4>
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	4a83      	ldr	r2, [pc, #524]	; (8000dd0 <HAL_GPIO_Init+0x2bc>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	f000 81f7 	beq.w	8000fb8 <HAL_GPIO_Init+0x4a4>
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	4a81      	ldr	r2, [pc, #516]	; (8000dd4 <HAL_GPIO_Init+0x2c0>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	f000 81f1 	beq.w	8000fb8 <HAL_GPIO_Init+0x4a4>
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	4a7f      	ldr	r2, [pc, #508]	; (8000dd8 <HAL_GPIO_Init+0x2c4>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	f000 81eb 	beq.w	8000fb8 <HAL_GPIO_Init+0x4a4>
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	4a7d      	ldr	r2, [pc, #500]	; (8000ddc <HAL_GPIO_Init+0x2c8>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	f000 81e5 	beq.w	8000fb8 <HAL_GPIO_Init+0x4a4>
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	2b03      	cmp	r3, #3
 8000bf4:	f000 81e0 	beq.w	8000fb8 <HAL_GPIO_Init+0x4a4>
 8000bf8:	21bf      	movs	r1, #191	; 0xbf
 8000bfa:	4872      	ldr	r0, [pc, #456]	; (8000dc4 <HAL_GPIO_Init+0x2b0>)
 8000bfc:	f7ff fbc3 	bl	8000386 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c00:	e1da      	b.n	8000fb8 <HAL_GPIO_Init+0x4a4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c02:	2201      	movs	r2, #1
 8000c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	69fa      	ldr	r2, [r7, #28]
 8000c12:	4013      	ands	r3, r2
 8000c14:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c16:	69ba      	ldr	r2, [r7, #24]
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	f040 81c9 	bne.w	8000fb2 <HAL_GPIO_Init+0x49e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a63      	ldr	r2, [pc, #396]	; (8000db0 <HAL_GPIO_Init+0x29c>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d013      	beq.n	8000c50 <HAL_GPIO_Init+0x13c>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a62      	ldr	r2, [pc, #392]	; (8000db4 <HAL_GPIO_Init+0x2a0>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d00f      	beq.n	8000c50 <HAL_GPIO_Init+0x13c>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a61      	ldr	r2, [pc, #388]	; (8000db8 <HAL_GPIO_Init+0x2a4>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d00b      	beq.n	8000c50 <HAL_GPIO_Init+0x13c>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a60      	ldr	r2, [pc, #384]	; (8000dbc <HAL_GPIO_Init+0x2a8>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d007      	beq.n	8000c50 <HAL_GPIO_Init+0x13c>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a5f      	ldr	r2, [pc, #380]	; (8000dc0 <HAL_GPIO_Init+0x2ac>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d003      	beq.n	8000c50 <HAL_GPIO_Init+0x13c>
 8000c48:	21cd      	movs	r1, #205	; 0xcd
 8000c4a:	485e      	ldr	r0, [pc, #376]	; (8000dc4 <HAL_GPIO_Init+0x2b0>)
 8000c4c:	f7ff fb9b 	bl	8000386 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	4a61      	ldr	r2, [pc, #388]	; (8000ddc <HAL_GPIO_Init+0x2c8>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	f000 80c2 	beq.w	8000de0 <HAL_GPIO_Init+0x2cc>
 8000c5c:	4a5f      	ldr	r2, [pc, #380]	; (8000ddc <HAL_GPIO_Init+0x2c8>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	f200 80e8 	bhi.w	8000e34 <HAL_GPIO_Init+0x320>
 8000c64:	4a5a      	ldr	r2, [pc, #360]	; (8000dd0 <HAL_GPIO_Init+0x2bc>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	f000 80ba 	beq.w	8000de0 <HAL_GPIO_Init+0x2cc>
 8000c6c:	4a58      	ldr	r2, [pc, #352]	; (8000dd0 <HAL_GPIO_Init+0x2bc>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	f200 80e0 	bhi.w	8000e34 <HAL_GPIO_Init+0x320>
 8000c74:	4a58      	ldr	r2, [pc, #352]	; (8000dd8 <HAL_GPIO_Init+0x2c4>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	f000 80b2 	beq.w	8000de0 <HAL_GPIO_Init+0x2cc>
 8000c7c:	4a56      	ldr	r2, [pc, #344]	; (8000dd8 <HAL_GPIO_Init+0x2c4>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	f200 80d8 	bhi.w	8000e34 <HAL_GPIO_Init+0x320>
 8000c84:	4a51      	ldr	r2, [pc, #324]	; (8000dcc <HAL_GPIO_Init+0x2b8>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	f000 80aa 	beq.w	8000de0 <HAL_GPIO_Init+0x2cc>
 8000c8c:	4a4f      	ldr	r2, [pc, #316]	; (8000dcc <HAL_GPIO_Init+0x2b8>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	f200 80d0 	bhi.w	8000e34 <HAL_GPIO_Init+0x320>
 8000c94:	4a4f      	ldr	r2, [pc, #316]	; (8000dd4 <HAL_GPIO_Init+0x2c0>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	f000 80a2 	beq.w	8000de0 <HAL_GPIO_Init+0x2cc>
 8000c9c:	4a4d      	ldr	r2, [pc, #308]	; (8000dd4 <HAL_GPIO_Init+0x2c0>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	f200 80c8 	bhi.w	8000e34 <HAL_GPIO_Init+0x320>
 8000ca4:	2b12      	cmp	r3, #18
 8000ca6:	d82b      	bhi.n	8000d00 <HAL_GPIO_Init+0x1ec>
 8000ca8:	2b12      	cmp	r3, #18
 8000caa:	f200 80c3 	bhi.w	8000e34 <HAL_GPIO_Init+0x320>
 8000cae:	a201      	add	r2, pc, #4	; (adr r2, 8000cb4 <HAL_GPIO_Init+0x1a0>)
 8000cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb4:	08000de1 	.word	0x08000de1
 8000cb8:	08000d09 	.word	0x08000d09
 8000cbc:	08000d5b 	.word	0x08000d5b
 8000cc0:	08000e2f 	.word	0x08000e2f
 8000cc4:	08000e35 	.word	0x08000e35
 8000cc8:	08000e35 	.word	0x08000e35
 8000ccc:	08000e35 	.word	0x08000e35
 8000cd0:	08000e35 	.word	0x08000e35
 8000cd4:	08000e35 	.word	0x08000e35
 8000cd8:	08000e35 	.word	0x08000e35
 8000cdc:	08000e35 	.word	0x08000e35
 8000ce0:	08000e35 	.word	0x08000e35
 8000ce4:	08000e35 	.word	0x08000e35
 8000ce8:	08000e35 	.word	0x08000e35
 8000cec:	08000e35 	.word	0x08000e35
 8000cf0:	08000e35 	.word	0x08000e35
 8000cf4:	08000e35 	.word	0x08000e35
 8000cf8:	08000d31 	.word	0x08000d31
 8000cfc:	08000d85 	.word	0x08000d85
 8000d00:	4a31      	ldr	r2, [pc, #196]	; (8000dc8 <HAL_GPIO_Init+0x2b4>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d06c      	beq.n	8000de0 <HAL_GPIO_Init+0x2cc>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d06:	e095      	b.n	8000e34 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d00b      	beq.n	8000d28 <HAL_GPIO_Init+0x214>
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d007      	beq.n	8000d28 <HAL_GPIO_Init+0x214>
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	2b03      	cmp	r3, #3
 8000d1e:	d003      	beq.n	8000d28 <HAL_GPIO_Init+0x214>
 8000d20:	21d5      	movs	r1, #213	; 0xd5
 8000d22:	4828      	ldr	r0, [pc, #160]	; (8000dc4 <HAL_GPIO_Init+0x2b0>)
 8000d24:	f7ff fb2f 	bl	8000386 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	623b      	str	r3, [r7, #32]
          break;
 8000d2e:	e082      	b.n	8000e36 <HAL_GPIO_Init+0x322>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d00b      	beq.n	8000d50 <HAL_GPIO_Init+0x23c>
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d007      	beq.n	8000d50 <HAL_GPIO_Init+0x23c>
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	2b03      	cmp	r3, #3
 8000d46:	d003      	beq.n	8000d50 <HAL_GPIO_Init+0x23c>
 8000d48:	21dc      	movs	r1, #220	; 0xdc
 8000d4a:	481e      	ldr	r0, [pc, #120]	; (8000dc4 <HAL_GPIO_Init+0x2b0>)
 8000d4c:	f7ff fb1b 	bl	8000386 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	3304      	adds	r3, #4
 8000d56:	623b      	str	r3, [r7, #32]
          break;
 8000d58:	e06d      	b.n	8000e36 <HAL_GPIO_Init+0x322>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d00b      	beq.n	8000d7a <HAL_GPIO_Init+0x266>
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d007      	beq.n	8000d7a <HAL_GPIO_Init+0x266>
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	2b03      	cmp	r3, #3
 8000d70:	d003      	beq.n	8000d7a <HAL_GPIO_Init+0x266>
 8000d72:	21e3      	movs	r1, #227	; 0xe3
 8000d74:	4813      	ldr	r0, [pc, #76]	; (8000dc4 <HAL_GPIO_Init+0x2b0>)
 8000d76:	f7ff fb06 	bl	8000386 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	3308      	adds	r3, #8
 8000d80:	623b      	str	r3, [r7, #32]
          break;
 8000d82:	e058      	b.n	8000e36 <HAL_GPIO_Init+0x322>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d00b      	beq.n	8000da4 <HAL_GPIO_Init+0x290>
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d007      	beq.n	8000da4 <HAL_GPIO_Init+0x290>
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	2b03      	cmp	r3, #3
 8000d9a:	d003      	beq.n	8000da4 <HAL_GPIO_Init+0x290>
 8000d9c:	21ea      	movs	r1, #234	; 0xea
 8000d9e:	4809      	ldr	r0, [pc, #36]	; (8000dc4 <HAL_GPIO_Init+0x2b0>)
 8000da0:	f7ff faf1 	bl	8000386 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	330c      	adds	r3, #12
 8000daa:	623b      	str	r3, [r7, #32]
          break;
 8000dac:	e043      	b.n	8000e36 <HAL_GPIO_Init+0x322>
 8000dae:	bf00      	nop
 8000db0:	40010800 	.word	0x40010800
 8000db4:	40010c00 	.word	0x40010c00
 8000db8:	40011000 	.word	0x40011000
 8000dbc:	40011400 	.word	0x40011400
 8000dc0:	40011800 	.word	0x40011800
 8000dc4:	08003a70 	.word	0x08003a70
 8000dc8:	10110000 	.word	0x10110000
 8000dcc:	10210000 	.word	0x10210000
 8000dd0:	10310000 	.word	0x10310000
 8000dd4:	10120000 	.word	0x10120000
 8000dd8:	10220000 	.word	0x10220000
 8000ddc:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d00b      	beq.n	8000e00 <HAL_GPIO_Init+0x2ec>
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d007      	beq.n	8000e00 <HAL_GPIO_Init+0x2ec>
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d003      	beq.n	8000e00 <HAL_GPIO_Init+0x2ec>
 8000df8:	21f7      	movs	r1, #247	; 0xf7
 8000dfa:	4876      	ldr	r0, [pc, #472]	; (8000fd4 <HAL_GPIO_Init+0x4c0>)
 8000dfc:	f7ff fac3 	bl	8000386 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d102      	bne.n	8000e0e <HAL_GPIO_Init+0x2fa>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e08:	2304      	movs	r3, #4
 8000e0a:	623b      	str	r3, [r7, #32]
          break;
 8000e0c:	e013      	b.n	8000e36 <HAL_GPIO_Init+0x322>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d105      	bne.n	8000e22 <HAL_GPIO_Init+0x30e>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e16:	2308      	movs	r3, #8
 8000e18:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	69fa      	ldr	r2, [r7, #28]
 8000e1e:	611a      	str	r2, [r3, #16]
          break;
 8000e20:	e009      	b.n	8000e36 <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e22:	2308      	movs	r3, #8
 8000e24:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	69fa      	ldr	r2, [r7, #28]
 8000e2a:	615a      	str	r2, [r3, #20]
          break;
 8000e2c:	e003      	b.n	8000e36 <HAL_GPIO_Init+0x322>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	623b      	str	r3, [r7, #32]
          break;
 8000e32:	e000      	b.n	8000e36 <HAL_GPIO_Init+0x322>
          break;
 8000e34:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	2bff      	cmp	r3, #255	; 0xff
 8000e3a:	d801      	bhi.n	8000e40 <HAL_GPIO_Init+0x32c>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	e001      	b.n	8000e44 <HAL_GPIO_Init+0x330>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3304      	adds	r3, #4
 8000e44:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	2bff      	cmp	r3, #255	; 0xff
 8000e4a:	d802      	bhi.n	8000e52 <HAL_GPIO_Init+0x33e>
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	e002      	b.n	8000e58 <HAL_GPIO_Init+0x344>
 8000e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e54:	3b08      	subs	r3, #8
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	210f      	movs	r1, #15
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	401a      	ands	r2, r3
 8000e6a:	6a39      	ldr	r1, [r7, #32]
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e72:	431a      	orrs	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f000 8096 	beq.w	8000fb2 <HAL_GPIO_Init+0x49e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e86:	4b54      	ldr	r3, [pc, #336]	; (8000fd8 <HAL_GPIO_Init+0x4c4>)
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	4a53      	ldr	r2, [pc, #332]	; (8000fd8 <HAL_GPIO_Init+0x4c4>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6193      	str	r3, [r2, #24]
 8000e92:	4b51      	ldr	r3, [pc, #324]	; (8000fd8 <HAL_GPIO_Init+0x4c4>)
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e9e:	4a4f      	ldr	r2, [pc, #316]	; (8000fdc <HAL_GPIO_Init+0x4c8>)
 8000ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eaa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	220f      	movs	r2, #15
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	68fa      	ldr	r2, [r7, #12]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a46      	ldr	r2, [pc, #280]	; (8000fe0 <HAL_GPIO_Init+0x4cc>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d013      	beq.n	8000ef2 <HAL_GPIO_Init+0x3de>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a45      	ldr	r2, [pc, #276]	; (8000fe4 <HAL_GPIO_Init+0x4d0>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d00d      	beq.n	8000eee <HAL_GPIO_Init+0x3da>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a44      	ldr	r2, [pc, #272]	; (8000fe8 <HAL_GPIO_Init+0x4d4>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d007      	beq.n	8000eea <HAL_GPIO_Init+0x3d6>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a43      	ldr	r2, [pc, #268]	; (8000fec <HAL_GPIO_Init+0x4d8>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d101      	bne.n	8000ee6 <HAL_GPIO_Init+0x3d2>
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e006      	b.n	8000ef4 <HAL_GPIO_Init+0x3e0>
 8000ee6:	2304      	movs	r3, #4
 8000ee8:	e004      	b.n	8000ef4 <HAL_GPIO_Init+0x3e0>
 8000eea:	2302      	movs	r3, #2
 8000eec:	e002      	b.n	8000ef4 <HAL_GPIO_Init+0x3e0>
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e000      	b.n	8000ef4 <HAL_GPIO_Init+0x3e0>
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ef6:	f002 0203 	and.w	r2, r2, #3
 8000efa:	0092      	lsls	r2, r2, #2
 8000efc:	4093      	lsls	r3, r2
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f04:	4935      	ldr	r1, [pc, #212]	; (8000fdc <HAL_GPIO_Init+0x4c8>)
 8000f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f08:	089b      	lsrs	r3, r3, #2
 8000f0a:	3302      	adds	r3, #2
 8000f0c:	68fa      	ldr	r2, [r7, #12]
 8000f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d006      	beq.n	8000f2c <HAL_GPIO_Init+0x418>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f1e:	4b34      	ldr	r3, [pc, #208]	; (8000ff0 <HAL_GPIO_Init+0x4dc>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	4933      	ldr	r1, [pc, #204]	; (8000ff0 <HAL_GPIO_Init+0x4dc>)
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	600b      	str	r3, [r1, #0]
 8000f2a:	e006      	b.n	8000f3a <HAL_GPIO_Init+0x426>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f2c:	4b30      	ldr	r3, [pc, #192]	; (8000ff0 <HAL_GPIO_Init+0x4dc>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	43db      	mvns	r3, r3
 8000f34:	492e      	ldr	r1, [pc, #184]	; (8000ff0 <HAL_GPIO_Init+0x4dc>)
 8000f36:	4013      	ands	r3, r2
 8000f38:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d006      	beq.n	8000f54 <HAL_GPIO_Init+0x440>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f46:	4b2a      	ldr	r3, [pc, #168]	; (8000ff0 <HAL_GPIO_Init+0x4dc>)
 8000f48:	685a      	ldr	r2, [r3, #4]
 8000f4a:	4929      	ldr	r1, [pc, #164]	; (8000ff0 <HAL_GPIO_Init+0x4dc>)
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	604b      	str	r3, [r1, #4]
 8000f52:	e006      	b.n	8000f62 <HAL_GPIO_Init+0x44e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f54:	4b26      	ldr	r3, [pc, #152]	; (8000ff0 <HAL_GPIO_Init+0x4dc>)
 8000f56:	685a      	ldr	r2, [r3, #4]
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	4924      	ldr	r1, [pc, #144]	; (8000ff0 <HAL_GPIO_Init+0x4dc>)
 8000f5e:	4013      	ands	r3, r2
 8000f60:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d006      	beq.n	8000f7c <HAL_GPIO_Init+0x468>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f6e:	4b20      	ldr	r3, [pc, #128]	; (8000ff0 <HAL_GPIO_Init+0x4dc>)
 8000f70:	689a      	ldr	r2, [r3, #8]
 8000f72:	491f      	ldr	r1, [pc, #124]	; (8000ff0 <HAL_GPIO_Init+0x4dc>)
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	608b      	str	r3, [r1, #8]
 8000f7a:	e006      	b.n	8000f8a <HAL_GPIO_Init+0x476>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f7c:	4b1c      	ldr	r3, [pc, #112]	; (8000ff0 <HAL_GPIO_Init+0x4dc>)
 8000f7e:	689a      	ldr	r2, [r3, #8]
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	43db      	mvns	r3, r3
 8000f84:	491a      	ldr	r1, [pc, #104]	; (8000ff0 <HAL_GPIO_Init+0x4dc>)
 8000f86:	4013      	ands	r3, r2
 8000f88:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d006      	beq.n	8000fa4 <HAL_GPIO_Init+0x490>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f96:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <HAL_GPIO_Init+0x4dc>)
 8000f98:	68da      	ldr	r2, [r3, #12]
 8000f9a:	4915      	ldr	r1, [pc, #84]	; (8000ff0 <HAL_GPIO_Init+0x4dc>)
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	60cb      	str	r3, [r1, #12]
 8000fa2:	e006      	b.n	8000fb2 <HAL_GPIO_Init+0x49e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_GPIO_Init+0x4dc>)
 8000fa6:	68da      	ldr	r2, [r3, #12]
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	4910      	ldr	r1, [pc, #64]	; (8000ff0 <HAL_GPIO_Init+0x4dc>)
 8000fae:	4013      	ands	r3, r2
 8000fb0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	f47f ae1d 	bne.w	8000c02 <HAL_GPIO_Init+0xee>
  }
}
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	3728      	adds	r7, #40	; 0x28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	08003a70 	.word	0x08003a70
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40010000 	.word	0x40010000
 8000fe0:	40010800 	.word	0x40010800
 8000fe4:	40010c00 	.word	0x40010c00
 8000fe8:	40011000 	.word	0x40011000
 8000fec:	40011400 	.word	0x40011400
 8000ff0:	40010400 	.word	0x40010400

08000ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	807b      	strh	r3, [r7, #2]
 8001000:	4613      	mov	r3, r2
 8001002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001004:	887b      	ldrh	r3, [r7, #2]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d004      	beq.n	8001014 <HAL_GPIO_WritePin+0x20>
 800100a:	887b      	ldrh	r3, [r7, #2]
 800100c:	0c1b      	lsrs	r3, r3, #16
 800100e:	041b      	lsls	r3, r3, #16
 8001010:	2b00      	cmp	r3, #0
 8001012:	d004      	beq.n	800101e <HAL_GPIO_WritePin+0x2a>
 8001014:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8001018:	480e      	ldr	r0, [pc, #56]	; (8001054 <HAL_GPIO_WritePin+0x60>)
 800101a:	f7ff f9b4 	bl	8000386 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800101e:	787b      	ldrb	r3, [r7, #1]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d007      	beq.n	8001034 <HAL_GPIO_WritePin+0x40>
 8001024:	787b      	ldrb	r3, [r7, #1]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d004      	beq.n	8001034 <HAL_GPIO_WritePin+0x40>
 800102a:	f240 11d5 	movw	r1, #469	; 0x1d5
 800102e:	4809      	ldr	r0, [pc, #36]	; (8001054 <HAL_GPIO_WritePin+0x60>)
 8001030:	f7ff f9a9 	bl	8000386 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8001034:	787b      	ldrb	r3, [r7, #1]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800103a:	887a      	ldrh	r2, [r7, #2]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001040:	e003      	b.n	800104a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001042:	887b      	ldrh	r3, [r7, #2]
 8001044:	041a      	lsls	r2, r3, #16
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	611a      	str	r2, [r3, #16]
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	08003a70 	.word	0x08003a70

08001058 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001064:	887b      	ldrh	r3, [r7, #2]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d004      	beq.n	8001074 <HAL_GPIO_TogglePin+0x1c>
 800106a:	887b      	ldrh	r3, [r7, #2]
 800106c:	0c1b      	lsrs	r3, r3, #16
 800106e:	041b      	lsls	r3, r3, #16
 8001070:	2b00      	cmp	r3, #0
 8001072:	d004      	beq.n	800107e <HAL_GPIO_TogglePin+0x26>
 8001074:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8001078:	480a      	ldr	r0, [pc, #40]	; (80010a4 <HAL_GPIO_TogglePin+0x4c>)
 800107a:	f7ff f984 	bl	8000386 <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001084:	887a      	ldrh	r2, [r7, #2]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4013      	ands	r3, r2
 800108a:	041a      	lsls	r2, r3, #16
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	43d9      	mvns	r1, r3
 8001090:	887b      	ldrh	r3, [r7, #2]
 8001092:	400b      	ands	r3, r1
 8001094:	431a      	orrs	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	611a      	str	r2, [r3, #16]
}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	08003a70 	.word	0x08003a70

080010a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e35c      	b.n	8001774 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d01c      	beq.n	80010fc <HAL_RCC_OscConfig+0x54>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d116      	bne.n	80010fc <HAL_RCC_OscConfig+0x54>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d110      	bne.n	80010fc <HAL_RCC_OscConfig+0x54>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0308 	and.w	r3, r3, #8
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d10a      	bne.n	80010fc <HAL_RCC_OscConfig+0x54>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d104      	bne.n	80010fc <HAL_RCC_OscConfig+0x54>
 80010f2:	f240 1167 	movw	r1, #359	; 0x167
 80010f6:	48a5      	ldr	r0, [pc, #660]	; (800138c <HAL_RCC_OscConfig+0x2e4>)
 80010f8:	f7ff f945 	bl	8000386 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	2b00      	cmp	r3, #0
 8001106:	f000 809a 	beq.w	800123e <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00e      	beq.n	8001130 <HAL_RCC_OscConfig+0x88>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800111a:	d009      	beq.n	8001130 <HAL_RCC_OscConfig+0x88>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001124:	d004      	beq.n	8001130 <HAL_RCC_OscConfig+0x88>
 8001126:	f240 116d 	movw	r1, #365	; 0x16d
 800112a:	4898      	ldr	r0, [pc, #608]	; (800138c <HAL_RCC_OscConfig+0x2e4>)
 800112c:	f7ff f92b 	bl	8000386 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001130:	4b97      	ldr	r3, [pc, #604]	; (8001390 <HAL_RCC_OscConfig+0x2e8>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 030c 	and.w	r3, r3, #12
 8001138:	2b04      	cmp	r3, #4
 800113a:	d00c      	beq.n	8001156 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800113c:	4b94      	ldr	r3, [pc, #592]	; (8001390 <HAL_RCC_OscConfig+0x2e8>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 030c 	and.w	r3, r3, #12
 8001144:	2b08      	cmp	r3, #8
 8001146:	d112      	bne.n	800116e <HAL_RCC_OscConfig+0xc6>
 8001148:	4b91      	ldr	r3, [pc, #580]	; (8001390 <HAL_RCC_OscConfig+0x2e8>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001154:	d10b      	bne.n	800116e <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001156:	4b8e      	ldr	r3, [pc, #568]	; (8001390 <HAL_RCC_OscConfig+0x2e8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d06c      	beq.n	800123c <HAL_RCC_OscConfig+0x194>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d168      	bne.n	800123c <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e302      	b.n	8001774 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001176:	d106      	bne.n	8001186 <HAL_RCC_OscConfig+0xde>
 8001178:	4b85      	ldr	r3, [pc, #532]	; (8001390 <HAL_RCC_OscConfig+0x2e8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a84      	ldr	r2, [pc, #528]	; (8001390 <HAL_RCC_OscConfig+0x2e8>)
 800117e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	e02e      	b.n	80011e4 <HAL_RCC_OscConfig+0x13c>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d10c      	bne.n	80011a8 <HAL_RCC_OscConfig+0x100>
 800118e:	4b80      	ldr	r3, [pc, #512]	; (8001390 <HAL_RCC_OscConfig+0x2e8>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a7f      	ldr	r2, [pc, #508]	; (8001390 <HAL_RCC_OscConfig+0x2e8>)
 8001194:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	4b7d      	ldr	r3, [pc, #500]	; (8001390 <HAL_RCC_OscConfig+0x2e8>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a7c      	ldr	r2, [pc, #496]	; (8001390 <HAL_RCC_OscConfig+0x2e8>)
 80011a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a4:	6013      	str	r3, [r2, #0]
 80011a6:	e01d      	b.n	80011e4 <HAL_RCC_OscConfig+0x13c>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011b0:	d10c      	bne.n	80011cc <HAL_RCC_OscConfig+0x124>
 80011b2:	4b77      	ldr	r3, [pc, #476]	; (8001390 <HAL_RCC_OscConfig+0x2e8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a76      	ldr	r2, [pc, #472]	; (8001390 <HAL_RCC_OscConfig+0x2e8>)
 80011b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	4b74      	ldr	r3, [pc, #464]	; (8001390 <HAL_RCC_OscConfig+0x2e8>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a73      	ldr	r2, [pc, #460]	; (8001390 <HAL_RCC_OscConfig+0x2e8>)
 80011c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	e00b      	b.n	80011e4 <HAL_RCC_OscConfig+0x13c>
 80011cc:	4b70      	ldr	r3, [pc, #448]	; (8001390 <HAL_RCC_OscConfig+0x2e8>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a6f      	ldr	r2, [pc, #444]	; (8001390 <HAL_RCC_OscConfig+0x2e8>)
 80011d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	4b6d      	ldr	r3, [pc, #436]	; (8001390 <HAL_RCC_OscConfig+0x2e8>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a6c      	ldr	r2, [pc, #432]	; (8001390 <HAL_RCC_OscConfig+0x2e8>)
 80011de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d013      	beq.n	8001214 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ec:	f7ff fad6 	bl	800079c <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011f4:	f7ff fad2 	bl	800079c <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b64      	cmp	r3, #100	; 0x64
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e2b6      	b.n	8001774 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001206:	4b62      	ldr	r3, [pc, #392]	; (8001390 <HAL_RCC_OscConfig+0x2e8>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0f0      	beq.n	80011f4 <HAL_RCC_OscConfig+0x14c>
 8001212:	e014      	b.n	800123e <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001214:	f7ff fac2 	bl	800079c <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800121c:	f7ff fabe 	bl	800079c <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b64      	cmp	r3, #100	; 0x64
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e2a2      	b.n	8001774 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800122e:	4b58      	ldr	r3, [pc, #352]	; (8001390 <HAL_RCC_OscConfig+0x2e8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f0      	bne.n	800121c <HAL_RCC_OscConfig+0x174>
 800123a:	e000      	b.n	800123e <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800123c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d079      	beq.n	800133e <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d008      	beq.n	8001264 <HAL_RCC_OscConfig+0x1bc>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d004      	beq.n	8001264 <HAL_RCC_OscConfig+0x1bc>
 800125a:	f240 11a1 	movw	r1, #417	; 0x1a1
 800125e:	484b      	ldr	r0, [pc, #300]	; (800138c <HAL_RCC_OscConfig+0x2e4>)
 8001260:	f7ff f891 	bl	8000386 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	2b1f      	cmp	r3, #31
 800126a:	d904      	bls.n	8001276 <HAL_RCC_OscConfig+0x1ce>
 800126c:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8001270:	4846      	ldr	r0, [pc, #280]	; (800138c <HAL_RCC_OscConfig+0x2e4>)
 8001272:	f7ff f888 	bl	8000386 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001276:	4b46      	ldr	r3, [pc, #280]	; (8001390 <HAL_RCC_OscConfig+0x2e8>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 030c 	and.w	r3, r3, #12
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00b      	beq.n	800129a <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001282:	4b43      	ldr	r3, [pc, #268]	; (8001390 <HAL_RCC_OscConfig+0x2e8>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 030c 	and.w	r3, r3, #12
 800128a:	2b08      	cmp	r3, #8
 800128c:	d11c      	bne.n	80012c8 <HAL_RCC_OscConfig+0x220>
 800128e:	4b40      	ldr	r3, [pc, #256]	; (8001390 <HAL_RCC_OscConfig+0x2e8>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d116      	bne.n	80012c8 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800129a:	4b3d      	ldr	r3, [pc, #244]	; (8001390 <HAL_RCC_OscConfig+0x2e8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d005      	beq.n	80012b2 <HAL_RCC_OscConfig+0x20a>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d001      	beq.n	80012b2 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e260      	b.n	8001774 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b2:	4b37      	ldr	r3, [pc, #220]	; (8001390 <HAL_RCC_OscConfig+0x2e8>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	4933      	ldr	r1, [pc, #204]	; (8001390 <HAL_RCC_OscConfig+0x2e8>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c6:	e03a      	b.n	800133e <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	691b      	ldr	r3, [r3, #16]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d020      	beq.n	8001312 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012d0:	4b30      	ldr	r3, [pc, #192]	; (8001394 <HAL_RCC_OscConfig+0x2ec>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d6:	f7ff fa61 	bl	800079c <HAL_GetTick>
 80012da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012dc:	e008      	b.n	80012f0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012de:	f7ff fa5d 	bl	800079c <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d901      	bls.n	80012f0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e241      	b.n	8001774 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f0:	4b27      	ldr	r3, [pc, #156]	; (8001390 <HAL_RCC_OscConfig+0x2e8>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d0f0      	beq.n	80012de <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fc:	4b24      	ldr	r3, [pc, #144]	; (8001390 <HAL_RCC_OscConfig+0x2e8>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	695b      	ldr	r3, [r3, #20]
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	4921      	ldr	r1, [pc, #132]	; (8001390 <HAL_RCC_OscConfig+0x2e8>)
 800130c:	4313      	orrs	r3, r2
 800130e:	600b      	str	r3, [r1, #0]
 8001310:	e015      	b.n	800133e <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001312:	4b20      	ldr	r3, [pc, #128]	; (8001394 <HAL_RCC_OscConfig+0x2ec>)
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fa40 	bl	800079c <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001320:	f7ff fa3c 	bl	800079c <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e220      	b.n	8001774 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <HAL_RCC_OscConfig+0x2e8>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0308 	and.w	r3, r3, #8
 8001346:	2b00      	cmp	r3, #0
 8001348:	d048      	beq.n	80013dc <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d008      	beq.n	8001364 <HAL_RCC_OscConfig+0x2bc>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d004      	beq.n	8001364 <HAL_RCC_OscConfig+0x2bc>
 800135a:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800135e:	480b      	ldr	r0, [pc, #44]	; (800138c <HAL_RCC_OscConfig+0x2e4>)
 8001360:	f7ff f811 	bl	8000386 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d021      	beq.n	80013b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800136c:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <HAL_RCC_OscConfig+0x2f0>)
 800136e:	2201      	movs	r2, #1
 8001370:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001372:	f7ff fa13 	bl	800079c <HAL_GetTick>
 8001376:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001378:	e010      	b.n	800139c <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800137a:	f7ff fa0f 	bl	800079c <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d909      	bls.n	800139c <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e1f3      	b.n	8001774 <HAL_RCC_OscConfig+0x6cc>
 800138c:	08003aac 	.word	0x08003aac
 8001390:	40021000 	.word	0x40021000
 8001394:	42420000 	.word	0x42420000
 8001398:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139c:	4b67      	ldr	r3, [pc, #412]	; (800153c <HAL_RCC_OscConfig+0x494>)
 800139e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0e8      	beq.n	800137a <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013a8:	2001      	movs	r0, #1
 80013aa:	f000 fc0f 	bl	8001bcc <RCC_Delay>
 80013ae:	e015      	b.n	80013dc <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013b0:	4b63      	ldr	r3, [pc, #396]	; (8001540 <HAL_RCC_OscConfig+0x498>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b6:	f7ff f9f1 	bl	800079c <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013be:	f7ff f9ed 	bl	800079c <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e1d1      	b.n	8001774 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d0:	4b5a      	ldr	r3, [pc, #360]	; (800153c <HAL_RCC_OscConfig+0x494>)
 80013d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1f0      	bne.n	80013be <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 80c0 	beq.w	800156a <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ea:	2300      	movs	r3, #0
 80013ec:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d00c      	beq.n	8001410 <HAL_RCC_OscConfig+0x368>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d008      	beq.n	8001410 <HAL_RCC_OscConfig+0x368>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	2b05      	cmp	r3, #5
 8001404:	d004      	beq.n	8001410 <HAL_RCC_OscConfig+0x368>
 8001406:	f240 2111 	movw	r1, #529	; 0x211
 800140a:	484e      	ldr	r0, [pc, #312]	; (8001544 <HAL_RCC_OscConfig+0x49c>)
 800140c:	f7fe ffbb 	bl	8000386 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001410:	4b4a      	ldr	r3, [pc, #296]	; (800153c <HAL_RCC_OscConfig+0x494>)
 8001412:	69db      	ldr	r3, [r3, #28]
 8001414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d10d      	bne.n	8001438 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800141c:	4b47      	ldr	r3, [pc, #284]	; (800153c <HAL_RCC_OscConfig+0x494>)
 800141e:	69db      	ldr	r3, [r3, #28]
 8001420:	4a46      	ldr	r2, [pc, #280]	; (800153c <HAL_RCC_OscConfig+0x494>)
 8001422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001426:	61d3      	str	r3, [r2, #28]
 8001428:	4b44      	ldr	r3, [pc, #272]	; (800153c <HAL_RCC_OscConfig+0x494>)
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001434:	2301      	movs	r3, #1
 8001436:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001438:	4b43      	ldr	r3, [pc, #268]	; (8001548 <HAL_RCC_OscConfig+0x4a0>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001440:	2b00      	cmp	r3, #0
 8001442:	d118      	bne.n	8001476 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001444:	4b40      	ldr	r3, [pc, #256]	; (8001548 <HAL_RCC_OscConfig+0x4a0>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a3f      	ldr	r2, [pc, #252]	; (8001548 <HAL_RCC_OscConfig+0x4a0>)
 800144a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800144e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001450:	f7ff f9a4 	bl	800079c <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001458:	f7ff f9a0 	bl	800079c <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b64      	cmp	r3, #100	; 0x64
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e184      	b.n	8001774 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146a:	4b37      	ldr	r3, [pc, #220]	; (8001548 <HAL_RCC_OscConfig+0x4a0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f0      	beq.n	8001458 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d106      	bne.n	800148c <HAL_RCC_OscConfig+0x3e4>
 800147e:	4b2f      	ldr	r3, [pc, #188]	; (800153c <HAL_RCC_OscConfig+0x494>)
 8001480:	6a1b      	ldr	r3, [r3, #32]
 8001482:	4a2e      	ldr	r2, [pc, #184]	; (800153c <HAL_RCC_OscConfig+0x494>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6213      	str	r3, [r2, #32]
 800148a:	e02d      	b.n	80014e8 <HAL_RCC_OscConfig+0x440>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d10c      	bne.n	80014ae <HAL_RCC_OscConfig+0x406>
 8001494:	4b29      	ldr	r3, [pc, #164]	; (800153c <HAL_RCC_OscConfig+0x494>)
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	4a28      	ldr	r2, [pc, #160]	; (800153c <HAL_RCC_OscConfig+0x494>)
 800149a:	f023 0301 	bic.w	r3, r3, #1
 800149e:	6213      	str	r3, [r2, #32]
 80014a0:	4b26      	ldr	r3, [pc, #152]	; (800153c <HAL_RCC_OscConfig+0x494>)
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	4a25      	ldr	r2, [pc, #148]	; (800153c <HAL_RCC_OscConfig+0x494>)
 80014a6:	f023 0304 	bic.w	r3, r3, #4
 80014aa:	6213      	str	r3, [r2, #32]
 80014ac:	e01c      	b.n	80014e8 <HAL_RCC_OscConfig+0x440>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	2b05      	cmp	r3, #5
 80014b4:	d10c      	bne.n	80014d0 <HAL_RCC_OscConfig+0x428>
 80014b6:	4b21      	ldr	r3, [pc, #132]	; (800153c <HAL_RCC_OscConfig+0x494>)
 80014b8:	6a1b      	ldr	r3, [r3, #32]
 80014ba:	4a20      	ldr	r2, [pc, #128]	; (800153c <HAL_RCC_OscConfig+0x494>)
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	6213      	str	r3, [r2, #32]
 80014c2:	4b1e      	ldr	r3, [pc, #120]	; (800153c <HAL_RCC_OscConfig+0x494>)
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	4a1d      	ldr	r2, [pc, #116]	; (800153c <HAL_RCC_OscConfig+0x494>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6213      	str	r3, [r2, #32]
 80014ce:	e00b      	b.n	80014e8 <HAL_RCC_OscConfig+0x440>
 80014d0:	4b1a      	ldr	r3, [pc, #104]	; (800153c <HAL_RCC_OscConfig+0x494>)
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	4a19      	ldr	r2, [pc, #100]	; (800153c <HAL_RCC_OscConfig+0x494>)
 80014d6:	f023 0301 	bic.w	r3, r3, #1
 80014da:	6213      	str	r3, [r2, #32]
 80014dc:	4b17      	ldr	r3, [pc, #92]	; (800153c <HAL_RCC_OscConfig+0x494>)
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	4a16      	ldr	r2, [pc, #88]	; (800153c <HAL_RCC_OscConfig+0x494>)
 80014e2:	f023 0304 	bic.w	r3, r3, #4
 80014e6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d015      	beq.n	800151c <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f0:	f7ff f954 	bl	800079c <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f6:	e00a      	b.n	800150e <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014f8:	f7ff f950 	bl	800079c <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	f241 3288 	movw	r2, #5000	; 0x1388
 8001506:	4293      	cmp	r3, r2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e132      	b.n	8001774 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800150e:	4b0b      	ldr	r3, [pc, #44]	; (800153c <HAL_RCC_OscConfig+0x494>)
 8001510:	6a1b      	ldr	r3, [r3, #32]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0ee      	beq.n	80014f8 <HAL_RCC_OscConfig+0x450>
 800151a:	e01d      	b.n	8001558 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151c:	f7ff f93e 	bl	800079c <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001522:	e013      	b.n	800154c <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001524:	f7ff f93a 	bl	800079c <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001532:	4293      	cmp	r3, r2
 8001534:	d90a      	bls.n	800154c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e11c      	b.n	8001774 <HAL_RCC_OscConfig+0x6cc>
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000
 8001540:	42420480 	.word	0x42420480
 8001544:	08003aac 	.word	0x08003aac
 8001548:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800154c:	4b8b      	ldr	r3, [pc, #556]	; (800177c <HAL_RCC_OscConfig+0x6d4>)
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e5      	bne.n	8001524 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001558:	7dfb      	ldrb	r3, [r7, #23]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d105      	bne.n	800156a <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800155e:	4b87      	ldr	r3, [pc, #540]	; (800177c <HAL_RCC_OscConfig+0x6d4>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	4a86      	ldr	r2, [pc, #536]	; (800177c <HAL_RCC_OscConfig+0x6d4>)
 8001564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001568:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00c      	beq.n	800158c <HAL_RCC_OscConfig+0x4e4>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d008      	beq.n	800158c <HAL_RCC_OscConfig+0x4e4>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	2b02      	cmp	r3, #2
 8001580:	d004      	beq.n	800158c <HAL_RCC_OscConfig+0x4e4>
 8001582:	f240 21af 	movw	r1, #687	; 0x2af
 8001586:	487e      	ldr	r0, [pc, #504]	; (8001780 <HAL_RCC_OscConfig+0x6d8>)
 8001588:	f7fe fefd 	bl	8000386 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 80ee 	beq.w	8001772 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001596:	4b79      	ldr	r3, [pc, #484]	; (800177c <HAL_RCC_OscConfig+0x6d4>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 030c 	and.w	r3, r3, #12
 800159e:	2b08      	cmp	r3, #8
 80015a0:	f000 80ce 	beq.w	8001740 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	f040 80b2 	bne.w	8001712 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a1b      	ldr	r3, [r3, #32]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d009      	beq.n	80015ca <HAL_RCC_OscConfig+0x522>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a1b      	ldr	r3, [r3, #32]
 80015ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015be:	d004      	beq.n	80015ca <HAL_RCC_OscConfig+0x522>
 80015c0:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 80015c4:	486e      	ldr	r0, [pc, #440]	; (8001780 <HAL_RCC_OscConfig+0x6d8>)
 80015c6:	f7fe fede 	bl	8000386 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d04a      	beq.n	8001668 <HAL_RCC_OscConfig+0x5c0>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80015da:	d045      	beq.n	8001668 <HAL_RCC_OscConfig+0x5c0>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80015e4:	d040      	beq.n	8001668 <HAL_RCC_OscConfig+0x5c0>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80015ee:	d03b      	beq.n	8001668 <HAL_RCC_OscConfig+0x5c0>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80015f8:	d036      	beq.n	8001668 <HAL_RCC_OscConfig+0x5c0>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001602:	d031      	beq.n	8001668 <HAL_RCC_OscConfig+0x5c0>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001608:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800160c:	d02c      	beq.n	8001668 <HAL_RCC_OscConfig+0x5c0>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001612:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001616:	d027      	beq.n	8001668 <HAL_RCC_OscConfig+0x5c0>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001620:	d022      	beq.n	8001668 <HAL_RCC_OscConfig+0x5c0>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001626:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800162a:	d01d      	beq.n	8001668 <HAL_RCC_OscConfig+0x5c0>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001630:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001634:	d018      	beq.n	8001668 <HAL_RCC_OscConfig+0x5c0>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800163e:	d013      	beq.n	8001668 <HAL_RCC_OscConfig+0x5c0>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001644:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001648:	d00e      	beq.n	8001668 <HAL_RCC_OscConfig+0x5c0>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164e:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8001652:	d009      	beq.n	8001668 <HAL_RCC_OscConfig+0x5c0>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001658:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800165c:	d004      	beq.n	8001668 <HAL_RCC_OscConfig+0x5c0>
 800165e:	f240 21b9 	movw	r1, #697	; 0x2b9
 8001662:	4847      	ldr	r0, [pc, #284]	; (8001780 <HAL_RCC_OscConfig+0x6d8>)
 8001664:	f7fe fe8f 	bl	8000386 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001668:	4b46      	ldr	r3, [pc, #280]	; (8001784 <HAL_RCC_OscConfig+0x6dc>)
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166e:	f7ff f895 	bl	800079c <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001676:	f7ff f891 	bl	800079c <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e075      	b.n	8001774 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001688:	4b3c      	ldr	r3, [pc, #240]	; (800177c <HAL_RCC_OscConfig+0x6d4>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1f0      	bne.n	8001676 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800169c:	d116      	bne.n	80016cc <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d009      	beq.n	80016ba <HAL_RCC_OscConfig+0x612>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80016ae:	d004      	beq.n	80016ba <HAL_RCC_OscConfig+0x612>
 80016b0:	f240 21cf 	movw	r1, #719	; 0x2cf
 80016b4:	4832      	ldr	r0, [pc, #200]	; (8001780 <HAL_RCC_OscConfig+0x6d8>)
 80016b6:	f7fe fe66 	bl	8000386 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016ba:	4b30      	ldr	r3, [pc, #192]	; (800177c <HAL_RCC_OscConfig+0x6d4>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	492d      	ldr	r1, [pc, #180]	; (800177c <HAL_RCC_OscConfig+0x6d4>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016cc:	4b2b      	ldr	r3, [pc, #172]	; (800177c <HAL_RCC_OscConfig+0x6d4>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a19      	ldr	r1, [r3, #32]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	430b      	orrs	r3, r1
 80016de:	4927      	ldr	r1, [pc, #156]	; (800177c <HAL_RCC_OscConfig+0x6d4>)
 80016e0:	4313      	orrs	r3, r2
 80016e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016e4:	4b27      	ldr	r3, [pc, #156]	; (8001784 <HAL_RCC_OscConfig+0x6dc>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ea:	f7ff f857 	bl	800079c <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f2:	f7ff f853 	bl	800079c <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e037      	b.n	8001774 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001704:	4b1d      	ldr	r3, [pc, #116]	; (800177c <HAL_RCC_OscConfig+0x6d4>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d0f0      	beq.n	80016f2 <HAL_RCC_OscConfig+0x64a>
 8001710:	e02f      	b.n	8001772 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001712:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <HAL_RCC_OscConfig+0x6dc>)
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001718:	f7ff f840 	bl	800079c <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001720:	f7ff f83c 	bl	800079c <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e020      	b.n	8001774 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001732:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_RCC_OscConfig+0x6d4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_OscConfig+0x678>
 800173e:	e018      	b.n	8001772 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69db      	ldr	r3, [r3, #28]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d101      	bne.n	800174c <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e013      	b.n	8001774 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <HAL_RCC_OscConfig+0x6d4>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	429a      	cmp	r2, r3
 800175e:	d106      	bne.n	800176e <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800176a:	429a      	cmp	r2, r3
 800176c:	d001      	beq.n	8001772 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e000      	b.n	8001774 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40021000 	.word	0x40021000
 8001780:	08003aac 	.word	0x08003aac
 8001784:	42420060 	.word	0x42420060

08001788 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e176      	b.n	8001a8a <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d116      	bne.n	80017d6 <HAL_RCC_ClockConfig+0x4e>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d110      	bne.n	80017d6 <HAL_RCC_ClockConfig+0x4e>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d10a      	bne.n	80017d6 <HAL_RCC_ClockConfig+0x4e>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0308 	and.w	r3, r3, #8
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d104      	bne.n	80017d6 <HAL_RCC_ClockConfig+0x4e>
 80017cc:	f44f 714e 	mov.w	r1, #824	; 0x338
 80017d0:	4874      	ldr	r0, [pc, #464]	; (80019a4 <HAL_RCC_ClockConfig+0x21c>)
 80017d2:	f7fe fdd8 	bl	8000386 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d00a      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x6a>
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d007      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x6a>
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d004      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x6a>
 80017e8:	f240 3139 	movw	r1, #825	; 0x339
 80017ec:	486d      	ldr	r0, [pc, #436]	; (80019a4 <HAL_RCC_ClockConfig+0x21c>)
 80017ee:	f7fe fdca 	bl	8000386 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017f2:	4b6d      	ldr	r3, [pc, #436]	; (80019a8 <HAL_RCC_ClockConfig+0x220>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d910      	bls.n	8001822 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001800:	4b69      	ldr	r3, [pc, #420]	; (80019a8 <HAL_RCC_ClockConfig+0x220>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f023 0207 	bic.w	r2, r3, #7
 8001808:	4967      	ldr	r1, [pc, #412]	; (80019a8 <HAL_RCC_ClockConfig+0x220>)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	4313      	orrs	r3, r2
 800180e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001810:	4b65      	ldr	r3, [pc, #404]	; (80019a8 <HAL_RCC_ClockConfig+0x220>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d001      	beq.n	8001822 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e133      	b.n	8001a8a <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d049      	beq.n	80018c2 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0304 	and.w	r3, r3, #4
 8001836:	2b00      	cmp	r3, #0
 8001838:	d005      	beq.n	8001846 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800183a:	4b5c      	ldr	r3, [pc, #368]	; (80019ac <HAL_RCC_ClockConfig+0x224>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	4a5b      	ldr	r2, [pc, #364]	; (80019ac <HAL_RCC_ClockConfig+0x224>)
 8001840:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001844:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d005      	beq.n	800185e <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001852:	4b56      	ldr	r3, [pc, #344]	; (80019ac <HAL_RCC_ClockConfig+0x224>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	4a55      	ldr	r2, [pc, #340]	; (80019ac <HAL_RCC_ClockConfig+0x224>)
 8001858:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800185c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d024      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x128>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2b80      	cmp	r3, #128	; 0x80
 800186c:	d020      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x128>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2b90      	cmp	r3, #144	; 0x90
 8001874:	d01c      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x128>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2ba0      	cmp	r3, #160	; 0xa0
 800187c:	d018      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x128>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	2bb0      	cmp	r3, #176	; 0xb0
 8001884:	d014      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x128>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2bc0      	cmp	r3, #192	; 0xc0
 800188c:	d010      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x128>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2bd0      	cmp	r3, #208	; 0xd0
 8001894:	d00c      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x128>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	2be0      	cmp	r3, #224	; 0xe0
 800189c:	d008      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x128>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2bf0      	cmp	r3, #240	; 0xf0
 80018a4:	d004      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x128>
 80018a6:	f240 315f 	movw	r1, #863	; 0x35f
 80018aa:	483e      	ldr	r0, [pc, #248]	; (80019a4 <HAL_RCC_ClockConfig+0x21c>)
 80018ac:	f7fe fd6b 	bl	8000386 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018b0:	4b3e      	ldr	r3, [pc, #248]	; (80019ac <HAL_RCC_ClockConfig+0x224>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	493b      	ldr	r1, [pc, #236]	; (80019ac <HAL_RCC_ClockConfig+0x224>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d051      	beq.n	8001972 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00c      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x168>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d008      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x168>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d004      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x168>
 80018e6:	f240 3166 	movw	r1, #870	; 0x366
 80018ea:	482e      	ldr	r0, [pc, #184]	; (80019a4 <HAL_RCC_ClockConfig+0x21c>)
 80018ec:	f7fe fd4b 	bl	8000386 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d107      	bne.n	8001908 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f8:	4b2c      	ldr	r3, [pc, #176]	; (80019ac <HAL_RCC_ClockConfig+0x224>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d115      	bne.n	8001930 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e0c0      	b.n	8001a8a <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b02      	cmp	r3, #2
 800190e:	d107      	bne.n	8001920 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001910:	4b26      	ldr	r3, [pc, #152]	; (80019ac <HAL_RCC_ClockConfig+0x224>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d109      	bne.n	8001930 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e0b4      	b.n	8001a8a <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001920:	4b22      	ldr	r3, [pc, #136]	; (80019ac <HAL_RCC_ClockConfig+0x224>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e0ac      	b.n	8001a8a <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001930:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <HAL_RCC_ClockConfig+0x224>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f023 0203 	bic.w	r2, r3, #3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	491b      	ldr	r1, [pc, #108]	; (80019ac <HAL_RCC_ClockConfig+0x224>)
 800193e:	4313      	orrs	r3, r2
 8001940:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001942:	f7fe ff2b 	bl	800079c <HAL_GetTick>
 8001946:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001948:	e00a      	b.n	8001960 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800194a:	f7fe ff27 	bl	800079c <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	f241 3288 	movw	r2, #5000	; 0x1388
 8001958:	4293      	cmp	r3, r2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e094      	b.n	8001a8a <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001960:	4b12      	ldr	r3, [pc, #72]	; (80019ac <HAL_RCC_ClockConfig+0x224>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 020c 	and.w	r2, r3, #12
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	429a      	cmp	r2, r3
 8001970:	d1eb      	bne.n	800194a <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001972:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <HAL_RCC_ClockConfig+0x220>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	429a      	cmp	r2, r3
 800197e:	d217      	bcs.n	80019b0 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001980:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <HAL_RCC_ClockConfig+0x220>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f023 0207 	bic.w	r2, r3, #7
 8001988:	4907      	ldr	r1, [pc, #28]	; (80019a8 <HAL_RCC_ClockConfig+0x220>)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	4313      	orrs	r3, r2
 800198e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001990:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <HAL_RCC_ClockConfig+0x220>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d008      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e073      	b.n	8001a8a <HAL_RCC_ClockConfig+0x302>
 80019a2:	bf00      	nop
 80019a4:	08003aac 	.word	0x08003aac
 80019a8:	40022000 	.word	0x40022000
 80019ac:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d025      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d018      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x26e>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019cc:	d013      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x26e>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80019d6:	d00e      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x26e>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80019e0:	d009      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x26e>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80019ea:	d004      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x26e>
 80019ec:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 80019f0:	4828      	ldr	r0, [pc, #160]	; (8001a94 <HAL_RCC_ClockConfig+0x30c>)
 80019f2:	f7fe fcc8 	bl	8000386 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019f6:	4b28      	ldr	r3, [pc, #160]	; (8001a98 <HAL_RCC_ClockConfig+0x310>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	4925      	ldr	r1, [pc, #148]	; (8001a98 <HAL_RCC_ClockConfig+0x310>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d026      	beq.n	8001a62 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d018      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x2c6>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a24:	d013      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x2c6>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001a2e:	d00e      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x2c6>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001a38:	d009      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x2c6>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001a42:	d004      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x2c6>
 8001a44:	f240 31ab 	movw	r1, #939	; 0x3ab
 8001a48:	4812      	ldr	r0, [pc, #72]	; (8001a94 <HAL_RCC_ClockConfig+0x30c>)
 8001a4a:	f7fe fc9c 	bl	8000386 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a4e:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <HAL_RCC_ClockConfig+0x310>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	490e      	ldr	r1, [pc, #56]	; (8001a98 <HAL_RCC_ClockConfig+0x310>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a62:	f000 f821 	bl	8001aa8 <HAL_RCC_GetSysClockFreq>
 8001a66:	4602      	mov	r2, r0
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <HAL_RCC_ClockConfig+0x310>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	091b      	lsrs	r3, r3, #4
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	490a      	ldr	r1, [pc, #40]	; (8001a9c <HAL_RCC_ClockConfig+0x314>)
 8001a74:	5ccb      	ldrb	r3, [r1, r3]
 8001a76:	fa22 f303 	lsr.w	r3, r2, r3
 8001a7a:	4a09      	ldr	r2, [pc, #36]	; (8001aa0 <HAL_RCC_ClockConfig+0x318>)
 8001a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a7e:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <HAL_RCC_ClockConfig+0x31c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fe48 	bl	8000718 <HAL_InitTick>

  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	08003aac 	.word	0x08003aac
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	08003ba4 	.word	0x08003ba4
 8001aa0:	20000000 	.word	0x20000000
 8001aa4:	20000004 	.word	0x20000004

08001aa8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aa8:	b490      	push	{r4, r7}
 8001aaa:	b08a      	sub	sp, #40	; 0x28
 8001aac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001aae:	4b2a      	ldr	r3, [pc, #168]	; (8001b58 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ab0:	1d3c      	adds	r4, r7, #4
 8001ab2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ab4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ab8:	f240 2301 	movw	r3, #513	; 0x201
 8001abc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61bb      	str	r3, [r7, #24]
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ad2:	4b22      	ldr	r3, [pc, #136]	; (8001b5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f003 030c 	and.w	r3, r3, #12
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	d002      	beq.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x40>
 8001ae2:	2b08      	cmp	r3, #8
 8001ae4:	d003      	beq.n	8001aee <HAL_RCC_GetSysClockFreq+0x46>
 8001ae6:	e02d      	b.n	8001b44 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ae8:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aea:	623b      	str	r3, [r7, #32]
      break;
 8001aec:	e02d      	b.n	8001b4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	0c9b      	lsrs	r3, r3, #18
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001afa:	4413      	add	r3, r2
 8001afc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b00:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d013      	beq.n	8001b34 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b0c:	4b13      	ldr	r3, [pc, #76]	; (8001b5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	0c5b      	lsrs	r3, r3, #17
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b1a:	4413      	add	r3, r2
 8001b1c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b20:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	4a0e      	ldr	r2, [pc, #56]	; (8001b60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b26:	fb02 f203 	mul.w	r2, r2, r3
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
 8001b32:	e004      	b.n	8001b3e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	4a0b      	ldr	r2, [pc, #44]	; (8001b64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b38:	fb02 f303 	mul.w	r3, r2, r3
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	623b      	str	r3, [r7, #32]
      break;
 8001b42:	e002      	b.n	8001b4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b46:	623b      	str	r3, [r7, #32]
      break;
 8001b48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3728      	adds	r7, #40	; 0x28
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc90      	pop	{r4, r7}
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	08003ae4 	.word	0x08003ae4
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	007a1200 	.word	0x007a1200
 8001b64:	003d0900 	.word	0x003d0900

08001b68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b6c:	4b02      	ldr	r3, [pc, #8]	; (8001b78 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr
 8001b78:	20000000 	.word	0x20000000

08001b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b80:	f7ff fff2 	bl	8001b68 <HAL_RCC_GetHCLKFreq>
 8001b84:	4602      	mov	r2, r0
 8001b86:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	0a1b      	lsrs	r3, r3, #8
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	4903      	ldr	r1, [pc, #12]	; (8001ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b92:	5ccb      	ldrb	r3, [r1, r3]
 8001b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	08003bb4 	.word	0x08003bb4

08001ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ba8:	f7ff ffde 	bl	8001b68 <HAL_RCC_GetHCLKFreq>
 8001bac:	4602      	mov	r2, r0
 8001bae:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	0adb      	lsrs	r3, r3, #11
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	4903      	ldr	r1, [pc, #12]	; (8001bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bba:	5ccb      	ldrb	r3, [r1, r3]
 8001bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	08003bb4 	.word	0x08003bb4

08001bcc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bd4:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <RCC_Delay+0x34>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a0a      	ldr	r2, [pc, #40]	; (8001c04 <RCC_Delay+0x38>)
 8001bda:	fba2 2303 	umull	r2, r3, r2, r3
 8001bde:	0a5b      	lsrs	r3, r3, #9
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	fb02 f303 	mul.w	r3, r2, r3
 8001be6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001be8:	bf00      	nop
  }
  while (Delay --);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	1e5a      	subs	r2, r3, #1
 8001bee:	60fa      	str	r2, [r7, #12]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1f9      	bne.n	8001be8 <RCC_Delay+0x1c>
}
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr
 8001c00:	20000000 	.word	0x20000000
 8001c04:	10624dd3 	.word	0x10624dd3

08001c08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e093      	b.n	8001d42 <HAL_TIM_Base_Init+0x13a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a4b      	ldr	r2, [pc, #300]	; (8001d4c <HAL_TIM_Base_Init+0x144>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d013      	beq.n	8001c4c <HAL_TIM_Base_Init+0x44>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c2c:	d00e      	beq.n	8001c4c <HAL_TIM_Base_Init+0x44>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a47      	ldr	r2, [pc, #284]	; (8001d50 <HAL_TIM_Base_Init+0x148>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d009      	beq.n	8001c4c <HAL_TIM_Base_Init+0x44>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a45      	ldr	r2, [pc, #276]	; (8001d54 <HAL_TIM_Base_Init+0x14c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d004      	beq.n	8001c4c <HAL_TIM_Base_Init+0x44>
 8001c42:	f240 1113 	movw	r1, #275	; 0x113
 8001c46:	4844      	ldr	r0, [pc, #272]	; (8001d58 <HAL_TIM_Base_Init+0x150>)
 8001c48:	f7fe fb9d 	bl	8000386 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d014      	beq.n	8001c7e <HAL_TIM_Base_Init+0x76>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	2b10      	cmp	r3, #16
 8001c5a:	d010      	beq.n	8001c7e <HAL_TIM_Base_Init+0x76>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b20      	cmp	r3, #32
 8001c62:	d00c      	beq.n	8001c7e <HAL_TIM_Base_Init+0x76>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	2b40      	cmp	r3, #64	; 0x40
 8001c6a:	d008      	beq.n	8001c7e <HAL_TIM_Base_Init+0x76>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	2b60      	cmp	r3, #96	; 0x60
 8001c72:	d004      	beq.n	8001c7e <HAL_TIM_Base_Init+0x76>
 8001c74:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001c78:	4837      	ldr	r0, [pc, #220]	; (8001d58 <HAL_TIM_Base_Init+0x150>)
 8001c7a:	f7fe fb84 	bl	8000386 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00e      	beq.n	8001ca4 <HAL_TIM_Base_Init+0x9c>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c8e:	d009      	beq.n	8001ca4 <HAL_TIM_Base_Init+0x9c>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c98:	d004      	beq.n	8001ca4 <HAL_TIM_Base_Init+0x9c>
 8001c9a:	f240 1115 	movw	r1, #277	; 0x115
 8001c9e:	482e      	ldr	r0, [pc, #184]	; (8001d58 <HAL_TIM_Base_Init+0x150>)
 8001ca0:	f7fe fb71 	bl	8000386 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d008      	beq.n	8001cbe <HAL_TIM_Base_Init+0xb6>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	2b80      	cmp	r3, #128	; 0x80
 8001cb2:	d004      	beq.n	8001cbe <HAL_TIM_Base_Init+0xb6>
 8001cb4:	f44f 718b 	mov.w	r1, #278	; 0x116
 8001cb8:	4827      	ldr	r0, [pc, #156]	; (8001d58 <HAL_TIM_Base_Init+0x150>)
 8001cba:	f7fe fb64 	bl	8000386 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d106      	bne.n	8001cd8 <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7fe fb94 	bl	8000400 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2202      	movs	r2, #2
 8001cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3304      	adds	r3, #4
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4610      	mov	r0, r2
 8001cec:	f000 fc72 	bl	80025d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40012c00 	.word	0x40012c00
 8001d50:	40000400 	.word	0x40000400
 8001d54:	40000800 	.word	0x40000800
 8001d58:	08003af4 	.word	0x08003af4

08001d5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a2e      	ldr	r2, [pc, #184]	; (8001e24 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d013      	beq.n	8001d96 <HAL_TIM_Base_Start_IT+0x3a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d76:	d00e      	beq.n	8001d96 <HAL_TIM_Base_Start_IT+0x3a>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a2a      	ldr	r2, [pc, #168]	; (8001e28 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d009      	beq.n	8001d96 <HAL_TIM_Base_Start_IT+0x3a>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a29      	ldr	r2, [pc, #164]	; (8001e2c <HAL_TIM_Base_Start_IT+0xd0>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d004      	beq.n	8001d96 <HAL_TIM_Base_Start_IT+0x3a>
 8001d8c:	f240 11cf 	movw	r1, #463	; 0x1cf
 8001d90:	4827      	ldr	r0, [pc, #156]	; (8001e30 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d92:	f7fe faf8 	bl	8000386 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d001      	beq.n	8001da6 <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e03a      	b.n	8001e1c <HAL_TIM_Base_Start_IT+0xc0>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2202      	movs	r2, #2
 8001daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f042 0201 	orr.w	r2, r2, #1
 8001dbc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a18      	ldr	r2, [pc, #96]	; (8001e24 <HAL_TIM_Base_Start_IT+0xc8>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d00e      	beq.n	8001de6 <HAL_TIM_Base_Start_IT+0x8a>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dd0:	d009      	beq.n	8001de6 <HAL_TIM_Base_Start_IT+0x8a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a14      	ldr	r2, [pc, #80]	; (8001e28 <HAL_TIM_Base_Start_IT+0xcc>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d004      	beq.n	8001de6 <HAL_TIM_Base_Start_IT+0x8a>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a12      	ldr	r2, [pc, #72]	; (8001e2c <HAL_TIM_Base_Start_IT+0xd0>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d111      	bne.n	8001e0a <HAL_TIM_Base_Start_IT+0xae>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2b06      	cmp	r3, #6
 8001df6:	d010      	beq.n	8001e1a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0201 	orr.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e08:	e007      	b.n	8001e1a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f042 0201 	orr.w	r2, r2, #1
 8001e18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40012c00 	.word	0x40012c00
 8001e28:	40000400 	.word	0x40000400
 8001e2c:	40000800 	.word	0x40000800
 8001e30:	08003af4 	.word	0x08003af4

08001e34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d122      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d11b      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f06f 0202 	mvn.w	r2, #2
 8001e60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 fb91 	bl	800259e <HAL_TIM_IC_CaptureCallback>
 8001e7c:	e005      	b.n	8001e8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 fb84 	bl	800258c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 fb93 	bl	80025b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f003 0304 	and.w	r3, r3, #4
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d122      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	d11b      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f06f 0204 	mvn.w	r2, #4
 8001eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2202      	movs	r2, #2
 8001eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 fb67 	bl	800259e <HAL_TIM_IC_CaptureCallback>
 8001ed0:	e005      	b.n	8001ede <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 fb5a 	bl	800258c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 fb69 	bl	80025b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	2b08      	cmp	r3, #8
 8001ef0:	d122      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d11b      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f06f 0208 	mvn.w	r2, #8
 8001f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2204      	movs	r2, #4
 8001f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 fb3d 	bl	800259e <HAL_TIM_IC_CaptureCallback>
 8001f24:	e005      	b.n	8001f32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 fb30 	bl	800258c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 fb3f 	bl	80025b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	f003 0310 	and.w	r3, r3, #16
 8001f42:	2b10      	cmp	r3, #16
 8001f44:	d122      	bne.n	8001f8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	f003 0310 	and.w	r3, r3, #16
 8001f50:	2b10      	cmp	r3, #16
 8001f52:	d11b      	bne.n	8001f8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f06f 0210 	mvn.w	r2, #16
 8001f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2208      	movs	r2, #8
 8001f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 fb13 	bl	800259e <HAL_TIM_IC_CaptureCallback>
 8001f78:	e005      	b.n	8001f86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 fb06 	bl	800258c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 fb15 	bl	80025b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d10e      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d107      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f06f 0201 	mvn.w	r2, #1
 8001fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7fe fb2a 	bl	800060c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc2:	2b80      	cmp	r3, #128	; 0x80
 8001fc4:	d10e      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd0:	2b80      	cmp	r3, #128	; 0x80
 8001fd2:	d107      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 fca3 	bl	800292a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fee:	2b40      	cmp	r3, #64	; 0x40
 8001ff0:	d10e      	bne.n	8002010 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffc:	2b40      	cmp	r3, #64	; 0x40
 8001ffe:	d107      	bne.n	8002010 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 fad9 	bl	80025c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f003 0320 	and.w	r3, r3, #32
 800201a:	2b20      	cmp	r3, #32
 800201c:	d10e      	bne.n	800203c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f003 0320 	and.w	r3, r3, #32
 8002028:	2b20      	cmp	r3, #32
 800202a:	d107      	bne.n	800203c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0220 	mvn.w	r2, #32
 8002034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 fc6e 	bl	8002918 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800203c:	bf00      	nop
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <HAL_TIM_ConfigClockSource+0x18>
 8002058:	2302      	movs	r3, #2
 800205a:	e28b      	b.n	8002574 <HAL_TIM_ConfigClockSource+0x530>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2202      	movs	r2, #2
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002074:	d029      	beq.n	80020ca <HAL_TIM_ConfigClockSource+0x86>
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800207e:	d024      	beq.n	80020ca <HAL_TIM_ConfigClockSource+0x86>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d020      	beq.n	80020ca <HAL_TIM_ConfigClockSource+0x86>
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b10      	cmp	r3, #16
 800208e:	d01c      	beq.n	80020ca <HAL_TIM_ConfigClockSource+0x86>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b20      	cmp	r3, #32
 8002096:	d018      	beq.n	80020ca <HAL_TIM_ConfigClockSource+0x86>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2b30      	cmp	r3, #48	; 0x30
 800209e:	d014      	beq.n	80020ca <HAL_TIM_ConfigClockSource+0x86>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b40      	cmp	r3, #64	; 0x40
 80020a6:	d010      	beq.n	80020ca <HAL_TIM_ConfigClockSource+0x86>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b50      	cmp	r3, #80	; 0x50
 80020ae:	d00c      	beq.n	80020ca <HAL_TIM_ConfigClockSource+0x86>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b60      	cmp	r3, #96	; 0x60
 80020b6:	d008      	beq.n	80020ca <HAL_TIM_ConfigClockSource+0x86>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b70      	cmp	r3, #112	; 0x70
 80020be:	d004      	beq.n	80020ca <HAL_TIM_ConfigClockSource+0x86>
 80020c0:	f241 411d 	movw	r1, #5149	; 0x141d
 80020c4:	489e      	ldr	r0, [pc, #632]	; (8002340 <HAL_TIM_ConfigClockSource+0x2fc>)
 80020c6:	f7fe f95e 	bl	8000386 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80020d8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020e0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020f2:	f000 80be 	beq.w	8002272 <HAL_TIM_ConfigClockSource+0x22e>
 80020f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020fa:	f200 822f 	bhi.w	800255c <HAL_TIM_ConfigClockSource+0x518>
 80020fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002102:	d02d      	beq.n	8002160 <HAL_TIM_ConfigClockSource+0x11c>
 8002104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002108:	f200 8228 	bhi.w	800255c <HAL_TIM_ConfigClockSource+0x518>
 800210c:	2b70      	cmp	r3, #112	; 0x70
 800210e:	d045      	beq.n	800219c <HAL_TIM_ConfigClockSource+0x158>
 8002110:	2b70      	cmp	r3, #112	; 0x70
 8002112:	f200 8223 	bhi.w	800255c <HAL_TIM_ConfigClockSource+0x518>
 8002116:	2b60      	cmp	r3, #96	; 0x60
 8002118:	f000 8166 	beq.w	80023e8 <HAL_TIM_ConfigClockSource+0x3a4>
 800211c:	2b60      	cmp	r3, #96	; 0x60
 800211e:	f200 821d 	bhi.w	800255c <HAL_TIM_ConfigClockSource+0x518>
 8002122:	2b50      	cmp	r3, #80	; 0x50
 8002124:	f000 8114 	beq.w	8002350 <HAL_TIM_ConfigClockSource+0x30c>
 8002128:	2b50      	cmp	r3, #80	; 0x50
 800212a:	f200 8217 	bhi.w	800255c <HAL_TIM_ConfigClockSource+0x518>
 800212e:	2b40      	cmp	r3, #64	; 0x40
 8002130:	f000 81a6 	beq.w	8002480 <HAL_TIM_ConfigClockSource+0x43c>
 8002134:	2b40      	cmp	r3, #64	; 0x40
 8002136:	f200 8211 	bhi.w	800255c <HAL_TIM_ConfigClockSource+0x518>
 800213a:	2b30      	cmp	r3, #48	; 0x30
 800213c:	f000 81ec 	beq.w	8002518 <HAL_TIM_ConfigClockSource+0x4d4>
 8002140:	2b30      	cmp	r3, #48	; 0x30
 8002142:	f200 820b 	bhi.w	800255c <HAL_TIM_ConfigClockSource+0x518>
 8002146:	2b20      	cmp	r3, #32
 8002148:	f000 81e6 	beq.w	8002518 <HAL_TIM_ConfigClockSource+0x4d4>
 800214c:	2b20      	cmp	r3, #32
 800214e:	f200 8205 	bhi.w	800255c <HAL_TIM_ConfigClockSource+0x518>
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 81e0 	beq.w	8002518 <HAL_TIM_ConfigClockSource+0x4d4>
 8002158:	2b10      	cmp	r3, #16
 800215a:	f000 81dd 	beq.w	8002518 <HAL_TIM_ConfigClockSource+0x4d4>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800215e:	e1fd      	b.n	800255c <HAL_TIM_ConfigClockSource+0x518>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a77      	ldr	r2, [pc, #476]	; (8002344 <HAL_TIM_ConfigClockSource+0x300>)
 8002166:	4293      	cmp	r3, r2
 8002168:	f000 81fa 	beq.w	8002560 <HAL_TIM_ConfigClockSource+0x51c>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002174:	f000 81f4 	beq.w	8002560 <HAL_TIM_ConfigClockSource+0x51c>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a72      	ldr	r2, [pc, #456]	; (8002348 <HAL_TIM_ConfigClockSource+0x304>)
 800217e:	4293      	cmp	r3, r2
 8002180:	f000 81ee 	beq.w	8002560 <HAL_TIM_ConfigClockSource+0x51c>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a70      	ldr	r2, [pc, #448]	; (800234c <HAL_TIM_ConfigClockSource+0x308>)
 800218a:	4293      	cmp	r3, r2
 800218c:	f000 81e8 	beq.w	8002560 <HAL_TIM_ConfigClockSource+0x51c>
 8002190:	f241 4129 	movw	r1, #5161	; 0x1429
 8002194:	486a      	ldr	r0, [pc, #424]	; (8002340 <HAL_TIM_ConfigClockSource+0x2fc>)
 8002196:	f7fe f8f6 	bl	8000386 <assert_failed>
      break;
 800219a:	e1e1      	b.n	8002560 <HAL_TIM_ConfigClockSource+0x51c>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a68      	ldr	r2, [pc, #416]	; (8002344 <HAL_TIM_ConfigClockSource+0x300>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d013      	beq.n	80021ce <HAL_TIM_ConfigClockSource+0x18a>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ae:	d00e      	beq.n	80021ce <HAL_TIM_ConfigClockSource+0x18a>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a64      	ldr	r2, [pc, #400]	; (8002348 <HAL_TIM_ConfigClockSource+0x304>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d009      	beq.n	80021ce <HAL_TIM_ConfigClockSource+0x18a>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a63      	ldr	r2, [pc, #396]	; (800234c <HAL_TIM_ConfigClockSource+0x308>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d004      	beq.n	80021ce <HAL_TIM_ConfigClockSource+0x18a>
 80021c4:	f241 4130 	movw	r1, #5168	; 0x1430
 80021c8:	485d      	ldr	r0, [pc, #372]	; (8002340 <HAL_TIM_ConfigClockSource+0x2fc>)
 80021ca:	f7fe f8dc 	bl	8000386 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d013      	beq.n	80021fe <HAL_TIM_ConfigClockSource+0x1ba>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021de:	d00e      	beq.n	80021fe <HAL_TIM_ConfigClockSource+0x1ba>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021e8:	d009      	beq.n	80021fe <HAL_TIM_ConfigClockSource+0x1ba>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80021f2:	d004      	beq.n	80021fe <HAL_TIM_ConfigClockSource+0x1ba>
 80021f4:	f241 4133 	movw	r1, #5171	; 0x1433
 80021f8:	4851      	ldr	r0, [pc, #324]	; (8002340 <HAL_TIM_ConfigClockSource+0x2fc>)
 80021fa:	f7fe f8c4 	bl	8000386 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002206:	d014      	beq.n	8002232 <HAL_TIM_ConfigClockSource+0x1ee>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d010      	beq.n	8002232 <HAL_TIM_ConfigClockSource+0x1ee>
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00c      	beq.n	8002232 <HAL_TIM_ConfigClockSource+0x1ee>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b02      	cmp	r3, #2
 800221e:	d008      	beq.n	8002232 <HAL_TIM_ConfigClockSource+0x1ee>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b0a      	cmp	r3, #10
 8002226:	d004      	beq.n	8002232 <HAL_TIM_ConfigClockSource+0x1ee>
 8002228:	f241 4134 	movw	r1, #5172	; 0x1434
 800222c:	4844      	ldr	r0, [pc, #272]	; (8002340 <HAL_TIM_ConfigClockSource+0x2fc>)
 800222e:	f7fe f8aa 	bl	8000386 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	2b0f      	cmp	r3, #15
 8002238:	d904      	bls.n	8002244 <HAL_TIM_ConfigClockSource+0x200>
 800223a:	f241 4135 	movw	r1, #5173	; 0x1435
 800223e:	4840      	ldr	r0, [pc, #256]	; (8002340 <HAL_TIM_ConfigClockSource+0x2fc>)
 8002240:	f7fe f8a1 	bl	8000386 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6818      	ldr	r0, [r3, #0]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	6899      	ldr	r1, [r3, #8]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	f000 fa97 	bl	8002786 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002266:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	609a      	str	r2, [r3, #8]
      break;
 8002270:	e177      	b.n	8002562 <HAL_TIM_ConfigClockSource+0x51e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a33      	ldr	r2, [pc, #204]	; (8002344 <HAL_TIM_ConfigClockSource+0x300>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d013      	beq.n	80022a4 <HAL_TIM_ConfigClockSource+0x260>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002284:	d00e      	beq.n	80022a4 <HAL_TIM_ConfigClockSource+0x260>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a2f      	ldr	r2, [pc, #188]	; (8002348 <HAL_TIM_ConfigClockSource+0x304>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d009      	beq.n	80022a4 <HAL_TIM_ConfigClockSource+0x260>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a2d      	ldr	r2, [pc, #180]	; (800234c <HAL_TIM_ConfigClockSource+0x308>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d004      	beq.n	80022a4 <HAL_TIM_ConfigClockSource+0x260>
 800229a:	f241 4148 	movw	r1, #5192	; 0x1448
 800229e:	4828      	ldr	r0, [pc, #160]	; (8002340 <HAL_TIM_ConfigClockSource+0x2fc>)
 80022a0:	f7fe f871 	bl	8000386 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d013      	beq.n	80022d4 <HAL_TIM_ConfigClockSource+0x290>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022b4:	d00e      	beq.n	80022d4 <HAL_TIM_ConfigClockSource+0x290>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022be:	d009      	beq.n	80022d4 <HAL_TIM_ConfigClockSource+0x290>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80022c8:	d004      	beq.n	80022d4 <HAL_TIM_ConfigClockSource+0x290>
 80022ca:	f241 414b 	movw	r1, #5195	; 0x144b
 80022ce:	481c      	ldr	r0, [pc, #112]	; (8002340 <HAL_TIM_ConfigClockSource+0x2fc>)
 80022d0:	f7fe f859 	bl	8000386 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022dc:	d014      	beq.n	8002308 <HAL_TIM_ConfigClockSource+0x2c4>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d010      	beq.n	8002308 <HAL_TIM_ConfigClockSource+0x2c4>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00c      	beq.n	8002308 <HAL_TIM_ConfigClockSource+0x2c4>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d008      	beq.n	8002308 <HAL_TIM_ConfigClockSource+0x2c4>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b0a      	cmp	r3, #10
 80022fc:	d004      	beq.n	8002308 <HAL_TIM_ConfigClockSource+0x2c4>
 80022fe:	f241 414c 	movw	r1, #5196	; 0x144c
 8002302:	480f      	ldr	r0, [pc, #60]	; (8002340 <HAL_TIM_ConfigClockSource+0x2fc>)
 8002304:	f7fe f83f 	bl	8000386 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	2b0f      	cmp	r3, #15
 800230e:	d904      	bls.n	800231a <HAL_TIM_ConfigClockSource+0x2d6>
 8002310:	f241 414d 	movw	r1, #5197	; 0x144d
 8002314:	480a      	ldr	r0, [pc, #40]	; (8002340 <HAL_TIM_ConfigClockSource+0x2fc>)
 8002316:	f7fe f836 	bl	8000386 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6818      	ldr	r0, [r3, #0]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	6899      	ldr	r1, [r3, #8]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	f000 fa2c 	bl	8002786 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800233c:	609a      	str	r2, [r3, #8]
      break;
 800233e:	e110      	b.n	8002562 <HAL_TIM_ConfigClockSource+0x51e>
 8002340:	08003af4 	.word	0x08003af4
 8002344:	40012c00 	.word	0x40012c00
 8002348:	40000400 	.word	0x40000400
 800234c:	40000800 	.word	0x40000800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a89      	ldr	r2, [pc, #548]	; (800257c <HAL_TIM_ConfigClockSource+0x538>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d013      	beq.n	8002382 <HAL_TIM_ConfigClockSource+0x33e>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002362:	d00e      	beq.n	8002382 <HAL_TIM_ConfigClockSource+0x33e>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a85      	ldr	r2, [pc, #532]	; (8002580 <HAL_TIM_ConfigClockSource+0x53c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d009      	beq.n	8002382 <HAL_TIM_ConfigClockSource+0x33e>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a84      	ldr	r2, [pc, #528]	; (8002584 <HAL_TIM_ConfigClockSource+0x540>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d004      	beq.n	8002382 <HAL_TIM_ConfigClockSource+0x33e>
 8002378:	f241 415c 	movw	r1, #5212	; 0x145c
 800237c:	4882      	ldr	r0, [pc, #520]	; (8002588 <HAL_TIM_ConfigClockSource+0x544>)
 800237e:	f7fe f802 	bl	8000386 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800238a:	d014      	beq.n	80023b6 <HAL_TIM_ConfigClockSource+0x372>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d010      	beq.n	80023b6 <HAL_TIM_ConfigClockSource+0x372>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00c      	beq.n	80023b6 <HAL_TIM_ConfigClockSource+0x372>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d008      	beq.n	80023b6 <HAL_TIM_ConfigClockSource+0x372>
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b0a      	cmp	r3, #10
 80023aa:	d004      	beq.n	80023b6 <HAL_TIM_ConfigClockSource+0x372>
 80023ac:	f241 415f 	movw	r1, #5215	; 0x145f
 80023b0:	4875      	ldr	r0, [pc, #468]	; (8002588 <HAL_TIM_ConfigClockSource+0x544>)
 80023b2:	f7fd ffe8 	bl	8000386 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	2b0f      	cmp	r3, #15
 80023bc:	d904      	bls.n	80023c8 <HAL_TIM_ConfigClockSource+0x384>
 80023be:	f44f 51a3 	mov.w	r1, #5216	; 0x1460
 80023c2:	4871      	ldr	r0, [pc, #452]	; (8002588 <HAL_TIM_ConfigClockSource+0x544>)
 80023c4:	f7fd ffdf 	bl	8000386 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6818      	ldr	r0, [r3, #0]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	6859      	ldr	r1, [r3, #4]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	461a      	mov	r2, r3
 80023d6:	f000 f95f 	bl	8002698 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2150      	movs	r1, #80	; 0x50
 80023e0:	4618      	mov	r0, r3
 80023e2:	f000 f9b6 	bl	8002752 <TIM_ITRx_SetConfig>
      break;
 80023e6:	e0bc      	b.n	8002562 <HAL_TIM_ConfigClockSource+0x51e>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a63      	ldr	r2, [pc, #396]	; (800257c <HAL_TIM_ConfigClockSource+0x538>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d013      	beq.n	800241a <HAL_TIM_ConfigClockSource+0x3d6>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023fa:	d00e      	beq.n	800241a <HAL_TIM_ConfigClockSource+0x3d6>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a5f      	ldr	r2, [pc, #380]	; (8002580 <HAL_TIM_ConfigClockSource+0x53c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d009      	beq.n	800241a <HAL_TIM_ConfigClockSource+0x3d6>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a5e      	ldr	r2, [pc, #376]	; (8002584 <HAL_TIM_ConfigClockSource+0x540>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d004      	beq.n	800241a <HAL_TIM_ConfigClockSource+0x3d6>
 8002410:	f241 416c 	movw	r1, #5228	; 0x146c
 8002414:	485c      	ldr	r0, [pc, #368]	; (8002588 <HAL_TIM_ConfigClockSource+0x544>)
 8002416:	f7fd ffb6 	bl	8000386 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002422:	d014      	beq.n	800244e <HAL_TIM_ConfigClockSource+0x40a>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d010      	beq.n	800244e <HAL_TIM_ConfigClockSource+0x40a>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00c      	beq.n	800244e <HAL_TIM_ConfigClockSource+0x40a>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b02      	cmp	r3, #2
 800243a:	d008      	beq.n	800244e <HAL_TIM_ConfigClockSource+0x40a>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b0a      	cmp	r3, #10
 8002442:	d004      	beq.n	800244e <HAL_TIM_ConfigClockSource+0x40a>
 8002444:	f241 416f 	movw	r1, #5231	; 0x146f
 8002448:	484f      	ldr	r0, [pc, #316]	; (8002588 <HAL_TIM_ConfigClockSource+0x544>)
 800244a:	f7fd ff9c 	bl	8000386 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	2b0f      	cmp	r3, #15
 8002454:	d904      	bls.n	8002460 <HAL_TIM_ConfigClockSource+0x41c>
 8002456:	f241 4170 	movw	r1, #5232	; 0x1470
 800245a:	484b      	ldr	r0, [pc, #300]	; (8002588 <HAL_TIM_ConfigClockSource+0x544>)
 800245c:	f7fd ff93 	bl	8000386 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6818      	ldr	r0, [r3, #0]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	6859      	ldr	r1, [r3, #4]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	461a      	mov	r2, r3
 800246e:	f000 f941 	bl	80026f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2160      	movs	r1, #96	; 0x60
 8002478:	4618      	mov	r0, r3
 800247a:	f000 f96a 	bl	8002752 <TIM_ITRx_SetConfig>
      break;
 800247e:	e070      	b.n	8002562 <HAL_TIM_ConfigClockSource+0x51e>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a3d      	ldr	r2, [pc, #244]	; (800257c <HAL_TIM_ConfigClockSource+0x538>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d013      	beq.n	80024b2 <HAL_TIM_ConfigClockSource+0x46e>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002492:	d00e      	beq.n	80024b2 <HAL_TIM_ConfigClockSource+0x46e>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a39      	ldr	r2, [pc, #228]	; (8002580 <HAL_TIM_ConfigClockSource+0x53c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d009      	beq.n	80024b2 <HAL_TIM_ConfigClockSource+0x46e>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a38      	ldr	r2, [pc, #224]	; (8002584 <HAL_TIM_ConfigClockSource+0x540>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d004      	beq.n	80024b2 <HAL_TIM_ConfigClockSource+0x46e>
 80024a8:	f241 417c 	movw	r1, #5244	; 0x147c
 80024ac:	4836      	ldr	r0, [pc, #216]	; (8002588 <HAL_TIM_ConfigClockSource+0x544>)
 80024ae:	f7fd ff6a 	bl	8000386 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ba:	d014      	beq.n	80024e6 <HAL_TIM_ConfigClockSource+0x4a2>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d010      	beq.n	80024e6 <HAL_TIM_ConfigClockSource+0x4a2>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00c      	beq.n	80024e6 <HAL_TIM_ConfigClockSource+0x4a2>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d008      	beq.n	80024e6 <HAL_TIM_ConfigClockSource+0x4a2>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b0a      	cmp	r3, #10
 80024da:	d004      	beq.n	80024e6 <HAL_TIM_ConfigClockSource+0x4a2>
 80024dc:	f241 417f 	movw	r1, #5247	; 0x147f
 80024e0:	4829      	ldr	r0, [pc, #164]	; (8002588 <HAL_TIM_ConfigClockSource+0x544>)
 80024e2:	f7fd ff50 	bl	8000386 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	2b0f      	cmp	r3, #15
 80024ec:	d904      	bls.n	80024f8 <HAL_TIM_ConfigClockSource+0x4b4>
 80024ee:	f44f 51a4 	mov.w	r1, #5248	; 0x1480
 80024f2:	4825      	ldr	r0, [pc, #148]	; (8002588 <HAL_TIM_ConfigClockSource+0x544>)
 80024f4:	f7fd ff47 	bl	8000386 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6818      	ldr	r0, [r3, #0]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	6859      	ldr	r1, [r3, #4]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	461a      	mov	r2, r3
 8002506:	f000 f8c7 	bl	8002698 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2140      	movs	r1, #64	; 0x40
 8002510:	4618      	mov	r0, r3
 8002512:	f000 f91e 	bl	8002752 <TIM_ITRx_SetConfig>
      break;
 8002516:	e024      	b.n	8002562 <HAL_TIM_ConfigClockSource+0x51e>
        assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a17      	ldr	r2, [pc, #92]	; (800257c <HAL_TIM_ConfigClockSource+0x538>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d013      	beq.n	800254a <HAL_TIM_ConfigClockSource+0x506>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800252a:	d00e      	beq.n	800254a <HAL_TIM_ConfigClockSource+0x506>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a13      	ldr	r2, [pc, #76]	; (8002580 <HAL_TIM_ConfigClockSource+0x53c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d009      	beq.n	800254a <HAL_TIM_ConfigClockSource+0x506>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a12      	ldr	r2, [pc, #72]	; (8002584 <HAL_TIM_ConfigClockSource+0x540>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d004      	beq.n	800254a <HAL_TIM_ConfigClockSource+0x506>
 8002540:	f241 418f 	movw	r1, #5263	; 0x148f
 8002544:	4810      	ldr	r0, [pc, #64]	; (8002588 <HAL_TIM_ConfigClockSource+0x544>)
 8002546:	f7fd ff1e 	bl	8000386 <assert_failed>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4619      	mov	r1, r3
 8002554:	4610      	mov	r0, r2
 8002556:	f000 f8fc 	bl	8002752 <TIM_ITRx_SetConfig>
        break;
 800255a:	e002      	b.n	8002562 <HAL_TIM_ConfigClockSource+0x51e>
      break;
 800255c:	bf00      	nop
 800255e:	e000      	b.n	8002562 <HAL_TIM_ConfigClockSource+0x51e>
      break;
 8002560:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40012c00 	.word	0x40012c00
 8002580:	40000400 	.word	0x40000400
 8002584:	40000800 	.word	0x40000800
 8002588:	08003af4 	.word	0x08003af4

0800258c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr

0800259e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr

080025b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr

080025c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr

080025d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a29      	ldr	r2, [pc, #164]	; (800268c <TIM_Base_SetConfig+0xb8>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d00b      	beq.n	8002604 <TIM_Base_SetConfig+0x30>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f2:	d007      	beq.n	8002604 <TIM_Base_SetConfig+0x30>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a26      	ldr	r2, [pc, #152]	; (8002690 <TIM_Base_SetConfig+0xbc>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d003      	beq.n	8002604 <TIM_Base_SetConfig+0x30>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a25      	ldr	r2, [pc, #148]	; (8002694 <TIM_Base_SetConfig+0xc0>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d108      	bne.n	8002616 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800260a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	4313      	orrs	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a1c      	ldr	r2, [pc, #112]	; (800268c <TIM_Base_SetConfig+0xb8>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00b      	beq.n	8002636 <TIM_Base_SetConfig+0x62>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002624:	d007      	beq.n	8002636 <TIM_Base_SetConfig+0x62>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a19      	ldr	r2, [pc, #100]	; (8002690 <TIM_Base_SetConfig+0xbc>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d003      	beq.n	8002636 <TIM_Base_SetConfig+0x62>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a18      	ldr	r2, [pc, #96]	; (8002694 <TIM_Base_SetConfig+0xc0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d108      	bne.n	8002648 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800263c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	4313      	orrs	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a07      	ldr	r2, [pc, #28]	; (800268c <TIM_Base_SetConfig+0xb8>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d103      	bne.n	800267c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	615a      	str	r2, [r3, #20]
}
 8002682:	bf00      	nop
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr
 800268c:	40012c00 	.word	0x40012c00
 8002690:	40000400 	.word	0x40000400
 8002694:	40000800 	.word	0x40000800

08002698 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002698:	b480      	push	{r7}
 800269a:	b087      	sub	sp, #28
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	f023 0201 	bic.w	r2, r3, #1
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f023 030a 	bic.w	r3, r3, #10
 80026d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	4313      	orrs	r3, r2
 80026dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	621a      	str	r2, [r3, #32]
}
 80026ea:	bf00      	nop
 80026ec:	371c      	adds	r7, #28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b087      	sub	sp, #28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	f023 0210 	bic.w	r2, r3, #16
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800271e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	031b      	lsls	r3, r3, #12
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	4313      	orrs	r3, r2
 8002728:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002730:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	621a      	str	r2, [r3, #32]
}
 8002748:	bf00      	nop
 800274a:	371c      	adds	r7, #28
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr

08002752 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002752:	b480      	push	{r7}
 8002754:	b085      	sub	sp, #20
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002768:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4313      	orrs	r3, r2
 8002770:	f043 0307 	orr.w	r3, r3, #7
 8002774:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	609a      	str	r2, [r3, #8]
}
 800277c:	bf00      	nop
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr

08002786 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002786:	b480      	push	{r7}
 8002788:	b087      	sub	sp, #28
 800278a:	af00      	add	r7, sp, #0
 800278c:	60f8      	str	r0, [r7, #12]
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	607a      	str	r2, [r7, #4]
 8002792:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	021a      	lsls	r2, r3, #8
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	431a      	orrs	r2, r3
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	609a      	str	r2, [r3, #8]
}
 80027ba:	bf00      	nop
 80027bc:	371c      	adds	r7, #28
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a4d      	ldr	r2, [pc, #308]	; (8002908 <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d013      	beq.n	8002800 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027e0:	d00e      	beq.n	8002800 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a49      	ldr	r2, [pc, #292]	; (800290c <HAL_TIMEx_MasterConfigSynchronization+0x148>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d009      	beq.n	8002800 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a47      	ldr	r2, [pc, #284]	; (8002910 <HAL_TIMEx_MasterConfigSynchronization+0x14c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d004      	beq.n	8002800 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80027f6:	f240 715f 	movw	r1, #1887	; 0x75f
 80027fa:	4846      	ldr	r0, [pc, #280]	; (8002914 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 80027fc:	f7fd fdc3 	bl	8000386 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d020      	beq.n	800284a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b10      	cmp	r3, #16
 800280e:	d01c      	beq.n	800284a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b20      	cmp	r3, #32
 8002816:	d018      	beq.n	800284a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b30      	cmp	r3, #48	; 0x30
 800281e:	d014      	beq.n	800284a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b40      	cmp	r3, #64	; 0x40
 8002826:	d010      	beq.n	800284a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b50      	cmp	r3, #80	; 0x50
 800282e:	d00c      	beq.n	800284a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b60      	cmp	r3, #96	; 0x60
 8002836:	d008      	beq.n	800284a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b70      	cmp	r3, #112	; 0x70
 800283e:	d004      	beq.n	800284a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002840:	f44f 61ec 	mov.w	r1, #1888	; 0x760
 8002844:	4833      	ldr	r0, [pc, #204]	; (8002914 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 8002846:	f7fd fd9e 	bl	8000386 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b80      	cmp	r3, #128	; 0x80
 8002850:	d008      	beq.n	8002864 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d004      	beq.n	8002864 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 800285a:	f240 7161 	movw	r1, #1889	; 0x761
 800285e:	482d      	ldr	r0, [pc, #180]	; (8002914 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 8002860:	f7fd fd91 	bl	8000386 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800286a:	2b01      	cmp	r3, #1
 800286c:	d101      	bne.n	8002872 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800286e:	2302      	movs	r3, #2
 8002870:	e046      	b.n	8002900 <HAL_TIMEx_MasterConfigSynchronization+0x13c>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2202      	movs	r2, #2
 800287e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002898:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a15      	ldr	r2, [pc, #84]	; (8002908 <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d00e      	beq.n	80028d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028be:	d009      	beq.n	80028d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a11      	ldr	r2, [pc, #68]	; (800290c <HAL_TIMEx_MasterConfigSynchronization+0x148>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d004      	beq.n	80028d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a10      	ldr	r2, [pc, #64]	; (8002910 <HAL_TIMEx_MasterConfigSynchronization+0x14c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d10c      	bne.n	80028ee <HAL_TIMEx_MasterConfigSynchronization+0x12a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40012c00 	.word	0x40012c00
 800290c:	40000400 	.word	0x40000400
 8002910:	40000800 	.word	0x40000800
 8002914:	08003b2c 	.word	0x08003b2c

08002918 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr

0800292a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr

0800293c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e092      	b.n	8002a74 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d02c      	beq.n	80029b0 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a48      	ldr	r2, [pc, #288]	; (8002a7c <HAL_UART_Init+0x140>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d00e      	beq.n	800297e <HAL_UART_Init+0x42>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a46      	ldr	r2, [pc, #280]	; (8002a80 <HAL_UART_Init+0x144>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d009      	beq.n	800297e <HAL_UART_Init+0x42>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a45      	ldr	r2, [pc, #276]	; (8002a84 <HAL_UART_Init+0x148>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d004      	beq.n	800297e <HAL_UART_Init+0x42>
 8002974:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8002978:	4843      	ldr	r0, [pc, #268]	; (8002a88 <HAL_UART_Init+0x14c>)
 800297a:	f7fd fd04 	bl	8000386 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d028      	beq.n	80029d8 <HAL_UART_Init+0x9c>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800298e:	d023      	beq.n	80029d8 <HAL_UART_Init+0x9c>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002998:	d01e      	beq.n	80029d8 <HAL_UART_Init+0x9c>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029a2:	d019      	beq.n	80029d8 <HAL_UART_Init+0x9c>
 80029a4:	f240 1147 	movw	r1, #327	; 0x147
 80029a8:	4837      	ldr	r0, [pc, #220]	; (8002a88 <HAL_UART_Init+0x14c>)
 80029aa:	f7fd fcec 	bl	8000386 <assert_failed>
 80029ae:	e013      	b.n	80029d8 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a31      	ldr	r2, [pc, #196]	; (8002a7c <HAL_UART_Init+0x140>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d00e      	beq.n	80029d8 <HAL_UART_Init+0x9c>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a30      	ldr	r2, [pc, #192]	; (8002a80 <HAL_UART_Init+0x144>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d009      	beq.n	80029d8 <HAL_UART_Init+0x9c>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a2e      	ldr	r2, [pc, #184]	; (8002a84 <HAL_UART_Init+0x148>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d004      	beq.n	80029d8 <HAL_UART_Init+0x9c>
 80029ce:	f240 114b 	movw	r1, #331	; 0x14b
 80029d2:	482d      	ldr	r0, [pc, #180]	; (8002a88 <HAL_UART_Init+0x14c>)
 80029d4:	f7fd fcd7 	bl	8000386 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d009      	beq.n	80029f4 <HAL_UART_Init+0xb8>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029e8:	d004      	beq.n	80029f4 <HAL_UART_Init+0xb8>
 80029ea:	f240 114d 	movw	r1, #333	; 0x14d
 80029ee:	4826      	ldr	r0, [pc, #152]	; (8002a88 <HAL_UART_Init+0x14c>)
 80029f0:	f7fd fcc9 	bl	8000386 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d106      	bne.n	8002a0e <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7fd fd1f 	bl	800044c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2224      	movs	r2, #36	; 0x24
 8002a12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68da      	ldr	r2, [r3, #12]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a24:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 faa8 	bl	8002f7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691a      	ldr	r2, [r3, #16]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a3a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	695a      	ldr	r2, [r3, #20]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a4a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a5a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2220      	movs	r2, #32
 8002a66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40013800 	.word	0x40013800
 8002a80:	40004400 	.word	0x40004400
 8002a84:	40004800 	.word	0x40004800
 8002a88:	08003b68 	.word	0x08003b68

08002a8c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	4613      	mov	r3, r2
 8002a98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b20      	cmp	r3, #32
 8002aa4:	d130      	bne.n	8002b08 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d002      	beq.n	8002ab2 <HAL_UART_Transmit_IT+0x26>
 8002aac:	88fb      	ldrh	r3, [r7, #6]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e029      	b.n	8002b0a <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d101      	bne.n	8002ac4 <HAL_UART_Transmit_IT+0x38>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	e022      	b.n	8002b0a <HAL_UART_Transmit_IT+0x7e>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	88fa      	ldrh	r2, [r7, #6]
 8002ad6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	88fa      	ldrh	r2, [r7, #6]
 8002adc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2221      	movs	r2, #33	; 0x21
 8002ae8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b02:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002b04:	2300      	movs	r3, #0
 8002b06:	e000      	b.n	8002b0a <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002b08:	2302      	movs	r3, #2
  }
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr

08002b14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10d      	bne.n	8002b66 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	f003 0320 	and.w	r3, r3, #32
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d008      	beq.n	8002b66 <HAL_UART_IRQHandler+0x52>
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	f003 0320 	and.w	r3, r3, #32
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f98b 	bl	8002e7a <UART_Receive_IT>
      return;
 8002b64:	e0d0      	b.n	8002d08 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 80b0 	beq.w	8002cce <HAL_UART_IRQHandler+0x1ba>
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d105      	bne.n	8002b84 <HAL_UART_IRQHandler+0x70>
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 80a5 	beq.w	8002cce <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00a      	beq.n	8002ba4 <HAL_UART_IRQHandler+0x90>
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9c:	f043 0201 	orr.w	r2, r3, #1
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00a      	beq.n	8002bc4 <HAL_UART_IRQHandler+0xb0>
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bbc:	f043 0202 	orr.w	r2, r3, #2
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00a      	beq.n	8002be4 <HAL_UART_IRQHandler+0xd0>
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bdc:	f043 0204 	orr.w	r2, r3, #4
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00f      	beq.n	8002c0e <HAL_UART_IRQHandler+0xfa>
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	f003 0320 	and.w	r3, r3, #32
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d104      	bne.n	8002c02 <HAL_UART_IRQHandler+0xee>
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d005      	beq.n	8002c0e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c06:	f043 0208 	orr.w	r2, r3, #8
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d077      	beq.n	8002d06 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	f003 0320 	and.w	r3, r3, #32
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d007      	beq.n	8002c30 <HAL_UART_IRQHandler+0x11c>
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	f003 0320 	and.w	r3, r3, #32
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f925 	bl	8002e7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	bf14      	ite	ne
 8002c3e:	2301      	movne	r3, #1
 8002c40:	2300      	moveq	r3, #0
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d102      	bne.n	8002c58 <HAL_UART_IRQHandler+0x144>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d031      	beq.n	8002cbc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f876 	bl	8002d4a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d023      	beq.n	8002cb4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	695a      	ldr	r2, [r3, #20]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c7a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d013      	beq.n	8002cac <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c88:	4a21      	ldr	r2, [pc, #132]	; (8002d10 <HAL_UART_IRQHandler+0x1fc>)
 8002c8a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fd fec9 	bl	8000a28 <HAL_DMA_Abort_IT>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d016      	beq.n	8002cca <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002caa:	e00e      	b.n	8002cca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f843 	bl	8002d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb2:	e00a      	b.n	8002cca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f83f 	bl	8002d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cba:	e006      	b.n	8002cca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 f83b 	bl	8002d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002cc8:	e01d      	b.n	8002d06 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cca:	bf00      	nop
    return;
 8002ccc:	e01b      	b.n	8002d06 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <HAL_UART_IRQHandler+0x1d6>
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f862 	bl	8002dac <UART_Transmit_IT>
    return;
 8002ce8:	e00e      	b.n	8002d08 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d009      	beq.n	8002d08 <HAL_UART_IRQHandler+0x1f4>
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d004      	beq.n	8002d08 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f8a3 	bl	8002e4a <UART_EndTransmit_IT>
    return;
 8002d04:	e000      	b.n	8002d08 <HAL_UART_IRQHandler+0x1f4>
    return;
 8002d06:	bf00      	nop
  }
}
 8002d08:	3720      	adds	r7, #32
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	08002d85 	.word	0x08002d85

08002d14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr

08002d26 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr

08002d38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr

08002d4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68da      	ldr	r2, [r3, #12]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d60:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	695a      	ldr	r2, [r3, #20]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0201 	bic.w	r2, r2, #1
 8002d70:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2220      	movs	r2, #32
 8002d76:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr

08002d84 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f7ff ffca 	bl	8002d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002da4:	bf00      	nop
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b21      	cmp	r3, #33	; 0x21
 8002dbe:	d13e      	bne.n	8002e3e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dc8:	d114      	bne.n	8002df4 <UART_Transmit_IT+0x48>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d110      	bne.n	8002df4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	881b      	ldrh	r3, [r3, #0]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002de6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	1c9a      	adds	r2, r3, #2
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	621a      	str	r2, [r3, #32]
 8002df2:	e008      	b.n	8002e06 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	1c59      	adds	r1, r3, #1
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6211      	str	r1, [r2, #32]
 8002dfe:	781a      	ldrb	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	4619      	mov	r1, r3
 8002e14:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10f      	bne.n	8002e3a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e28:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e38:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	e000      	b.n	8002e40 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e3e:	2302      	movs	r3, #2
  }
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr

08002e4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b082      	sub	sp, #8
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68da      	ldr	r2, [r3, #12]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2220      	movs	r2, #32
 8002e66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff ff52 	bl	8002d14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b084      	sub	sp, #16
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b22      	cmp	r3, #34	; 0x22
 8002e8c:	d170      	bne.n	8002f70 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e96:	d117      	bne.n	8002ec8 <UART_Receive_IT+0x4e>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d113      	bne.n	8002ec8 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea8:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec0:	1c9a      	adds	r2, r3, #2
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	629a      	str	r2, [r3, #40]	; 0x28
 8002ec6:	e026      	b.n	8002f16 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ecc:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eda:	d007      	beq.n	8002eec <UART_Receive_IT+0x72>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10a      	bne.n	8002efa <UART_Receive_IT+0x80>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d106      	bne.n	8002efa <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	701a      	strb	r2, [r3, #0]
 8002ef8:	e008      	b.n	8002f0c <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f10:	1c5a      	adds	r2, r3, #1
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	4619      	mov	r1, r3
 8002f24:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d120      	bne.n	8002f6c <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0220 	bic.w	r2, r2, #32
 8002f38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68da      	ldr	r2, [r3, #12]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695a      	ldr	r2, [r3, #20]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0201 	bic.w	r2, r2, #1
 8002f58:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7ff fedf 	bl	8002d26 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	e002      	b.n	8002f72 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	e000      	b.n	8002f72 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002f70:	2302      	movs	r3, #2
  }
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	4a5f      	ldr	r2, [pc, #380]	; (8003108 <UART_SetConfig+0x18c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d904      	bls.n	8002f98 <UART_SetConfig+0x1c>
 8002f8e:	f640 31f6 	movw	r1, #3062	; 0xbf6
 8002f92:	485e      	ldr	r0, [pc, #376]	; (800310c <UART_SetConfig+0x190>)
 8002f94:	f7fd f9f7 	bl	8000386 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d009      	beq.n	8002fb4 <UART_SetConfig+0x38>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fa8:	d004      	beq.n	8002fb4 <UART_SetConfig+0x38>
 8002faa:	f640 31f7 	movw	r1, #3063	; 0xbf7
 8002fae:	4857      	ldr	r0, [pc, #348]	; (800310c <UART_SetConfig+0x190>)
 8002fb0:	f7fd f9e9 	bl	8000386 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00e      	beq.n	8002fda <UART_SetConfig+0x5e>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc4:	d009      	beq.n	8002fda <UART_SetConfig+0x5e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002fce:	d004      	beq.n	8002fda <UART_SetConfig+0x5e>
 8002fd0:	f640 31f8 	movw	r1, #3064	; 0xbf8
 8002fd4:	484d      	ldr	r0, [pc, #308]	; (800310c <UART_SetConfig+0x190>)
 8002fd6:	f7fd f9d6 	bl	8000386 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	695a      	ldr	r2, [r3, #20]
 8002fde:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d103      	bne.n	8002ff0 <UART_SetConfig+0x74>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d104      	bne.n	8002ffa <UART_SetConfig+0x7e>
 8002ff0:	f640 31f9 	movw	r1, #3065	; 0xbf9
 8002ff4:	4845      	ldr	r0, [pc, #276]	; (800310c <UART_SetConfig+0x190>)
 8002ff6:	f7fd f9c6 	bl	8000386 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68da      	ldr	r2, [r3, #12]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	431a      	orrs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	4313      	orrs	r3, r2
 8003020:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800302c:	f023 030c 	bic.w	r3, r3, #12
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6812      	ldr	r2, [r2, #0]
 8003034:	68b9      	ldr	r1, [r7, #8]
 8003036:	430b      	orrs	r3, r1
 8003038:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699a      	ldr	r2, [r3, #24]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a2e      	ldr	r2, [pc, #184]	; (8003110 <UART_SetConfig+0x194>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d103      	bne.n	8003062 <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800305a:	f7fe fda3 	bl	8001ba4 <HAL_RCC_GetPCLK2Freq>
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	e002      	b.n	8003068 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003062:	f7fe fd8b 	bl	8001b7c <HAL_RCC_GetPCLK1Freq>
 8003066:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	009a      	lsls	r2, r3, #2
 8003072:	441a      	add	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	fbb2 f3f3 	udiv	r3, r2, r3
 800307e:	4a25      	ldr	r2, [pc, #148]	; (8003114 <UART_SetConfig+0x198>)
 8003080:	fba2 2303 	umull	r2, r3, r2, r3
 8003084:	095b      	lsrs	r3, r3, #5
 8003086:	0119      	lsls	r1, r3, #4
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	4613      	mov	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	009a      	lsls	r2, r3, #2
 8003092:	441a      	add	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	fbb2 f2f3 	udiv	r2, r2, r3
 800309e:	4b1d      	ldr	r3, [pc, #116]	; (8003114 <UART_SetConfig+0x198>)
 80030a0:	fba3 0302 	umull	r0, r3, r3, r2
 80030a4:	095b      	lsrs	r3, r3, #5
 80030a6:	2064      	movs	r0, #100	; 0x64
 80030a8:	fb00 f303 	mul.w	r3, r0, r3
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	3332      	adds	r3, #50	; 0x32
 80030b2:	4a18      	ldr	r2, [pc, #96]	; (8003114 <UART_SetConfig+0x198>)
 80030b4:	fba2 2303 	umull	r2, r3, r2, r3
 80030b8:	095b      	lsrs	r3, r3, #5
 80030ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030be:	4419      	add	r1, r3
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	4613      	mov	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	009a      	lsls	r2, r3, #2
 80030ca:	441a      	add	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80030d6:	4b0f      	ldr	r3, [pc, #60]	; (8003114 <UART_SetConfig+0x198>)
 80030d8:	fba3 0302 	umull	r0, r3, r3, r2
 80030dc:	095b      	lsrs	r3, r3, #5
 80030de:	2064      	movs	r0, #100	; 0x64
 80030e0:	fb00 f303 	mul.w	r3, r0, r3
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	3332      	adds	r3, #50	; 0x32
 80030ea:	4a0a      	ldr	r2, [pc, #40]	; (8003114 <UART_SetConfig+0x198>)
 80030ec:	fba2 2303 	umull	r2, r3, r2, r3
 80030f0:	095b      	lsrs	r3, r3, #5
 80030f2:	f003 020f 	and.w	r2, r3, #15
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	440a      	add	r2, r1
 80030fc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80030fe:	bf00      	nop
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	0044aa20 	.word	0x0044aa20
 800310c:	08003b68 	.word	0x08003b68
 8003110:	40013800 	.word	0x40013800
 8003114:	51eb851f 	.word	0x51eb851f

08003118 <__errno>:
 8003118:	4b01      	ldr	r3, [pc, #4]	; (8003120 <__errno+0x8>)
 800311a:	6818      	ldr	r0, [r3, #0]
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	2000000c 	.word	0x2000000c

08003124 <__libc_init_array>:
 8003124:	b570      	push	{r4, r5, r6, lr}
 8003126:	2600      	movs	r6, #0
 8003128:	4d0c      	ldr	r5, [pc, #48]	; (800315c <__libc_init_array+0x38>)
 800312a:	4c0d      	ldr	r4, [pc, #52]	; (8003160 <__libc_init_array+0x3c>)
 800312c:	1b64      	subs	r4, r4, r5
 800312e:	10a4      	asrs	r4, r4, #2
 8003130:	42a6      	cmp	r6, r4
 8003132:	d109      	bne.n	8003148 <__libc_init_array+0x24>
 8003134:	f000 fc5c 	bl	80039f0 <_init>
 8003138:	2600      	movs	r6, #0
 800313a:	4d0a      	ldr	r5, [pc, #40]	; (8003164 <__libc_init_array+0x40>)
 800313c:	4c0a      	ldr	r4, [pc, #40]	; (8003168 <__libc_init_array+0x44>)
 800313e:	1b64      	subs	r4, r4, r5
 8003140:	10a4      	asrs	r4, r4, #2
 8003142:	42a6      	cmp	r6, r4
 8003144:	d105      	bne.n	8003152 <__libc_init_array+0x2e>
 8003146:	bd70      	pop	{r4, r5, r6, pc}
 8003148:	f855 3b04 	ldr.w	r3, [r5], #4
 800314c:	4798      	blx	r3
 800314e:	3601      	adds	r6, #1
 8003150:	e7ee      	b.n	8003130 <__libc_init_array+0xc>
 8003152:	f855 3b04 	ldr.w	r3, [r5], #4
 8003156:	4798      	blx	r3
 8003158:	3601      	adds	r6, #1
 800315a:	e7f2      	b.n	8003142 <__libc_init_array+0x1e>
 800315c:	08003bf0 	.word	0x08003bf0
 8003160:	08003bf0 	.word	0x08003bf0
 8003164:	08003bf0 	.word	0x08003bf0
 8003168:	08003bf4 	.word	0x08003bf4

0800316c <memset>:
 800316c:	4603      	mov	r3, r0
 800316e:	4402      	add	r2, r0
 8003170:	4293      	cmp	r3, r2
 8003172:	d100      	bne.n	8003176 <memset+0xa>
 8003174:	4770      	bx	lr
 8003176:	f803 1b01 	strb.w	r1, [r3], #1
 800317a:	e7f9      	b.n	8003170 <memset+0x4>

0800317c <siprintf>:
 800317c:	b40e      	push	{r1, r2, r3}
 800317e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003182:	b500      	push	{lr}
 8003184:	b09c      	sub	sp, #112	; 0x70
 8003186:	ab1d      	add	r3, sp, #116	; 0x74
 8003188:	9002      	str	r0, [sp, #8]
 800318a:	9006      	str	r0, [sp, #24]
 800318c:	9107      	str	r1, [sp, #28]
 800318e:	9104      	str	r1, [sp, #16]
 8003190:	4808      	ldr	r0, [pc, #32]	; (80031b4 <siprintf+0x38>)
 8003192:	4909      	ldr	r1, [pc, #36]	; (80031b8 <siprintf+0x3c>)
 8003194:	f853 2b04 	ldr.w	r2, [r3], #4
 8003198:	9105      	str	r1, [sp, #20]
 800319a:	6800      	ldr	r0, [r0, #0]
 800319c:	a902      	add	r1, sp, #8
 800319e:	9301      	str	r3, [sp, #4]
 80031a0:	f000 f868 	bl	8003274 <_svfiprintf_r>
 80031a4:	2200      	movs	r2, #0
 80031a6:	9b02      	ldr	r3, [sp, #8]
 80031a8:	701a      	strb	r2, [r3, #0]
 80031aa:	b01c      	add	sp, #112	; 0x70
 80031ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80031b0:	b003      	add	sp, #12
 80031b2:	4770      	bx	lr
 80031b4:	2000000c 	.word	0x2000000c
 80031b8:	ffff0208 	.word	0xffff0208

080031bc <__ssputs_r>:
 80031bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031c0:	688e      	ldr	r6, [r1, #8]
 80031c2:	4682      	mov	sl, r0
 80031c4:	429e      	cmp	r6, r3
 80031c6:	460c      	mov	r4, r1
 80031c8:	4690      	mov	r8, r2
 80031ca:	461f      	mov	r7, r3
 80031cc:	d838      	bhi.n	8003240 <__ssputs_r+0x84>
 80031ce:	898a      	ldrh	r2, [r1, #12]
 80031d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031d4:	d032      	beq.n	800323c <__ssputs_r+0x80>
 80031d6:	6825      	ldr	r5, [r4, #0]
 80031d8:	6909      	ldr	r1, [r1, #16]
 80031da:	3301      	adds	r3, #1
 80031dc:	eba5 0901 	sub.w	r9, r5, r1
 80031e0:	6965      	ldr	r5, [r4, #20]
 80031e2:	444b      	add	r3, r9
 80031e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80031ec:	106d      	asrs	r5, r5, #1
 80031ee:	429d      	cmp	r5, r3
 80031f0:	bf38      	it	cc
 80031f2:	461d      	movcc	r5, r3
 80031f4:	0553      	lsls	r3, r2, #21
 80031f6:	d531      	bpl.n	800325c <__ssputs_r+0xa0>
 80031f8:	4629      	mov	r1, r5
 80031fa:	f000 fb53 	bl	80038a4 <_malloc_r>
 80031fe:	4606      	mov	r6, r0
 8003200:	b950      	cbnz	r0, 8003218 <__ssputs_r+0x5c>
 8003202:	230c      	movs	r3, #12
 8003204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003208:	f8ca 3000 	str.w	r3, [sl]
 800320c:	89a3      	ldrh	r3, [r4, #12]
 800320e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003212:	81a3      	strh	r3, [r4, #12]
 8003214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003218:	464a      	mov	r2, r9
 800321a:	6921      	ldr	r1, [r4, #16]
 800321c:	f000 face 	bl	80037bc <memcpy>
 8003220:	89a3      	ldrh	r3, [r4, #12]
 8003222:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800322a:	81a3      	strh	r3, [r4, #12]
 800322c:	6126      	str	r6, [r4, #16]
 800322e:	444e      	add	r6, r9
 8003230:	6026      	str	r6, [r4, #0]
 8003232:	463e      	mov	r6, r7
 8003234:	6165      	str	r5, [r4, #20]
 8003236:	eba5 0509 	sub.w	r5, r5, r9
 800323a:	60a5      	str	r5, [r4, #8]
 800323c:	42be      	cmp	r6, r7
 800323e:	d900      	bls.n	8003242 <__ssputs_r+0x86>
 8003240:	463e      	mov	r6, r7
 8003242:	4632      	mov	r2, r6
 8003244:	4641      	mov	r1, r8
 8003246:	6820      	ldr	r0, [r4, #0]
 8003248:	f000 fac6 	bl	80037d8 <memmove>
 800324c:	68a3      	ldr	r3, [r4, #8]
 800324e:	6822      	ldr	r2, [r4, #0]
 8003250:	1b9b      	subs	r3, r3, r6
 8003252:	4432      	add	r2, r6
 8003254:	2000      	movs	r0, #0
 8003256:	60a3      	str	r3, [r4, #8]
 8003258:	6022      	str	r2, [r4, #0]
 800325a:	e7db      	b.n	8003214 <__ssputs_r+0x58>
 800325c:	462a      	mov	r2, r5
 800325e:	f000 fb7b 	bl	8003958 <_realloc_r>
 8003262:	4606      	mov	r6, r0
 8003264:	2800      	cmp	r0, #0
 8003266:	d1e1      	bne.n	800322c <__ssputs_r+0x70>
 8003268:	4650      	mov	r0, sl
 800326a:	6921      	ldr	r1, [r4, #16]
 800326c:	f000 face 	bl	800380c <_free_r>
 8003270:	e7c7      	b.n	8003202 <__ssputs_r+0x46>
	...

08003274 <_svfiprintf_r>:
 8003274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003278:	4698      	mov	r8, r3
 800327a:	898b      	ldrh	r3, [r1, #12]
 800327c:	4607      	mov	r7, r0
 800327e:	061b      	lsls	r3, r3, #24
 8003280:	460d      	mov	r5, r1
 8003282:	4614      	mov	r4, r2
 8003284:	b09d      	sub	sp, #116	; 0x74
 8003286:	d50e      	bpl.n	80032a6 <_svfiprintf_r+0x32>
 8003288:	690b      	ldr	r3, [r1, #16]
 800328a:	b963      	cbnz	r3, 80032a6 <_svfiprintf_r+0x32>
 800328c:	2140      	movs	r1, #64	; 0x40
 800328e:	f000 fb09 	bl	80038a4 <_malloc_r>
 8003292:	6028      	str	r0, [r5, #0]
 8003294:	6128      	str	r0, [r5, #16]
 8003296:	b920      	cbnz	r0, 80032a2 <_svfiprintf_r+0x2e>
 8003298:	230c      	movs	r3, #12
 800329a:	603b      	str	r3, [r7, #0]
 800329c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032a0:	e0d1      	b.n	8003446 <_svfiprintf_r+0x1d2>
 80032a2:	2340      	movs	r3, #64	; 0x40
 80032a4:	616b      	str	r3, [r5, #20]
 80032a6:	2300      	movs	r3, #0
 80032a8:	9309      	str	r3, [sp, #36]	; 0x24
 80032aa:	2320      	movs	r3, #32
 80032ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032b0:	2330      	movs	r3, #48	; 0x30
 80032b2:	f04f 0901 	mov.w	r9, #1
 80032b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80032ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003460 <_svfiprintf_r+0x1ec>
 80032be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032c2:	4623      	mov	r3, r4
 80032c4:	469a      	mov	sl, r3
 80032c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032ca:	b10a      	cbz	r2, 80032d0 <_svfiprintf_r+0x5c>
 80032cc:	2a25      	cmp	r2, #37	; 0x25
 80032ce:	d1f9      	bne.n	80032c4 <_svfiprintf_r+0x50>
 80032d0:	ebba 0b04 	subs.w	fp, sl, r4
 80032d4:	d00b      	beq.n	80032ee <_svfiprintf_r+0x7a>
 80032d6:	465b      	mov	r3, fp
 80032d8:	4622      	mov	r2, r4
 80032da:	4629      	mov	r1, r5
 80032dc:	4638      	mov	r0, r7
 80032de:	f7ff ff6d 	bl	80031bc <__ssputs_r>
 80032e2:	3001      	adds	r0, #1
 80032e4:	f000 80aa 	beq.w	800343c <_svfiprintf_r+0x1c8>
 80032e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032ea:	445a      	add	r2, fp
 80032ec:	9209      	str	r2, [sp, #36]	; 0x24
 80032ee:	f89a 3000 	ldrb.w	r3, [sl]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 80a2 	beq.w	800343c <_svfiprintf_r+0x1c8>
 80032f8:	2300      	movs	r3, #0
 80032fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003302:	f10a 0a01 	add.w	sl, sl, #1
 8003306:	9304      	str	r3, [sp, #16]
 8003308:	9307      	str	r3, [sp, #28]
 800330a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800330e:	931a      	str	r3, [sp, #104]	; 0x68
 8003310:	4654      	mov	r4, sl
 8003312:	2205      	movs	r2, #5
 8003314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003318:	4851      	ldr	r0, [pc, #324]	; (8003460 <_svfiprintf_r+0x1ec>)
 800331a:	f000 fa41 	bl	80037a0 <memchr>
 800331e:	9a04      	ldr	r2, [sp, #16]
 8003320:	b9d8      	cbnz	r0, 800335a <_svfiprintf_r+0xe6>
 8003322:	06d0      	lsls	r0, r2, #27
 8003324:	bf44      	itt	mi
 8003326:	2320      	movmi	r3, #32
 8003328:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800332c:	0711      	lsls	r1, r2, #28
 800332e:	bf44      	itt	mi
 8003330:	232b      	movmi	r3, #43	; 0x2b
 8003332:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003336:	f89a 3000 	ldrb.w	r3, [sl]
 800333a:	2b2a      	cmp	r3, #42	; 0x2a
 800333c:	d015      	beq.n	800336a <_svfiprintf_r+0xf6>
 800333e:	4654      	mov	r4, sl
 8003340:	2000      	movs	r0, #0
 8003342:	f04f 0c0a 	mov.w	ip, #10
 8003346:	9a07      	ldr	r2, [sp, #28]
 8003348:	4621      	mov	r1, r4
 800334a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800334e:	3b30      	subs	r3, #48	; 0x30
 8003350:	2b09      	cmp	r3, #9
 8003352:	d94e      	bls.n	80033f2 <_svfiprintf_r+0x17e>
 8003354:	b1b0      	cbz	r0, 8003384 <_svfiprintf_r+0x110>
 8003356:	9207      	str	r2, [sp, #28]
 8003358:	e014      	b.n	8003384 <_svfiprintf_r+0x110>
 800335a:	eba0 0308 	sub.w	r3, r0, r8
 800335e:	fa09 f303 	lsl.w	r3, r9, r3
 8003362:	4313      	orrs	r3, r2
 8003364:	46a2      	mov	sl, r4
 8003366:	9304      	str	r3, [sp, #16]
 8003368:	e7d2      	b.n	8003310 <_svfiprintf_r+0x9c>
 800336a:	9b03      	ldr	r3, [sp, #12]
 800336c:	1d19      	adds	r1, r3, #4
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	9103      	str	r1, [sp, #12]
 8003372:	2b00      	cmp	r3, #0
 8003374:	bfbb      	ittet	lt
 8003376:	425b      	neglt	r3, r3
 8003378:	f042 0202 	orrlt.w	r2, r2, #2
 800337c:	9307      	strge	r3, [sp, #28]
 800337e:	9307      	strlt	r3, [sp, #28]
 8003380:	bfb8      	it	lt
 8003382:	9204      	strlt	r2, [sp, #16]
 8003384:	7823      	ldrb	r3, [r4, #0]
 8003386:	2b2e      	cmp	r3, #46	; 0x2e
 8003388:	d10c      	bne.n	80033a4 <_svfiprintf_r+0x130>
 800338a:	7863      	ldrb	r3, [r4, #1]
 800338c:	2b2a      	cmp	r3, #42	; 0x2a
 800338e:	d135      	bne.n	80033fc <_svfiprintf_r+0x188>
 8003390:	9b03      	ldr	r3, [sp, #12]
 8003392:	3402      	adds	r4, #2
 8003394:	1d1a      	adds	r2, r3, #4
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	9203      	str	r2, [sp, #12]
 800339a:	2b00      	cmp	r3, #0
 800339c:	bfb8      	it	lt
 800339e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80033a2:	9305      	str	r3, [sp, #20]
 80033a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003470 <_svfiprintf_r+0x1fc>
 80033a8:	2203      	movs	r2, #3
 80033aa:	4650      	mov	r0, sl
 80033ac:	7821      	ldrb	r1, [r4, #0]
 80033ae:	f000 f9f7 	bl	80037a0 <memchr>
 80033b2:	b140      	cbz	r0, 80033c6 <_svfiprintf_r+0x152>
 80033b4:	2340      	movs	r3, #64	; 0x40
 80033b6:	eba0 000a 	sub.w	r0, r0, sl
 80033ba:	fa03 f000 	lsl.w	r0, r3, r0
 80033be:	9b04      	ldr	r3, [sp, #16]
 80033c0:	3401      	adds	r4, #1
 80033c2:	4303      	orrs	r3, r0
 80033c4:	9304      	str	r3, [sp, #16]
 80033c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033ca:	2206      	movs	r2, #6
 80033cc:	4825      	ldr	r0, [pc, #148]	; (8003464 <_svfiprintf_r+0x1f0>)
 80033ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033d2:	f000 f9e5 	bl	80037a0 <memchr>
 80033d6:	2800      	cmp	r0, #0
 80033d8:	d038      	beq.n	800344c <_svfiprintf_r+0x1d8>
 80033da:	4b23      	ldr	r3, [pc, #140]	; (8003468 <_svfiprintf_r+0x1f4>)
 80033dc:	bb1b      	cbnz	r3, 8003426 <_svfiprintf_r+0x1b2>
 80033de:	9b03      	ldr	r3, [sp, #12]
 80033e0:	3307      	adds	r3, #7
 80033e2:	f023 0307 	bic.w	r3, r3, #7
 80033e6:	3308      	adds	r3, #8
 80033e8:	9303      	str	r3, [sp, #12]
 80033ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033ec:	4433      	add	r3, r6
 80033ee:	9309      	str	r3, [sp, #36]	; 0x24
 80033f0:	e767      	b.n	80032c2 <_svfiprintf_r+0x4e>
 80033f2:	460c      	mov	r4, r1
 80033f4:	2001      	movs	r0, #1
 80033f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80033fa:	e7a5      	b.n	8003348 <_svfiprintf_r+0xd4>
 80033fc:	2300      	movs	r3, #0
 80033fe:	f04f 0c0a 	mov.w	ip, #10
 8003402:	4619      	mov	r1, r3
 8003404:	3401      	adds	r4, #1
 8003406:	9305      	str	r3, [sp, #20]
 8003408:	4620      	mov	r0, r4
 800340a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800340e:	3a30      	subs	r2, #48	; 0x30
 8003410:	2a09      	cmp	r2, #9
 8003412:	d903      	bls.n	800341c <_svfiprintf_r+0x1a8>
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0c5      	beq.n	80033a4 <_svfiprintf_r+0x130>
 8003418:	9105      	str	r1, [sp, #20]
 800341a:	e7c3      	b.n	80033a4 <_svfiprintf_r+0x130>
 800341c:	4604      	mov	r4, r0
 800341e:	2301      	movs	r3, #1
 8003420:	fb0c 2101 	mla	r1, ip, r1, r2
 8003424:	e7f0      	b.n	8003408 <_svfiprintf_r+0x194>
 8003426:	ab03      	add	r3, sp, #12
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	462a      	mov	r2, r5
 800342c:	4638      	mov	r0, r7
 800342e:	4b0f      	ldr	r3, [pc, #60]	; (800346c <_svfiprintf_r+0x1f8>)
 8003430:	a904      	add	r1, sp, #16
 8003432:	f3af 8000 	nop.w
 8003436:	1c42      	adds	r2, r0, #1
 8003438:	4606      	mov	r6, r0
 800343a:	d1d6      	bne.n	80033ea <_svfiprintf_r+0x176>
 800343c:	89ab      	ldrh	r3, [r5, #12]
 800343e:	065b      	lsls	r3, r3, #25
 8003440:	f53f af2c 	bmi.w	800329c <_svfiprintf_r+0x28>
 8003444:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003446:	b01d      	add	sp, #116	; 0x74
 8003448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800344c:	ab03      	add	r3, sp, #12
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	462a      	mov	r2, r5
 8003452:	4638      	mov	r0, r7
 8003454:	4b05      	ldr	r3, [pc, #20]	; (800346c <_svfiprintf_r+0x1f8>)
 8003456:	a904      	add	r1, sp, #16
 8003458:	f000 f87c 	bl	8003554 <_printf_i>
 800345c:	e7eb      	b.n	8003436 <_svfiprintf_r+0x1c2>
 800345e:	bf00      	nop
 8003460:	08003bbc 	.word	0x08003bbc
 8003464:	08003bc6 	.word	0x08003bc6
 8003468:	00000000 	.word	0x00000000
 800346c:	080031bd 	.word	0x080031bd
 8003470:	08003bc2 	.word	0x08003bc2

08003474 <_printf_common>:
 8003474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003478:	4616      	mov	r6, r2
 800347a:	4699      	mov	r9, r3
 800347c:	688a      	ldr	r2, [r1, #8]
 800347e:	690b      	ldr	r3, [r1, #16]
 8003480:	4607      	mov	r7, r0
 8003482:	4293      	cmp	r3, r2
 8003484:	bfb8      	it	lt
 8003486:	4613      	movlt	r3, r2
 8003488:	6033      	str	r3, [r6, #0]
 800348a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800348e:	460c      	mov	r4, r1
 8003490:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003494:	b10a      	cbz	r2, 800349a <_printf_common+0x26>
 8003496:	3301      	adds	r3, #1
 8003498:	6033      	str	r3, [r6, #0]
 800349a:	6823      	ldr	r3, [r4, #0]
 800349c:	0699      	lsls	r1, r3, #26
 800349e:	bf42      	ittt	mi
 80034a0:	6833      	ldrmi	r3, [r6, #0]
 80034a2:	3302      	addmi	r3, #2
 80034a4:	6033      	strmi	r3, [r6, #0]
 80034a6:	6825      	ldr	r5, [r4, #0]
 80034a8:	f015 0506 	ands.w	r5, r5, #6
 80034ac:	d106      	bne.n	80034bc <_printf_common+0x48>
 80034ae:	f104 0a19 	add.w	sl, r4, #25
 80034b2:	68e3      	ldr	r3, [r4, #12]
 80034b4:	6832      	ldr	r2, [r6, #0]
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	42ab      	cmp	r3, r5
 80034ba:	dc28      	bgt.n	800350e <_printf_common+0x9a>
 80034bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80034c0:	1e13      	subs	r3, r2, #0
 80034c2:	6822      	ldr	r2, [r4, #0]
 80034c4:	bf18      	it	ne
 80034c6:	2301      	movne	r3, #1
 80034c8:	0692      	lsls	r2, r2, #26
 80034ca:	d42d      	bmi.n	8003528 <_printf_common+0xb4>
 80034cc:	4649      	mov	r1, r9
 80034ce:	4638      	mov	r0, r7
 80034d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034d4:	47c0      	blx	r8
 80034d6:	3001      	adds	r0, #1
 80034d8:	d020      	beq.n	800351c <_printf_common+0xa8>
 80034da:	6823      	ldr	r3, [r4, #0]
 80034dc:	68e5      	ldr	r5, [r4, #12]
 80034de:	f003 0306 	and.w	r3, r3, #6
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	bf18      	it	ne
 80034e6:	2500      	movne	r5, #0
 80034e8:	6832      	ldr	r2, [r6, #0]
 80034ea:	f04f 0600 	mov.w	r6, #0
 80034ee:	68a3      	ldr	r3, [r4, #8]
 80034f0:	bf08      	it	eq
 80034f2:	1aad      	subeq	r5, r5, r2
 80034f4:	6922      	ldr	r2, [r4, #16]
 80034f6:	bf08      	it	eq
 80034f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034fc:	4293      	cmp	r3, r2
 80034fe:	bfc4      	itt	gt
 8003500:	1a9b      	subgt	r3, r3, r2
 8003502:	18ed      	addgt	r5, r5, r3
 8003504:	341a      	adds	r4, #26
 8003506:	42b5      	cmp	r5, r6
 8003508:	d11a      	bne.n	8003540 <_printf_common+0xcc>
 800350a:	2000      	movs	r0, #0
 800350c:	e008      	b.n	8003520 <_printf_common+0xac>
 800350e:	2301      	movs	r3, #1
 8003510:	4652      	mov	r2, sl
 8003512:	4649      	mov	r1, r9
 8003514:	4638      	mov	r0, r7
 8003516:	47c0      	blx	r8
 8003518:	3001      	adds	r0, #1
 800351a:	d103      	bne.n	8003524 <_printf_common+0xb0>
 800351c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003524:	3501      	adds	r5, #1
 8003526:	e7c4      	b.n	80034b2 <_printf_common+0x3e>
 8003528:	2030      	movs	r0, #48	; 0x30
 800352a:	18e1      	adds	r1, r4, r3
 800352c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003536:	4422      	add	r2, r4
 8003538:	3302      	adds	r3, #2
 800353a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800353e:	e7c5      	b.n	80034cc <_printf_common+0x58>
 8003540:	2301      	movs	r3, #1
 8003542:	4622      	mov	r2, r4
 8003544:	4649      	mov	r1, r9
 8003546:	4638      	mov	r0, r7
 8003548:	47c0      	blx	r8
 800354a:	3001      	adds	r0, #1
 800354c:	d0e6      	beq.n	800351c <_printf_common+0xa8>
 800354e:	3601      	adds	r6, #1
 8003550:	e7d9      	b.n	8003506 <_printf_common+0x92>
	...

08003554 <_printf_i>:
 8003554:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003558:	460c      	mov	r4, r1
 800355a:	7e27      	ldrb	r7, [r4, #24]
 800355c:	4691      	mov	r9, r2
 800355e:	2f78      	cmp	r7, #120	; 0x78
 8003560:	4680      	mov	r8, r0
 8003562:	469a      	mov	sl, r3
 8003564:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003566:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800356a:	d807      	bhi.n	800357c <_printf_i+0x28>
 800356c:	2f62      	cmp	r7, #98	; 0x62
 800356e:	d80a      	bhi.n	8003586 <_printf_i+0x32>
 8003570:	2f00      	cmp	r7, #0
 8003572:	f000 80d9 	beq.w	8003728 <_printf_i+0x1d4>
 8003576:	2f58      	cmp	r7, #88	; 0x58
 8003578:	f000 80a4 	beq.w	80036c4 <_printf_i+0x170>
 800357c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003580:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003584:	e03a      	b.n	80035fc <_printf_i+0xa8>
 8003586:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800358a:	2b15      	cmp	r3, #21
 800358c:	d8f6      	bhi.n	800357c <_printf_i+0x28>
 800358e:	a001      	add	r0, pc, #4	; (adr r0, 8003594 <_printf_i+0x40>)
 8003590:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003594:	080035ed 	.word	0x080035ed
 8003598:	08003601 	.word	0x08003601
 800359c:	0800357d 	.word	0x0800357d
 80035a0:	0800357d 	.word	0x0800357d
 80035a4:	0800357d 	.word	0x0800357d
 80035a8:	0800357d 	.word	0x0800357d
 80035ac:	08003601 	.word	0x08003601
 80035b0:	0800357d 	.word	0x0800357d
 80035b4:	0800357d 	.word	0x0800357d
 80035b8:	0800357d 	.word	0x0800357d
 80035bc:	0800357d 	.word	0x0800357d
 80035c0:	0800370f 	.word	0x0800370f
 80035c4:	08003631 	.word	0x08003631
 80035c8:	080036f1 	.word	0x080036f1
 80035cc:	0800357d 	.word	0x0800357d
 80035d0:	0800357d 	.word	0x0800357d
 80035d4:	08003731 	.word	0x08003731
 80035d8:	0800357d 	.word	0x0800357d
 80035dc:	08003631 	.word	0x08003631
 80035e0:	0800357d 	.word	0x0800357d
 80035e4:	0800357d 	.word	0x0800357d
 80035e8:	080036f9 	.word	0x080036f9
 80035ec:	680b      	ldr	r3, [r1, #0]
 80035ee:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80035f2:	1d1a      	adds	r2, r3, #4
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	600a      	str	r2, [r1, #0]
 80035f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035fc:	2301      	movs	r3, #1
 80035fe:	e0a4      	b.n	800374a <_printf_i+0x1f6>
 8003600:	6825      	ldr	r5, [r4, #0]
 8003602:	6808      	ldr	r0, [r1, #0]
 8003604:	062e      	lsls	r6, r5, #24
 8003606:	f100 0304 	add.w	r3, r0, #4
 800360a:	d50a      	bpl.n	8003622 <_printf_i+0xce>
 800360c:	6805      	ldr	r5, [r0, #0]
 800360e:	600b      	str	r3, [r1, #0]
 8003610:	2d00      	cmp	r5, #0
 8003612:	da03      	bge.n	800361c <_printf_i+0xc8>
 8003614:	232d      	movs	r3, #45	; 0x2d
 8003616:	426d      	negs	r5, r5
 8003618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800361c:	230a      	movs	r3, #10
 800361e:	485e      	ldr	r0, [pc, #376]	; (8003798 <_printf_i+0x244>)
 8003620:	e019      	b.n	8003656 <_printf_i+0x102>
 8003622:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003626:	6805      	ldr	r5, [r0, #0]
 8003628:	600b      	str	r3, [r1, #0]
 800362a:	bf18      	it	ne
 800362c:	b22d      	sxthne	r5, r5
 800362e:	e7ef      	b.n	8003610 <_printf_i+0xbc>
 8003630:	680b      	ldr	r3, [r1, #0]
 8003632:	6825      	ldr	r5, [r4, #0]
 8003634:	1d18      	adds	r0, r3, #4
 8003636:	6008      	str	r0, [r1, #0]
 8003638:	0628      	lsls	r0, r5, #24
 800363a:	d501      	bpl.n	8003640 <_printf_i+0xec>
 800363c:	681d      	ldr	r5, [r3, #0]
 800363e:	e002      	b.n	8003646 <_printf_i+0xf2>
 8003640:	0669      	lsls	r1, r5, #25
 8003642:	d5fb      	bpl.n	800363c <_printf_i+0xe8>
 8003644:	881d      	ldrh	r5, [r3, #0]
 8003646:	2f6f      	cmp	r7, #111	; 0x6f
 8003648:	bf0c      	ite	eq
 800364a:	2308      	moveq	r3, #8
 800364c:	230a      	movne	r3, #10
 800364e:	4852      	ldr	r0, [pc, #328]	; (8003798 <_printf_i+0x244>)
 8003650:	2100      	movs	r1, #0
 8003652:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003656:	6866      	ldr	r6, [r4, #4]
 8003658:	2e00      	cmp	r6, #0
 800365a:	bfa8      	it	ge
 800365c:	6821      	ldrge	r1, [r4, #0]
 800365e:	60a6      	str	r6, [r4, #8]
 8003660:	bfa4      	itt	ge
 8003662:	f021 0104 	bicge.w	r1, r1, #4
 8003666:	6021      	strge	r1, [r4, #0]
 8003668:	b90d      	cbnz	r5, 800366e <_printf_i+0x11a>
 800366a:	2e00      	cmp	r6, #0
 800366c:	d04d      	beq.n	800370a <_printf_i+0x1b6>
 800366e:	4616      	mov	r6, r2
 8003670:	fbb5 f1f3 	udiv	r1, r5, r3
 8003674:	fb03 5711 	mls	r7, r3, r1, r5
 8003678:	5dc7      	ldrb	r7, [r0, r7]
 800367a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800367e:	462f      	mov	r7, r5
 8003680:	42bb      	cmp	r3, r7
 8003682:	460d      	mov	r5, r1
 8003684:	d9f4      	bls.n	8003670 <_printf_i+0x11c>
 8003686:	2b08      	cmp	r3, #8
 8003688:	d10b      	bne.n	80036a2 <_printf_i+0x14e>
 800368a:	6823      	ldr	r3, [r4, #0]
 800368c:	07df      	lsls	r7, r3, #31
 800368e:	d508      	bpl.n	80036a2 <_printf_i+0x14e>
 8003690:	6923      	ldr	r3, [r4, #16]
 8003692:	6861      	ldr	r1, [r4, #4]
 8003694:	4299      	cmp	r1, r3
 8003696:	bfde      	ittt	le
 8003698:	2330      	movle	r3, #48	; 0x30
 800369a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800369e:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80036a2:	1b92      	subs	r2, r2, r6
 80036a4:	6122      	str	r2, [r4, #16]
 80036a6:	464b      	mov	r3, r9
 80036a8:	4621      	mov	r1, r4
 80036aa:	4640      	mov	r0, r8
 80036ac:	f8cd a000 	str.w	sl, [sp]
 80036b0:	aa03      	add	r2, sp, #12
 80036b2:	f7ff fedf 	bl	8003474 <_printf_common>
 80036b6:	3001      	adds	r0, #1
 80036b8:	d14c      	bne.n	8003754 <_printf_i+0x200>
 80036ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036be:	b004      	add	sp, #16
 80036c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036c4:	4834      	ldr	r0, [pc, #208]	; (8003798 <_printf_i+0x244>)
 80036c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80036ca:	680e      	ldr	r6, [r1, #0]
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	f856 5b04 	ldr.w	r5, [r6], #4
 80036d2:	061f      	lsls	r7, r3, #24
 80036d4:	600e      	str	r6, [r1, #0]
 80036d6:	d514      	bpl.n	8003702 <_printf_i+0x1ae>
 80036d8:	07d9      	lsls	r1, r3, #31
 80036da:	bf44      	itt	mi
 80036dc:	f043 0320 	orrmi.w	r3, r3, #32
 80036e0:	6023      	strmi	r3, [r4, #0]
 80036e2:	b91d      	cbnz	r5, 80036ec <_printf_i+0x198>
 80036e4:	6823      	ldr	r3, [r4, #0]
 80036e6:	f023 0320 	bic.w	r3, r3, #32
 80036ea:	6023      	str	r3, [r4, #0]
 80036ec:	2310      	movs	r3, #16
 80036ee:	e7af      	b.n	8003650 <_printf_i+0xfc>
 80036f0:	6823      	ldr	r3, [r4, #0]
 80036f2:	f043 0320 	orr.w	r3, r3, #32
 80036f6:	6023      	str	r3, [r4, #0]
 80036f8:	2378      	movs	r3, #120	; 0x78
 80036fa:	4828      	ldr	r0, [pc, #160]	; (800379c <_printf_i+0x248>)
 80036fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003700:	e7e3      	b.n	80036ca <_printf_i+0x176>
 8003702:	065e      	lsls	r6, r3, #25
 8003704:	bf48      	it	mi
 8003706:	b2ad      	uxthmi	r5, r5
 8003708:	e7e6      	b.n	80036d8 <_printf_i+0x184>
 800370a:	4616      	mov	r6, r2
 800370c:	e7bb      	b.n	8003686 <_printf_i+0x132>
 800370e:	680b      	ldr	r3, [r1, #0]
 8003710:	6826      	ldr	r6, [r4, #0]
 8003712:	1d1d      	adds	r5, r3, #4
 8003714:	6960      	ldr	r0, [r4, #20]
 8003716:	600d      	str	r5, [r1, #0]
 8003718:	0635      	lsls	r5, r6, #24
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	d501      	bpl.n	8003722 <_printf_i+0x1ce>
 800371e:	6018      	str	r0, [r3, #0]
 8003720:	e002      	b.n	8003728 <_printf_i+0x1d4>
 8003722:	0671      	lsls	r1, r6, #25
 8003724:	d5fb      	bpl.n	800371e <_printf_i+0x1ca>
 8003726:	8018      	strh	r0, [r3, #0]
 8003728:	2300      	movs	r3, #0
 800372a:	4616      	mov	r6, r2
 800372c:	6123      	str	r3, [r4, #16]
 800372e:	e7ba      	b.n	80036a6 <_printf_i+0x152>
 8003730:	680b      	ldr	r3, [r1, #0]
 8003732:	1d1a      	adds	r2, r3, #4
 8003734:	600a      	str	r2, [r1, #0]
 8003736:	681e      	ldr	r6, [r3, #0]
 8003738:	2100      	movs	r1, #0
 800373a:	4630      	mov	r0, r6
 800373c:	6862      	ldr	r2, [r4, #4]
 800373e:	f000 f82f 	bl	80037a0 <memchr>
 8003742:	b108      	cbz	r0, 8003748 <_printf_i+0x1f4>
 8003744:	1b80      	subs	r0, r0, r6
 8003746:	6060      	str	r0, [r4, #4]
 8003748:	6863      	ldr	r3, [r4, #4]
 800374a:	6123      	str	r3, [r4, #16]
 800374c:	2300      	movs	r3, #0
 800374e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003752:	e7a8      	b.n	80036a6 <_printf_i+0x152>
 8003754:	4632      	mov	r2, r6
 8003756:	4649      	mov	r1, r9
 8003758:	4640      	mov	r0, r8
 800375a:	6923      	ldr	r3, [r4, #16]
 800375c:	47d0      	blx	sl
 800375e:	3001      	adds	r0, #1
 8003760:	d0ab      	beq.n	80036ba <_printf_i+0x166>
 8003762:	6823      	ldr	r3, [r4, #0]
 8003764:	079b      	lsls	r3, r3, #30
 8003766:	d413      	bmi.n	8003790 <_printf_i+0x23c>
 8003768:	68e0      	ldr	r0, [r4, #12]
 800376a:	9b03      	ldr	r3, [sp, #12]
 800376c:	4298      	cmp	r0, r3
 800376e:	bfb8      	it	lt
 8003770:	4618      	movlt	r0, r3
 8003772:	e7a4      	b.n	80036be <_printf_i+0x16a>
 8003774:	2301      	movs	r3, #1
 8003776:	4632      	mov	r2, r6
 8003778:	4649      	mov	r1, r9
 800377a:	4640      	mov	r0, r8
 800377c:	47d0      	blx	sl
 800377e:	3001      	adds	r0, #1
 8003780:	d09b      	beq.n	80036ba <_printf_i+0x166>
 8003782:	3501      	adds	r5, #1
 8003784:	68e3      	ldr	r3, [r4, #12]
 8003786:	9903      	ldr	r1, [sp, #12]
 8003788:	1a5b      	subs	r3, r3, r1
 800378a:	42ab      	cmp	r3, r5
 800378c:	dcf2      	bgt.n	8003774 <_printf_i+0x220>
 800378e:	e7eb      	b.n	8003768 <_printf_i+0x214>
 8003790:	2500      	movs	r5, #0
 8003792:	f104 0619 	add.w	r6, r4, #25
 8003796:	e7f5      	b.n	8003784 <_printf_i+0x230>
 8003798:	08003bcd 	.word	0x08003bcd
 800379c:	08003bde 	.word	0x08003bde

080037a0 <memchr>:
 80037a0:	4603      	mov	r3, r0
 80037a2:	b510      	push	{r4, lr}
 80037a4:	b2c9      	uxtb	r1, r1
 80037a6:	4402      	add	r2, r0
 80037a8:	4293      	cmp	r3, r2
 80037aa:	4618      	mov	r0, r3
 80037ac:	d101      	bne.n	80037b2 <memchr+0x12>
 80037ae:	2000      	movs	r0, #0
 80037b0:	e003      	b.n	80037ba <memchr+0x1a>
 80037b2:	7804      	ldrb	r4, [r0, #0]
 80037b4:	3301      	adds	r3, #1
 80037b6:	428c      	cmp	r4, r1
 80037b8:	d1f6      	bne.n	80037a8 <memchr+0x8>
 80037ba:	bd10      	pop	{r4, pc}

080037bc <memcpy>:
 80037bc:	440a      	add	r2, r1
 80037be:	4291      	cmp	r1, r2
 80037c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80037c4:	d100      	bne.n	80037c8 <memcpy+0xc>
 80037c6:	4770      	bx	lr
 80037c8:	b510      	push	{r4, lr}
 80037ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037ce:	4291      	cmp	r1, r2
 80037d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037d4:	d1f9      	bne.n	80037ca <memcpy+0xe>
 80037d6:	bd10      	pop	{r4, pc}

080037d8 <memmove>:
 80037d8:	4288      	cmp	r0, r1
 80037da:	b510      	push	{r4, lr}
 80037dc:	eb01 0402 	add.w	r4, r1, r2
 80037e0:	d902      	bls.n	80037e8 <memmove+0x10>
 80037e2:	4284      	cmp	r4, r0
 80037e4:	4623      	mov	r3, r4
 80037e6:	d807      	bhi.n	80037f8 <memmove+0x20>
 80037e8:	1e43      	subs	r3, r0, #1
 80037ea:	42a1      	cmp	r1, r4
 80037ec:	d008      	beq.n	8003800 <memmove+0x28>
 80037ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80037f6:	e7f8      	b.n	80037ea <memmove+0x12>
 80037f8:	4601      	mov	r1, r0
 80037fa:	4402      	add	r2, r0
 80037fc:	428a      	cmp	r2, r1
 80037fe:	d100      	bne.n	8003802 <memmove+0x2a>
 8003800:	bd10      	pop	{r4, pc}
 8003802:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003806:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800380a:	e7f7      	b.n	80037fc <memmove+0x24>

0800380c <_free_r>:
 800380c:	b538      	push	{r3, r4, r5, lr}
 800380e:	4605      	mov	r5, r0
 8003810:	2900      	cmp	r1, #0
 8003812:	d043      	beq.n	800389c <_free_r+0x90>
 8003814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003818:	1f0c      	subs	r4, r1, #4
 800381a:	2b00      	cmp	r3, #0
 800381c:	bfb8      	it	lt
 800381e:	18e4      	addlt	r4, r4, r3
 8003820:	f000 f8d0 	bl	80039c4 <__malloc_lock>
 8003824:	4a1e      	ldr	r2, [pc, #120]	; (80038a0 <_free_r+0x94>)
 8003826:	6813      	ldr	r3, [r2, #0]
 8003828:	4610      	mov	r0, r2
 800382a:	b933      	cbnz	r3, 800383a <_free_r+0x2e>
 800382c:	6063      	str	r3, [r4, #4]
 800382e:	6014      	str	r4, [r2, #0]
 8003830:	4628      	mov	r0, r5
 8003832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003836:	f000 b8cb 	b.w	80039d0 <__malloc_unlock>
 800383a:	42a3      	cmp	r3, r4
 800383c:	d90a      	bls.n	8003854 <_free_r+0x48>
 800383e:	6821      	ldr	r1, [r4, #0]
 8003840:	1862      	adds	r2, r4, r1
 8003842:	4293      	cmp	r3, r2
 8003844:	bf01      	itttt	eq
 8003846:	681a      	ldreq	r2, [r3, #0]
 8003848:	685b      	ldreq	r3, [r3, #4]
 800384a:	1852      	addeq	r2, r2, r1
 800384c:	6022      	streq	r2, [r4, #0]
 800384e:	6063      	str	r3, [r4, #4]
 8003850:	6004      	str	r4, [r0, #0]
 8003852:	e7ed      	b.n	8003830 <_free_r+0x24>
 8003854:	461a      	mov	r2, r3
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	b10b      	cbz	r3, 800385e <_free_r+0x52>
 800385a:	42a3      	cmp	r3, r4
 800385c:	d9fa      	bls.n	8003854 <_free_r+0x48>
 800385e:	6811      	ldr	r1, [r2, #0]
 8003860:	1850      	adds	r0, r2, r1
 8003862:	42a0      	cmp	r0, r4
 8003864:	d10b      	bne.n	800387e <_free_r+0x72>
 8003866:	6820      	ldr	r0, [r4, #0]
 8003868:	4401      	add	r1, r0
 800386a:	1850      	adds	r0, r2, r1
 800386c:	4283      	cmp	r3, r0
 800386e:	6011      	str	r1, [r2, #0]
 8003870:	d1de      	bne.n	8003830 <_free_r+0x24>
 8003872:	6818      	ldr	r0, [r3, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	4401      	add	r1, r0
 8003878:	6011      	str	r1, [r2, #0]
 800387a:	6053      	str	r3, [r2, #4]
 800387c:	e7d8      	b.n	8003830 <_free_r+0x24>
 800387e:	d902      	bls.n	8003886 <_free_r+0x7a>
 8003880:	230c      	movs	r3, #12
 8003882:	602b      	str	r3, [r5, #0]
 8003884:	e7d4      	b.n	8003830 <_free_r+0x24>
 8003886:	6820      	ldr	r0, [r4, #0]
 8003888:	1821      	adds	r1, r4, r0
 800388a:	428b      	cmp	r3, r1
 800388c:	bf01      	itttt	eq
 800388e:	6819      	ldreq	r1, [r3, #0]
 8003890:	685b      	ldreq	r3, [r3, #4]
 8003892:	1809      	addeq	r1, r1, r0
 8003894:	6021      	streq	r1, [r4, #0]
 8003896:	6063      	str	r3, [r4, #4]
 8003898:	6054      	str	r4, [r2, #4]
 800389a:	e7c9      	b.n	8003830 <_free_r+0x24>
 800389c:	bd38      	pop	{r3, r4, r5, pc}
 800389e:	bf00      	nop
 80038a0:	20000098 	.word	0x20000098

080038a4 <_malloc_r>:
 80038a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a6:	1ccd      	adds	r5, r1, #3
 80038a8:	f025 0503 	bic.w	r5, r5, #3
 80038ac:	3508      	adds	r5, #8
 80038ae:	2d0c      	cmp	r5, #12
 80038b0:	bf38      	it	cc
 80038b2:	250c      	movcc	r5, #12
 80038b4:	2d00      	cmp	r5, #0
 80038b6:	4606      	mov	r6, r0
 80038b8:	db01      	blt.n	80038be <_malloc_r+0x1a>
 80038ba:	42a9      	cmp	r1, r5
 80038bc:	d903      	bls.n	80038c6 <_malloc_r+0x22>
 80038be:	230c      	movs	r3, #12
 80038c0:	6033      	str	r3, [r6, #0]
 80038c2:	2000      	movs	r0, #0
 80038c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038c6:	f000 f87d 	bl	80039c4 <__malloc_lock>
 80038ca:	4921      	ldr	r1, [pc, #132]	; (8003950 <_malloc_r+0xac>)
 80038cc:	680a      	ldr	r2, [r1, #0]
 80038ce:	4614      	mov	r4, r2
 80038d0:	b99c      	cbnz	r4, 80038fa <_malloc_r+0x56>
 80038d2:	4f20      	ldr	r7, [pc, #128]	; (8003954 <_malloc_r+0xb0>)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	b923      	cbnz	r3, 80038e2 <_malloc_r+0x3e>
 80038d8:	4621      	mov	r1, r4
 80038da:	4630      	mov	r0, r6
 80038dc:	f000 f862 	bl	80039a4 <_sbrk_r>
 80038e0:	6038      	str	r0, [r7, #0]
 80038e2:	4629      	mov	r1, r5
 80038e4:	4630      	mov	r0, r6
 80038e6:	f000 f85d 	bl	80039a4 <_sbrk_r>
 80038ea:	1c43      	adds	r3, r0, #1
 80038ec:	d123      	bne.n	8003936 <_malloc_r+0x92>
 80038ee:	230c      	movs	r3, #12
 80038f0:	4630      	mov	r0, r6
 80038f2:	6033      	str	r3, [r6, #0]
 80038f4:	f000 f86c 	bl	80039d0 <__malloc_unlock>
 80038f8:	e7e3      	b.n	80038c2 <_malloc_r+0x1e>
 80038fa:	6823      	ldr	r3, [r4, #0]
 80038fc:	1b5b      	subs	r3, r3, r5
 80038fe:	d417      	bmi.n	8003930 <_malloc_r+0x8c>
 8003900:	2b0b      	cmp	r3, #11
 8003902:	d903      	bls.n	800390c <_malloc_r+0x68>
 8003904:	6023      	str	r3, [r4, #0]
 8003906:	441c      	add	r4, r3
 8003908:	6025      	str	r5, [r4, #0]
 800390a:	e004      	b.n	8003916 <_malloc_r+0x72>
 800390c:	6863      	ldr	r3, [r4, #4]
 800390e:	42a2      	cmp	r2, r4
 8003910:	bf0c      	ite	eq
 8003912:	600b      	streq	r3, [r1, #0]
 8003914:	6053      	strne	r3, [r2, #4]
 8003916:	4630      	mov	r0, r6
 8003918:	f000 f85a 	bl	80039d0 <__malloc_unlock>
 800391c:	f104 000b 	add.w	r0, r4, #11
 8003920:	1d23      	adds	r3, r4, #4
 8003922:	f020 0007 	bic.w	r0, r0, #7
 8003926:	1ac2      	subs	r2, r0, r3
 8003928:	d0cc      	beq.n	80038c4 <_malloc_r+0x20>
 800392a:	1a1b      	subs	r3, r3, r0
 800392c:	50a3      	str	r3, [r4, r2]
 800392e:	e7c9      	b.n	80038c4 <_malloc_r+0x20>
 8003930:	4622      	mov	r2, r4
 8003932:	6864      	ldr	r4, [r4, #4]
 8003934:	e7cc      	b.n	80038d0 <_malloc_r+0x2c>
 8003936:	1cc4      	adds	r4, r0, #3
 8003938:	f024 0403 	bic.w	r4, r4, #3
 800393c:	42a0      	cmp	r0, r4
 800393e:	d0e3      	beq.n	8003908 <_malloc_r+0x64>
 8003940:	1a21      	subs	r1, r4, r0
 8003942:	4630      	mov	r0, r6
 8003944:	f000 f82e 	bl	80039a4 <_sbrk_r>
 8003948:	3001      	adds	r0, #1
 800394a:	d1dd      	bne.n	8003908 <_malloc_r+0x64>
 800394c:	e7cf      	b.n	80038ee <_malloc_r+0x4a>
 800394e:	bf00      	nop
 8003950:	20000098 	.word	0x20000098
 8003954:	2000009c 	.word	0x2000009c

08003958 <_realloc_r>:
 8003958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395a:	4607      	mov	r7, r0
 800395c:	4614      	mov	r4, r2
 800395e:	460e      	mov	r6, r1
 8003960:	b921      	cbnz	r1, 800396c <_realloc_r+0x14>
 8003962:	4611      	mov	r1, r2
 8003964:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003968:	f7ff bf9c 	b.w	80038a4 <_malloc_r>
 800396c:	b922      	cbnz	r2, 8003978 <_realloc_r+0x20>
 800396e:	f7ff ff4d 	bl	800380c <_free_r>
 8003972:	4625      	mov	r5, r4
 8003974:	4628      	mov	r0, r5
 8003976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003978:	f000 f830 	bl	80039dc <_malloc_usable_size_r>
 800397c:	42a0      	cmp	r0, r4
 800397e:	d20f      	bcs.n	80039a0 <_realloc_r+0x48>
 8003980:	4621      	mov	r1, r4
 8003982:	4638      	mov	r0, r7
 8003984:	f7ff ff8e 	bl	80038a4 <_malloc_r>
 8003988:	4605      	mov	r5, r0
 800398a:	2800      	cmp	r0, #0
 800398c:	d0f2      	beq.n	8003974 <_realloc_r+0x1c>
 800398e:	4631      	mov	r1, r6
 8003990:	4622      	mov	r2, r4
 8003992:	f7ff ff13 	bl	80037bc <memcpy>
 8003996:	4631      	mov	r1, r6
 8003998:	4638      	mov	r0, r7
 800399a:	f7ff ff37 	bl	800380c <_free_r>
 800399e:	e7e9      	b.n	8003974 <_realloc_r+0x1c>
 80039a0:	4635      	mov	r5, r6
 80039a2:	e7e7      	b.n	8003974 <_realloc_r+0x1c>

080039a4 <_sbrk_r>:
 80039a4:	b538      	push	{r3, r4, r5, lr}
 80039a6:	2300      	movs	r3, #0
 80039a8:	4d05      	ldr	r5, [pc, #20]	; (80039c0 <_sbrk_r+0x1c>)
 80039aa:	4604      	mov	r4, r0
 80039ac:	4608      	mov	r0, r1
 80039ae:	602b      	str	r3, [r5, #0]
 80039b0:	f7fc fdda 	bl	8000568 <_sbrk>
 80039b4:	1c43      	adds	r3, r0, #1
 80039b6:	d102      	bne.n	80039be <_sbrk_r+0x1a>
 80039b8:	682b      	ldr	r3, [r5, #0]
 80039ba:	b103      	cbz	r3, 80039be <_sbrk_r+0x1a>
 80039bc:	6023      	str	r3, [r4, #0]
 80039be:	bd38      	pop	{r3, r4, r5, pc}
 80039c0:	2000012c 	.word	0x2000012c

080039c4 <__malloc_lock>:
 80039c4:	4801      	ldr	r0, [pc, #4]	; (80039cc <__malloc_lock+0x8>)
 80039c6:	f000 b811 	b.w	80039ec <__retarget_lock_acquire_recursive>
 80039ca:	bf00      	nop
 80039cc:	20000134 	.word	0x20000134

080039d0 <__malloc_unlock>:
 80039d0:	4801      	ldr	r0, [pc, #4]	; (80039d8 <__malloc_unlock+0x8>)
 80039d2:	f000 b80c 	b.w	80039ee <__retarget_lock_release_recursive>
 80039d6:	bf00      	nop
 80039d8:	20000134 	.word	0x20000134

080039dc <_malloc_usable_size_r>:
 80039dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039e0:	1f18      	subs	r0, r3, #4
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	bfbc      	itt	lt
 80039e6:	580b      	ldrlt	r3, [r1, r0]
 80039e8:	18c0      	addlt	r0, r0, r3
 80039ea:	4770      	bx	lr

080039ec <__retarget_lock_acquire_recursive>:
 80039ec:	4770      	bx	lr

080039ee <__retarget_lock_release_recursive>:
 80039ee:	4770      	bx	lr

080039f0 <_init>:
 80039f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f2:	bf00      	nop
 80039f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039f6:	bc08      	pop	{r3}
 80039f8:	469e      	mov	lr, r3
 80039fa:	4770      	bx	lr

080039fc <_fini>:
 80039fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039fe:	bf00      	nop
 8003a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a02:	bc08      	pop	{r3}
 8003a04:	469e      	mov	lr, r3
 8003a06:	4770      	bx	lr
